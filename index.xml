<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Musings on Software Musings</title>
    <link>https://www.marcelbelmont.com/</link>
    <description>Recent content in Software Musings on Software Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jean-Marcel Belmont</copyright>
    <lastBuildDate>Fri, 24 May 2019 20:20:59 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Lucene Queries</title>
      <link>https://www.marcelbelmont.com/post/using-lucene-queries/</link>
      <pubDate>Fri, 24 May 2019 20:20:59 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/using-lucene-queries/</guid>
      <description>

&lt;h1 id=&#34;apache-lucene&#34;&gt;Apache Lucene&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Lucene&#34; target=&#34;_blank&#34;&gt;Apache Lucene Wikipedia&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Patches in Software</title>
      <link>https://www.marcelbelmont.com/post/using-patches-in-git/</link>
      <pubDate>Sun, 21 Apr 2019 09:38:33 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/using-patches-in-git/</guid>
      <description>

&lt;h1 id=&#34;according-to-wikipedia-a-patch-in-software-is-defined-as&#34;&gt;According to Wikipedia a Patch in software is defined as:&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A patch is a set of changes to a computer program or its supporting data designed to update, fix, or improve it. This includes fixing security vulnerabilities and other bugs, with such patches usually being called bugfixes or bug fixes,[better source needed] and improving the usability or performance. Although meant to fix problems, poorly designed patches can sometimes introduce new problems (see software regressions). In some special cases updates may knowingly break the functionality or disable a device, for instance, by removing components for which the update provider is no longer licensed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;types-of-patches-in-software&#34;&gt;Types of Patches in Software&lt;/h2&gt;

&lt;p&gt;We will be looking at source code patches in this blog post but there is also other types of patches such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Patch_%28computing%29#Binary_patches&#34; target=&#34;_blank&#34;&gt;Binary Patches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;In software patches a patch is usually represented between a difference (diff) between 2 code files.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;software-patch-variants&#34;&gt;Software Patch Variants&lt;/h4&gt;

&lt;p&gt;According to Wikipedia there are several software patches:&lt;/p&gt;

&lt;h6 id=&#34;hotfix&#34;&gt;Hotfix&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;A hotfix or Quick Fix Engineering update (QFE update) is a single, cumulative package that includes information (often in the form of one or more files) that is used to address a problem in a software product (i.e., a software bug). Typically, hotfixes are made to address a specific customer situation. Microsoft once used this term but has stopped in favor of new terminology: General Distribution Release (GDR) and Limited Distribution Release (LDR). Blizzard Entertainment, however, defines a hotfix as &amp;ldquo;a change made to the game deemed critical enough that it cannot be held off until a regular content patch&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;point-release&#34;&gt;Point release&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;A point release is a minor release of a software project, especially one intended to fix bugs or do small cleanups rather than add significant features. Often, there are too many bugs to be fixed in a single major or minor release, creating a need for a point release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;program-temporary-fix&#34;&gt;Program temporary fix&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;Program temporary fix or Product temporary fix (PTF), depending on date, is the standard IBM terminology for a single bug fix, or group of fixes, distributed in a form ready to install for customers. A PTF was sometimes referred to as a &amp;ldquo;ZAP&amp;rdquo; see Customers sometime explain the acronym in a tongue-in-cheek manner as permanent temporary fix or more practically probably this fixes, because they have the option to make the PTF a permanent part of the operating system if the patch fixes the problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;security-patches&#34;&gt;Security patches&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;A security patch is a change applied to an asset to correct the weakness described by a vulnerability. This corrective action will prevent successful exploitation and remove or mitigate a threat&amp;rsquo;s capability to exploit a specific vulnerability in an asset. Patch management is a part of Vulnerability management - the cyclical practice of identifying, classifying, remediating, and mitigating vulnerabilities.&lt;/p&gt;

&lt;p&gt;Security patches are the primary method of fixing security vulnerabilities in software. Currently Microsoft releases its security patches once a month, and other operating systems and software projects have security teams dedicated to releasing the most reliable software patches as soon after a vulnerability announcement as possible. Security patches are closely tied to responsible disclosure.&lt;/p&gt;

&lt;p&gt;These security patches are critical to ensure that business process does not get affected. In 2017, companies were struck by a ransomware called WannaCry which encrypts files in certain versions of Microsoft Windows and demands a ransom via BitCoin. In response to this, Microsoft released a patch which stops the ransomware from running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;service-pack&#34;&gt;Service pack&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;A service pack or SP or a feature pack (FP) comprises a collection of updates, fixes, or enhancements to a software program delivered in the form of a single installable package. Companies often release a service pack when the number of individual patches to a given program reaches a certain (arbitrary) limit, or the software release has shown to be stabilized with a limited number of remaining issues based on users&amp;rsquo; feedback and bug tracking such as bugzilla. In large software applications such as office suites, operating systems, database software, or network management, it is not uncommon to have a service pack issued within the first year or two of a product&amp;rsquo;s release. Installing a service pack is easier and less error-prone than installing many individual patches, even more so when updating multiple computers over a network, where service packs are common.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;unofficial-patches&#34;&gt;Unofficial patches&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;An unofficial patch is a non-commercial patch for a commercial software created by a third party instead of the original developer. Similar to an ordinary patch, it alleviates bugs or shortcomings. Examples are security fixes by security specialists when an official patch by the software producers itself takes too long. Other examples are unofficial patches created by the game community of a video game which became unsupported abandonware.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;creating-patches-in-git&#34;&gt;Creating Patches in Git&lt;/h2&gt;

&lt;p&gt;We can generate patch files in a couple of different ways and there are several different commands associated with using patches in git:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-am&#34; target=&#34;_blank&#34;&gt;git am manual page&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; git help am

git-am - Apply a series of patches from a mailbox

SYNOPSIS
       git am &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--signoff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--keep&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;keep-cr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;utf8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;3way&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--interactive&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--committer-date-is-author-date&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ignore-date&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ignore-space-change | --ignore-whitespace&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--whitespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;option&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-C&amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-p&amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--directory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;dir&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--exclude&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--include&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--reject&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-q | --quiet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;scissors&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-S&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;keyid&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--patch-format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;format&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&amp;lt;mbox&amp;gt; | &amp;lt;Maildir&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
       git am &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;--continue | --skip | --abort | --quit | --show-current-patch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;


DESCRIPTION
       Splits mail messages in a mailbox into commit log message, authorship information and patches, and applies them to the
       current branch.
....................................................................................................
....................................................................................................
....................................................................................................&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-apply&#34; target=&#34;_blank&#34;&gt;git apply manual page&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME
       git-apply - Apply a patch to files and/or to the index

SYNOPSIS
       git apply &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--stat&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--numstat&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--summary&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--check&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--index | --intent-to-add&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--3way&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--apply&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--no-add&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--build-fake-ancestor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;file&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-R | --reverse&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--allow-binary-replacement | --binary&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--reject&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-p&amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-C&amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--inaccurate-eof&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--recount&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--cached&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ignore-space-change | --ignore-whitespace&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--whitespace&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;nowarn|warn|fix|error|error-all&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--exclude&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--include&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--directory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;root&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--verbose&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--unsafe-paths&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;patch&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;


DESCRIPTION
       Reads the supplied diff output &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i.e. &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a patch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; and applies it to files. When running from a subdirectory in a
       repository, patched paths outside the directory are ignored. With the --index option the patch is also applied to the
       index, and with the --cached option the patch is only applied to the index. Without these options, the command applies
       the patch only to files, and does not require them to be in a Git repository.

       This command applies the patch but does not create a commit. Use git-am&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; to create commits from patches generated by
       git-format-patch&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; and/or received by email.
....................................................................................................
....................................................................................................
....................................................................................................&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-cherry-pick&#34; target=&#34;_blank&#34;&gt;git cherry-pick manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME
       git-cherry-pick - Apply the changes introduced by some existing commits

SYNOPSIS
       git cherry-pick &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--edit&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-m parent-number&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-s&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-x&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                         &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-S&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;keyid&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &amp;lt;commit&amp;gt;...
       git cherry-pick --continue
       git cherry-pick --quit
       git cherry-pick --abort


DESCRIPTION
       Given one or more existing commits, apply the change each one introduces, recording a new commit &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each. This requires
       your working tree to be clean &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;no modifications from the HEAD commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

       When it is not obvious how to apply a change, the following happens:

        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;. The current branch and HEAD pointer stay at the last commit successfully made.

        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;. The CHERRY_PICK_HEAD ref is set to point at the commit that introduced the change that is difficult to apply.

        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;. Paths in which the change applied cleanly are updated both in the index file and in your working tree.

        &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;. For conflicting paths, the index file records up to three versions, as described in the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TRUE MERGE&amp;#34;&lt;/span&gt; section of git-
           merge&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;. The working tree files will include a description of the conflict bracketed by the usual conflict markers
           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;lt; and &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;.

        &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;. No other modifications are made.

       See git-merge&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; some hints on resolving such conflicts.
....................................................................................................
....................................................................................................
....................................................................................................&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-diff&#34; target=&#34;_blank&#34;&gt;git diff manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME
git-diff - Show changes between commits, commit and working tree, etc

SYNOPSIS
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;commit&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; --cached &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;commit&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;blob&amp;gt; &amp;lt;blob&amp;gt;
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; --no-index &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;path&amp;gt; &amp;lt;path&amp;gt;
DESCRIPTION
Show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, changes between two blob objects, or changes between two files on disk.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This form is to view the changes you made relative to the index &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;staging area &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the next commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;. In other words, the differences are what you could tell Git to further add to the index but you still haven’t. You can stage these changes by using git-add&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; --no-index &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;path&amp;gt; &amp;lt;path&amp;gt;
This form is to compare the given two paths on the filesystem. You can omit the --no-index option when running the command in a working tree controlled by Git and at least one of the paths points outside the working tree, or when running the command outside a working tree controlled by Git.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; --cached &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;commit&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This form is to view the changes you staged &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the next commit relative to the named &amp;lt;commit&amp;gt;. Typically you would want comparison with the latest commit, so &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not give &amp;lt;commit&amp;gt;, it defaults to HEAD. If HEAD does not exist &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e.g. unborn branches&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; and &amp;lt;commit&amp;gt; is not given, it shows all staged changes. --staged is a synonym of --cached.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This form is to view the changes you have in your working tree relative to the named &amp;lt;commit&amp;gt;. You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip of a different branch.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This is to view the changes between two arbitrary &amp;lt;commit&amp;gt;.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the same effect as using HEAD instead.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;...&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting at a common ancestor of both &amp;lt;commit&amp;gt;. &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git diff A...B&amp;#34;&lt;/span&gt; is equivalent to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git diff &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git merge-base A B&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; B&amp;#34;&lt;/span&gt;. You can omit any one of &amp;lt;commit&amp;gt;, which has the same effect as using HEAD instead.

Just in &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; you are doing something exotic, it should be noted that all of the &amp;lt;commit&amp;gt; in the above description, except in the last two forms that use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt; notations, can be any &amp;lt;tree&amp;gt;.

For a more complete list of ways to spell &amp;lt;commit&amp;gt;, see &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPECIFYING REVISIONS&amp;#34;&lt;/span&gt; section in gitrevisions&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;. However, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;diff&amp;#34;&lt;/span&gt; is about comparing two endpoints, not ranges, and the range notations &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt;&amp;#34;&lt;/span&gt; and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;commit&amp;gt;...&amp;lt;commit&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not mean a range as defined in the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPECIFYING RANGES&amp;#34;&lt;/span&gt; section in gitrevisions&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;blob&amp;gt; &amp;lt;blob&amp;gt;
This form is to view the differences between the raw contents of two blob objects.
....................................................................................................
....................................................................................................
....................................................................................................&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-format-patch&#34; target=&#34;_blank&#34;&gt;git format-patch manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME
git-format-patch - Prepare patches &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e-mail submission

SYNOPSIS
git format-patch &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-k&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;-o|--output-directory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &amp;lt;dir&amp;gt; | --stdout&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--no-thread | --thread&lt;span style=&#34;color:#f92672&#34;&gt;[=&lt;/span&gt;&amp;lt;style&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;--attach|--inline&lt;span style=&#34;color:#f92672&#34;&gt;)[=&lt;/span&gt;&amp;lt;boundary&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; | --no-attach&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-s | --signoff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--signature&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;signature&amp;gt; | --no-signature&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--signature-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;file&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-n | --numbered | -N | --no-numbered&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--start-number &amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--numbered-files&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--in-reply-to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Message-Id&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--suffix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;.&amp;lt;sfx&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ignore-if-in-upstream&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--rfc&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--subject-prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Subject-Prefix&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;--reroll-count|-v&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;email&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--cc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;email&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;cover-letter&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--quiet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--notes&lt;span style=&#34;color:#f92672&#34;&gt;[=&lt;/span&gt;&amp;lt;ref&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--interdiff&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;previous&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--range-diff&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;previous&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--creation-factor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;percent&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--progress&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;common diff options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &amp;lt;since&amp;gt; | &amp;lt;revision range&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
DESCRIPTION
Prepare each commit with its patch in one file per commit, formatted to resemble UNIX mailbox format. The output of this command is convenient &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e-mail submission or &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; use with git am.

There are two ways to specify which commits to operate on.

A single commit, &amp;lt;since&amp;gt;, specifies that the commits leading to the tip of the current branch that are not in the history that leads to the &amp;lt;since&amp;gt; to be output.

Generic &amp;lt;revision range&amp;gt; expression &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;see &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPECIFYING REVISIONS&amp;#34;&lt;/span&gt; section in gitrevisions&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; means the commits in the specified range.

The first rule takes precedence in the &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; of a single &amp;lt;commit&amp;gt;. To apply the second rule, i.e., format everything since the beginning of history up &lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; &amp;lt;commit&amp;gt;, use the --root option: git format-patch --root &amp;lt;commit&amp;gt;. If you want to format only &amp;lt;commit&amp;gt; itself, you can &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this with git format-patch -1 &amp;lt;commit&amp;gt;.

By default, each output file is numbered sequentially from &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, and uses the first line of the commit message &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;massaged &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pathname safety&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; as the filename. With the --numbered-files option, the output file names will only be numbers, without the first line of the commit appended. The names of the output files are printed to standard output, unless the --stdout option is specified.

If -o is specified, output files are created in &amp;lt;dir&amp;gt;. Otherwise they are created in the current working directory. The default path can be set with the format.outputDirectory configuration option. The -o option takes precedence over format.outputDirectory. To store patches in the current working directory even when format.outputDirectory points elsewhere, use -o ..

By default, the subject of a single patch is &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[PATCH] &amp;#34;&lt;/span&gt; followed by the concatenation of lines from the commit message up to the first blank line &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;see the DISCUSSION section of git-commit&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;.

When multiple patches are output, the subject prefix will instead be &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[PATCH n/m] &amp;#34;&lt;/span&gt;. To force &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1 to be added &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a single patch, use -n. To omit patch numbers from the subject, use -N.

If given --thread, git-format-patch will generate In-Reply-To and References headers to make the second and subsequent patch mails appear as replies to the first mail; this also generates a Message-Id header to reference.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are other related git commands for working with commits that are related to patches such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-rebase&#34; target=&#34;_blank&#34;&gt;git rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-revert&#34; target=&#34;_blank&#34;&gt;git revert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;We will not go over these in this blog post.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;using-git-diff-to-generate-a-patch-file&#34;&gt;Using git diff to generate a patch file&lt;/h4&gt;

&lt;p&gt;We can use the &lt;em&gt;git diff&lt;/em&gt; command to generate a patch file*&lt;/p&gt;

&lt;p&gt;Here is a sample session where we create patch file from the current changes in the repository. I show the current changes with an alias for &lt;em&gt;git status -s&lt;/em&gt; command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-diff.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-git-format-patch-command-to-generate-a-series-of-patches-in-patches-directory&#34;&gt;Using git format-patch command to generate a series of patches in patches directory&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Prepare each commit with its patch in one file per commit, formatted to resemble UNIX mailbox format. The output of this command is convenient for e-mail submission or for use with git am.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will use the &lt;em&gt;git format-patch&lt;/em&gt; command to generate patches against a destination branch of master.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-format-patches.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that the patches file looks a little bit like an email as this command is based on the UNIX mailbox format.&lt;/p&gt;

&lt;p&gt;Notice that in this next session we create the patches directory in the parent directory:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-format-patches-other-dir.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can create a patches directory with a name for each repo with a command like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/create-patches-dir.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now we can create a patches list with this directory structure like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-format-patches-structure.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;git-am-command&#34;&gt;git am command&lt;/h4&gt;

&lt;p&gt;Now we can checkout back to the master branch and apply these changes by using &lt;em&gt;git am&lt;/em&gt; command like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-am-applied.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in the screenshot below that our patches were replayed on top of existing commits:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-replay-ontop.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;The difference between the &lt;a href=&#34;https://git-scm.com/docs/git-am&#34; target=&#34;_blank&#34;&gt;git am command&lt;/a&gt; and the &lt;a href=&#34;https://git-scm.com/docs/git-apply&#34; target=&#34;_blank&#34;&gt;git apply command&lt;/a&gt; is that the &lt;em&gt;git am&lt;/em&gt; command will apply the commits and the &lt;em&gt;git apply&lt;/em&gt; will only apply changes to the file instead of committing all though this is not the only difference.&lt;/p&gt;

&lt;h4 id=&#34;git-apply-command&#34;&gt;git apply command&lt;/h4&gt;

&lt;p&gt;There are some advantages to using the &lt;em&gt;git apply&lt;/em&gt; command because we can check whether a patch file is okay and we can reverse a git apply change as well.&lt;/p&gt;

&lt;p&gt;In the following session we will create a file change and use the &lt;em&gt;git diff&lt;/em&gt; command to generate our patch file, then we will checkout back to master branch and try to apply local changes but first check the patch file for validity.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-diff-apply-check-flow.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in this session that the &lt;em&gt;&amp;ndash;check&lt;/em&gt; flag complained since we were trying to apply changes that already existed but were never committed into the branch. This flow is useful to do before applying a patch change.&lt;/p&gt;

&lt;h4 id=&#34;using-git-diff-command-and-patch-command-to-apply-changes&#34;&gt;using git diff command and patch command to apply changes&lt;/h4&gt;

&lt;p&gt;We can create a new file based off of an original file like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp docs/mongodb_indexes_partII.md docs/mongodb_indexes_partII_new.md

&lt;span style=&#34;color:#75715e&#34;&gt;## Then we will generate the diff between these 2 files.&lt;/span&gt;
diff -u docs/mongodb_indexes_partII.md docs/mongodb_indexes_partII_new.md &amp;gt; ../patches/nosql-workshop/diff-between-two-files.patch

&lt;span style=&#34;color:#75715e&#34;&gt;# Next we will create patch to the old file like this&lt;/span&gt;
patch docs/mongodb_indexes_partII.md ../patches/nosql-workshop/diff-between-two-files.patch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that we applied the changes that we made to new file to the old file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are some distinct disadvantages to using the patch commmand and it is generally better to use the git apply command in git instead.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using the patch command can leave your working directory in a bad state in a bad patch and also the &lt;em&gt;git apply&lt;/em&gt; command handles file adds, deletes, and renames if they&amp;rsquo;re described in the git diff format.&lt;/p&gt;

&lt;p&gt;If you like this post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt; for more related type posts.&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging Rust With Lldb</title>
      <link>https://www.marcelbelmont.com/post/debugging-rust-with-lldb/</link>
      <pubDate>Tue, 26 Mar 2019 19:25:45 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/debugging-rust-with-lldb/</guid>
      <description>

&lt;p&gt;In this blog post I go over using lldb with rust and how get setup with lldb on Mac OS X.&lt;/p&gt;

&lt;h2 id=&#34;installing-lldb&#34;&gt;Installing lldb&lt;/h2&gt;

&lt;p&gt;Read the official guide link on installing &lt;a href=&#34;https://lldb.llvm.org/download.html&#34; target=&#34;_blank&#34;&gt;lldb&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have a Mac then you should already have lldb installed.&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/rust-lldb-version.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that lldb reports the version of lldb and the version of swift.&lt;/p&gt;

&lt;h2 id=&#34;various-ways-of-running-summation-program&#34;&gt;Various ways of Running Summation Program&lt;/h2&gt;

&lt;p&gt;Let us look at a simple command line rust program that computes the summation provided as input.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::env;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; args: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; env::args().collect();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;args[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;..];

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numbers: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numbers
        .iter()
        .map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;num&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; num.parse().unwrap())
        .collect();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; summation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; summation_with_fold(numbers.clone());

    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;summation_with_fold is {}&amp;#34;&lt;/span&gt;, summation);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; summation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; summation_with_loop(numbers.clone());

    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;summation_with_loop is {}&amp;#34;&lt;/span&gt;, summation);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;summation_with_loop&lt;/span&gt;(numbers: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; numbers.iter() {
        sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; num;
    }
    sum
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;summation_with_fold&lt;/span&gt;(numbers: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numbers
        .iter()
        .fold(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;sum, val&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; val);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can run this program using the rust playground but we cannot supply argument like we can in a shell session:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/rust-playground.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can run this program using cargo run like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cargo-run.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can also run our program by using the compiled binary executable like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/target-debug-run.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;running-summation-program-with-lldb&#34;&gt;Running summation program with lldb&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We can run our rust program with the rust-lldb executable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is the rust lldb bash script that gets invoked:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Exit if anything fails&lt;/span&gt;
set -e

&lt;span style=&#34;color:#75715e&#34;&gt;# Find out where to look for the pretty printer Python module&lt;/span&gt;
RUSTC_SYSROOT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;rustc --print sysroot&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Find the host triple so we can find lldb in rustlib.&lt;/span&gt;
host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;rustc -vV | sed -n -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^host: //p&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;

lldb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lldb
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$RUSTC_SYSROOT&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/rustlib/&lt;/span&gt;$host&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/lldb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    lldb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$RUSTC_SYSROOT&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/rustlib/&lt;/span&gt;$host&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/lldb&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    LLDB_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$lldb&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; --version &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&amp;gt;/dev/null | head -1 | cut -d. -f1&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$LLDB_VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lldb-350&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;***&amp;#34;&lt;/span&gt;
	echo &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARNING: This version of LLDB has known issues with Rust and cannot \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;display the contents of local variables!&amp;#34;&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;***&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Prepare commands that will be loaded before any file on the command line has been loaded&lt;/span&gt;
script_import&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;command script import \&amp;#34;&lt;/span&gt;$RUSTC_SYSROOT&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/rustlib/etc/lldb_rust_formatters.py\&amp;#34;&amp;#34;&lt;/span&gt;
category_definition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type summary add --no-value --python-function lldb_rust_formatters.print_val -x \&amp;#34;.*\&amp;#34; --category Rust&amp;#34;&lt;/span&gt;
category_enable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type category enable Rust&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Call LLDB with the commands added to the argument list&lt;/span&gt;
exec &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$lldb&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; --one-line-before-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$script_import&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --one-line-before-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$category_definition&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --one-line-before-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$category_enable&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you install rust this bash script gets bundled with cargo:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/rust-lldb-path.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Not let us run our summation binary executable using rust-lldb like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/rust-lldb-first-run.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us simply run summation with no arguments:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/lldb-run-no-args.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we get 0 since we didn&amp;rsquo;t provide any arguments.&lt;/p&gt;

&lt;p&gt;Let us re run again no pun intended with args now!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/run-with-args.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us run the help on the b command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/help-break-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now let us set a breakpoint in lldb on line 8 and 13:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/setting-breakpoints-lldb.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that we did it the long and then the short way in lldb.&lt;/p&gt;

&lt;p&gt;We can list the breakpoints in lldb like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/list-breakpoints-lldb.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now let us rerun the main.rs file and notice that the breakpoint is hit on line 8 now!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/hit-breakpoint-lldb.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us continue to the next breakpoint typing the c command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/continue-with-lldb.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us step into the summation_with_fold function now using lldb using a couple of commands:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/thread-step-into.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can dynamically change the value of a variable in the summation_with_fold function like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/dyn-expr-keyword.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can look at the value of the variable now like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/print-vars.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;The po command stands for print object, p stands for print and frame variable is the current stack frame!&lt;/p&gt;

&lt;p&gt;Next let us step out of the summation_with_fold function now.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/step-out-stack.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us continue and see the current values:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/current-vars-value.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice how the summation_with_fold has the value 53 that we set dynamically.&lt;/p&gt;

&lt;p&gt;We can unset our breakpoints like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/delete-breakpoint.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;using-help-in-lldb&#34;&gt;Using help in lldb&lt;/h2&gt;

&lt;p&gt;You can find about the available command in lldb by running help:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/lldb-debugger-help.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You can also get help on each particular command by running help like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;help subcommand&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/lldb-help-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Some commands have subcommands like the breakpoint command which you can get help on:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/lldb-subcommand-help.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Some commands have aliases that you can run like b for breakpoint and more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A great feature of the lldb debugger is that there is autocomplete that you can invoke by simply pressing the tab character&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All in all I would say rust-lldb is a great addition to debugging rust programs.&lt;/p&gt;

&lt;p&gt;There is a whole more you can do with lldb and please read the official &lt;a href=&#34;https://lldb.llvm.org/tutorial.html&#34; target=&#34;_blank&#34;&gt;lldb documentation for more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Rust Commandline Applications</title>
      <link>https://www.marcelbelmont.com/talk/writing-rust-commandline-apps/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/talk/writing-rust-commandline-apps/</guid>
      <description>&lt;p&gt;A talk centered on writing command line applications in Rustlang. I showcased how to write unit tests in Rust. I showed to write different types of command line applications and how to debug them using rust-lldb and more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With Mongodb Part 2</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb-part2/</link>
      <pubDate>Wed, 20 Feb 2019 18:38:15 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb-part2/</guid>
      <description>

&lt;p&gt;In this second blog post I go over how to loads scripts in the mongo shell and how to automate tasks in mongo shell&lt;/p&gt;

&lt;h2 id=&#34;loading-scripts-in-the-mongo-shell&#34;&gt;Loading scripts in the Mongo Shell&lt;/h2&gt;

&lt;p&gt;You can load scripts in the mongo shell as long as the mongo shell knows the path.&lt;/p&gt;

&lt;p&gt;Let us get mongodb running with the following bash script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

docker run --name jbelmont-mongo-image-4 \
  --rm \
  -v ~/mongod_data.4.0.5:/data/db \
  -p 27017:27017 \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -d jbelmont/mongo-vim:4.0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that this is a custom docker image that I created&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-shell-prompt.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Not let us say that we wanted to write a script that shows all the numbers in the numbers collection and in particular the val field.&lt;/p&gt;

&lt;p&gt;In the mongo shell we could get it like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-script-in-shell.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now let us write a script in a javascript file to do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

db = connect(&amp;quot;localhost:27017/nosql_workshop&amp;quot;);

db.numbers.find({}).forEach(num =&amp;gt; print(num.val));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will put this script in the following path in my computer:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/Users/jean-marcelbelmont/go/src/github.com/jbelmont/nosql-workshop/scripts&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/load-scripts.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;The mongo shell needs to know the path in order to load the script. Notice that we used the native function &lt;code&gt;pwd()&lt;/code&gt; to verify the path and then we passed in the path to our script in the &lt;code&gt;load()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We can set an environment variable in our &lt;em&gt;~/.bashrc,~/.zshrc&lt;/em&gt; for our mongodb scripts like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $MONGO_SCRIPT_PATH
/Users/jean-marcelbelmont/go/src/github.com/FoodLogiQ/playground/scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can call the javascript file outside of the mongo shell like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-script-load.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice how we used the environment variable of $MONGO_SCRIPT_PATH here and then just invoked our script file.&lt;/p&gt;

&lt;p&gt;Some advantages of using the javascript file instead of the mongo shell is that the mongo shell has limits when you copy and paste large BSON objects and can explode at times.&lt;/p&gt;

&lt;p&gt;If you use your javascript file you can use all the power of ESNext JavaScript features to do CRUD Operations in MongoDB.&lt;/p&gt;

&lt;p&gt;Let us create the following script that stores 2 numbers in the numbers collection and then prints out the val field in the first number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

db = connect(&amp;quot;localhost:27017/nosql_workshop&amp;quot;);

let id1 = new ObjectId();
let id2 = new ObjectId();

let numbers = [
    {
        &amp;quot;_id&amp;quot;: id1,
        &amp;quot;val&amp;quot; : 2.1, 
        &amp;quot;description&amp;quot; : &amp;quot;Decimal&amp;quot;
    },
    {
        &amp;quot;_id&amp;quot;: id2,
        &amp;quot;val&amp;quot;: 3.1,
        &amp;quot;description&amp;quot; : &amp;quot;Decimal&amp;quot;
    }
];

db.numbers.insertMany(numbers);

let num1 = db.numbers.find({
    _id: id1
})[0].val;

print(num1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let us run the new script like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/complex-script.js&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now in the mongo shell we can look at our newest documents that we have added:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/new-numbers-in-collection.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;adding-global-configuration-with-mongorc-js&#34;&gt;Adding global configuration with ~/.mongorc.js&lt;/h2&gt;

&lt;p&gt;I have the following defined in my &lt;em&gt;~/.mongorc.js&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;DBQuery.prototype._prettyShell = true
DBQuery.prototype.unpretty = function () {
    this._prettyShell = false;
    return this;
}
currentDir = pwd()
currentDir = currentDir.split(&amp;quot;/&amp;quot;).slice(0, -1).join(&amp;quot;/&amp;quot;)
callScript = function(script_name) {
    load(`${currentDir}/playground/scripts/${script_name}`);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So from the top I have defined pretty print to be the default and have created a function called unpretty to get the regular behavior.&lt;/p&gt;

&lt;p&gt;Notice that we can define functions in JavaScript and we can use ESNext Features in JavaScript.&lt;/p&gt;

&lt;p&gt;I created a custom function called callScript that calls the load script function but takes an argument for the script name and looks at your current shell path.&lt;/p&gt;

&lt;p&gt;Looks like at a live example using the callScript command and a new JavaScript file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

let ids = [];
for (let i = 0; i &amp;lt; 10; i++) {
    let objectId = new objectId()
    ids.push({
        _id: objectId
    });
}
printjson(ids);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create an array of objects with ObjectIds in the mongo shell.&lt;/p&gt;

&lt;p&gt;Here is an example session in the mongo shell:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/array-of-objectids.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we called the javascript file without passing a path because we have defined the script path location in the callScript function definition already.&lt;/p&gt;

&lt;p&gt;There is a lot more you can do with scripts if you use your imagination :)&lt;/p&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With Bash and Zsh</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-bash/</link>
      <pubDate>Sat, 16 Feb 2019 10:59:02 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-bash/</guid>
      <description>

&lt;p&gt;In this blog post I go over some tips and tricks with bash and cover some of the newer features in bash such as associative arrays which are available in Bash 4.&lt;/p&gt;

&lt;h2 id=&#34;using-bash-history-features&#34;&gt;Using Bash History features&lt;/h2&gt;

&lt;p&gt;A lot of people know about hitting the up and down keys in their keyboard to access history but you can also utilize the &lt;code&gt;!!&lt;/code&gt; operator to access history in bash.&lt;/p&gt;

&lt;p&gt;Say that we run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can run &lt;code&gt;sudo !!&lt;/code&gt; to execute the previous command.&lt;/p&gt;

&lt;p&gt;Here is a shell session of this in action:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/history-bang.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Notice that in the screenshot above the command that was executed was printed first in the terminal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is a more advanced example of the power of history substitution:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/history-substution-advanced.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we created 4 files file1.txt to file4.txt&lt;/p&gt;

&lt;p&gt;We then execute the &lt;code&gt;chmod&lt;/code&gt; command and reuse the 2nd to last command.&lt;/p&gt;

&lt;p&gt;The command: &lt;code&gt;chmod +x !touch$&lt;/code&gt; searches in shell history for the touch command which brings in the latest &lt;em&gt;touch&lt;/em&gt; command and then we use the last arguments in that command in this history substition.&lt;/p&gt;

&lt;p&gt;You can search the shell history by typing in &lt;code&gt;control + r&lt;/code&gt; in your terminal:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/reverse-search.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You can cycle through history individually by pressing &lt;code&gt;control + p&lt;/code&gt; for previous and then press &lt;code&gt;control + n&lt;/code&gt; for the next history item.&lt;/p&gt;

&lt;p&gt;You can also set your CDPATH variable in your .zshrc so that you can just &lt;em&gt;cd&lt;/em&gt; into frequent directories:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cdpath.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Here is an example of jumping into a directory from the CDPATH:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cdpath-example.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice in the screenshot above that we went from the home directory &lt;code&gt;~&lt;/code&gt; or &lt;code&gt;/Users/jean-marcelbelmont&lt;/code&gt; directly into the directory &lt;code&gt;/Users/jean-marcelbelmont/go/src/github.com/jbelmont/nosql-workshop&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;process-substitution&#34;&gt;Process Substitution&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In computing, process substitution is a form of inter-process communication that allows the input or output of a command to appear as a file. The command is substituted in-line, where a file name would normally occur, by the command shell. This allows programs that normally only accept files to directly read from or write to another program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is extremely useful with commands like &lt;em&gt;uniq&lt;/em&gt;, &lt;em&gt;sort&lt;/em&gt; that can take 2 arguments.&lt;/p&gt;

&lt;p&gt;Let us look at an example of this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/command-process-substitution.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in the screenshot above that we created 2 files: file1, file2&lt;/p&gt;

&lt;p&gt;We used command process substitution and ran sort in file1 and file2 and then passed that as standard input into the uniq command which printed out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;four&lt;/li&gt;
&lt;li&gt;one&lt;/li&gt;
&lt;li&gt;three&lt;/li&gt;
&lt;li&gt;two&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in sorted order and removed the duplicates in each file.&lt;/p&gt;

&lt;h2 id=&#34;associative-arrays-in-bash-and-zsh&#34;&gt;Associative arrays in bash and zsh&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Arrays.html&#34; target=&#34;_blank&#34;&gt;Associative arrays in bash&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bash provides one-dimensional indexed and associative array variables. Any variable may be used as an indexed array; the declare builtin will explicitly declare an array. There is no maximum limit on the size of an array, nor any requirement that members be indexed or assigned contiguously. Indexed arrays are referenced using integers (including arithmetic expressions and are zero-based; associative arrays use arbitrary strings. Unless otherwise noted, indexed array indices must be non-negative integers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us look at an example:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/associative-arrays.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice in the screenshot above that we use the declare keyword:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Declare variables and give them attributes.  If no NAMEs are given, display the attributes and values of all variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;-A    to make NAMEs associative arrays (if supported)*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We then access the associative array with the syntax like this:&lt;/p&gt;

&lt;p&gt;echo ${MY_MAP[KEY]} which prints out ONE in our case&lt;/p&gt;

&lt;p&gt;Let us look at a more advanced example of using associative arrays:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;#! /usr/local/bin/zsh

declare -A TEXT_INSIDE_PARENS_LIST

TEXT_INSIDE_PARENS=$(pbpaste | sed &#39;s/ /_/g&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)
TEXT_TITLECASE=$(echo $TEXT_INSIDE_PARENS | gsed &#39;s/.*/\L&amp;amp;/;s/[a-z]*/\u&amp;amp;/g;s/_/ /g&#39;)

COUNTER=0
for brackets in $TEXT_TITLECASE[@]
do
  TEXT_INSIDE_PARENS_LIST[$COUNTER]=$(echo $brackets | sed &#39;s/ /_/g&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39; | tr -d &#39;\n&#39;)
  printf &amp;quot;[%s](%s)\n&amp;quot; $brackets ${TEXT_INSIDE_PARENS_LIST[$COUNTER]}
  COUNTER=$(($COUNTER+1))
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create 2 lists and use an associative arrays that get a key in each loop of this script.&lt;/p&gt;

&lt;p&gt;We can write a more concise solution using IFS which is the internal field separator and using readarray.&lt;/p&gt;

&lt;p&gt;readarray: Read lines from a file into an array variable.&lt;/p&gt;

&lt;p&gt;We can also use here string.&lt;/p&gt;

&lt;p&gt;Here is a more concise example using bash 4:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /usr/local/bin/bash

IFS=$&#39;\n&#39;
WORDS=$(pbpaste)
readarray -t y &amp;lt;&amp;lt;&amp;lt; &amp;quot;$WORDS&amp;quot;

for word in $WORDS
do
  TEXT_INSIDE_PARENS=$(echo $word | sed &#39;s/ /_/g&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)
  printf &amp;quot;[%s](#%s)\n&amp;quot; $word $TEXT_INSIDE_PARENS
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the script above we put the system clipboard contents from pbpaste into the WORDS variable.
We then use the readarray builtin and here strings to create an array bash variable.
We then loop over words and create a running TEXT_INSIDE_PARENS variable and use the printf command.&lt;/p&gt;

&lt;p&gt;If you like this blog post you can read more about unix programming in my free gitbook &lt;a href=&#34;https://www.marcelbelmont.com/unix-programming-and-regular-expressions-workshop/&#34; target=&#34;_blank&#34;&gt;Unix Programming and Regular Expressions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With Mongodb</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb/</link>
      <pubDate>Sat, 12 Jan 2019 16:46:47 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb/</guid>
      <description>

&lt;p&gt;In this blog post I go over some tips and tricks with MongoDB and focus on using the mongodbshell.&lt;/p&gt;

&lt;h1 id=&#34;what-is-mongodb&#34;&gt;What is MongoDB&lt;/h1&gt;

&lt;p&gt;MongoDB is a document database with the scalability and flexibility that you want with the querying and indexing that you need.&lt;/p&gt;

&lt;h2 id=&#34;installing-mongodb&#34;&gt;Installing MongoDB&lt;/h2&gt;

&lt;p&gt;MongoDB is released as two editions: Community and Enterprise.&lt;/p&gt;

&lt;p&gt;Community is the open source release of MongoDB.&lt;/p&gt;

&lt;p&gt;Enterprise provides additional administration, authentication, and monitoring features.&lt;/p&gt;

&lt;p&gt;Installation steps vary depending on the edition; both procedures are outlined in this section.&lt;/p&gt;

&lt;p&gt;Follow the &lt;a href=&#34;https://docs.mongodb.com/manual/installation/&#34; target=&#34;_blank&#34;&gt;Instructions to Download MongoDB per Platform&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;starting-interactive-mongodb-session&#34;&gt;Starting interactive mongodb session&lt;/h4&gt;

&lt;p&gt;Once you have installed mongodb you need to make sure that is running and then you can simply type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then get into an interactive mongo shell session:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-interactive-shell.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;pretty-print-trick-for-mongodb&#34;&gt;Pretty Print trick for mongodb&lt;/h4&gt;

&lt;p&gt;You can set global settings in mongodb interactive shell in the &lt;em&gt;$SHELL/.mongorc.js&lt;/em&gt; configuration file.&lt;/p&gt;

&lt;p&gt;In mongodb shell if you want to pretty print collections you need to use the pretty() function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; db.heroes.find({}).pretty()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we set the following values in our &lt;em&gt;~/.mongorc.js&lt;/em&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-pretty-print.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now with this new setting we can simply query for documents and get pretty printing by default:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/pretty-print-by-default.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we did not specify the &lt;code&gt;.pretty()&lt;/code&gt; function and got pretty print behavior by default.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/using-unpretty-function.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;setting-default-number-of-documents-printed-to-standard-output&#34;&gt;Setting default number of documents printed to standard output&lt;/h4&gt;

&lt;p&gt;You can set the number of documents to show at a time with the following setting in *$HOME/.mongorc.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;DBQuery.shellBatchSize = 25
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;set-the-settings-for-a-mongodb-server-with-the-following-command&#34;&gt;Set the settings for a mongodb server with the following command:&lt;/h4&gt;

&lt;p&gt;You can see the setting for the mongodb server with this command in the interactive shell:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongodb-admin-server-settings.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-interactive-mongodb-session-full-javascript-console&#34;&gt;Using interactive mongodb session full javascript console&lt;/h4&gt;

&lt;p&gt;Remember that the mongodb interactive shell is full blown javascript repl:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongodb-interactive-repl.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongodb-interactive-repl2.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Notice here that we were able to use the map javascript function in the mongodb shell session.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;extending-prototype-functions-in-javascript-available-in-mongo-shell&#34;&gt;Extending prototype functions in JavaScript available in mongo shell&lt;/h4&gt;

&lt;p&gt;You can easily extend the available functions in mongo shell by adding them on &lt;em&gt;~/.mongorc.js&lt;/em&gt; configuration file:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/adding-prototype-functions-mongoshell.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now you can easily use this new function in a new mongo shell session like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/list-proto-length.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-mongostat&#34;&gt;Using mongostat&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/reference/program/mongostat/&#34; target=&#34;_blank&#34;&gt;mongostat docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The mongostat utility provides a quick overview of the status of a currently running mongod or mongos instance.&lt;/p&gt;

&lt;p&gt;mongostat is functionally similar to the UNIX/Linux file system utility vmstat, but provides data regarding mongod and mongos instances.&lt;/p&gt;

&lt;h4 id=&#34;finding-the-timestamp-for-when-a-particular-document-was-added&#34;&gt;Finding the timestamp for when a particular document was added&lt;/h4&gt;

&lt;p&gt;You can run the &lt;code&gt;ObjectId(&amp;quot;&amp;quot;).getTimestamp()&lt;/code&gt; to get the timestamp for the added mongo document&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-shell-timestamp-function.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-esnext-features-in-mongo-shell-session&#34;&gt;Using ESNext features in mongo shell session&lt;/h4&gt;

&lt;p&gt;You can use all the esnext features in JavaScript in the MongoShell session like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-shell-esnext-js.png&#34;/&gt; 
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Introduction to Reverse Engineering</title>
      <link>https://www.marcelbelmont.com/post/introduction-to-reverse-engineering/</link>
      <pubDate>Wed, 19 Dec 2018 20:37:56 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/introduction-to-reverse-engineering/</guid>
      <description>

&lt;h1 id=&#34;reverse-engineering&#34;&gt;Reverse Engineering&lt;/h1&gt;

&lt;p&gt;What is Reverse Engineering?&lt;/p&gt;

&lt;p&gt;According to Wikipedia Reverse Engineering is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;is the process by which a man-made object is deconstructed to reveal its designs, architecture, or to extract knowledge from the object; similar to scientific research, the only difference being that scientific research is about a natural phenomenon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the c2Wiki Reverse Engineering is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;is about presenting a piece of software at a higher level of abstraction. It can be based on sources or on binaries:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;why-embark-on-reverse-engineering-at-all&#34;&gt;Why embark on Reverse Engineering at all?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/Introduction_to_Software_Engineering/Reengineering/Reverse_Engineering&#34; target=&#34;_blank&#34;&gt;Reverse Engineering Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reasons for reverse engineering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Interoperability.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lost documentation: Reverse engineering often is done because the documentation of a particular device has been lost (or was never written), and the person who built it is no longer available.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integrated circuits often seem to have been designed on obsolete, proprietary systems, which means that the only way to incorporate the functionality into new technology is to reverse-engineer the existing chip and then re-design it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Product analysis. To examine how a product works, what components it consists of, estimate costs, and identify potential patent infringement.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Digital update/correction. To update the digital version (e.g. CAD model) of an object to match an &amp;ldquo;as-built&amp;rdquo; condition.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Security auditing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Acquiring sensitive data by disassembling and analysing the design of a system component.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Military or commercial espionage. Learning about an enemy&amp;rsquo;s or competitor&amp;rsquo;s latest research by stealing or capturing a prototype and dismantling it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Removal of copy protection, circumvention of access restrictions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Creation of unlicensed/unapproved duplicates.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Materials harvesting, sorting, or scrapping.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Academic/learning purposes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curiosity.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Competitive technical intelligence (understand what your competitor is actually doing versus what they say they are doing).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Learning: learn from others&amp;rsquo; mistakes. Do not make the same mistakes that others have already made and subsequently corrected.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;As you can see some of the reasons of reverse engineering can be nefarious but my intent for this blog post is for my personal curiosity and learning only&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;list-of-reverse-engineering-tools&#34;&gt;List of Reverse Engineering Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ibotpeaches.github.io/Apktool/&#34; target=&#34;_blank&#34;&gt;Apktool&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild them after making some modifications. It also makes working with an app easier because of the project like file structure and automation of some repetitive tasks like building apk, etc.&lt;/li&gt;
&lt;li&gt;It is NOT intended for piracy and other non-legal uses. It could be used for localizing, adding some features or support for custom platforms, analyzing applications and much more.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/pxb1988/dex2jar&#34; target=&#34;_blank&#34;&gt;dex2jar&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dex2jar is a tool for converting Android&amp;rsquo;s .dex format to Java&amp;rsquo;s .class format. just one binary format to another binary format, not to source.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://clang.llvm.org/&#34; target=&#34;_blank&#34;&gt;Clang LLVM Compiler&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Clang project provides a language front-end and tooling infrastructure for languages in the C language family (C, C++, Objective C/C++, OpenCL, CUDA, and RenderScript) for the LLVM project. Both a GCC-compatible compiler driver (clang) and an MSVC-compatible compiler driver (clang-cl.exe are provided.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eteran/edb-debugger&#34; target=&#34;_blank&#34;&gt;edb (evans debugger)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;edb is a cross platform AArch32/x86/x86-64 debugger. It was inspired by Ollydbg, but aims to function on AArch32, x86, and x86-64 as well as multiple OS&amp;rsquo;s. Linux is the only officially supported platform at the moment, but FreeBSD, OpenBSD, OSX and Windows ports are underway with varying degrees of functionality.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/gdabah/distorm/&#34; target=&#34;_blank&#34;&gt;distorm3&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;diStorm3 is really a decomposer, which means it takes an instruction and returns a binary structure which describes it rather than static text, which is great for advanced binary code analysis.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://flasm.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;flasm&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flasm disassembles your entire SWF including all the timelines and events. Looking at disassembly, you learn how the Flash compiler works, which improves your ActionScript skills. You can also do some optimizations on the disassembled code by hand or adjust the code as you wish. Flasm then applies your changes to the original SWF, replacing original actions.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.javadecompilers.com/jad&#34; target=&#34;_blank&#34;&gt;jad decompiler&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jad is a command line program that decompiles java code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tools.kali.org/reverse-engineering/javasnoop&#34; target=&#34;_blank&#34;&gt;javasnoop&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;javasnoop is a tool created by aspect security that allows you to attach to an existing process (like a debugger) and instantly begin tampering with method calls, run custom code, or just watch what’s happening on the system.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ollydbg.de/&#34; target=&#34;_blank&#34;&gt;ollydbg&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OllyDbg is a 32-bit assembler level analysing debugger for Microsoft Windows. Emphasis on binary code analysis makes it particularly useful in cases where source is unavailable. OllyDbg is a shareware, but you can download and use it for free.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.nasm.us/xdoc/2.14/html/nasmdoc1.html&#34; target=&#34;_blank&#34;&gt;nasm&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Netwide Assembler, NASM, is an 80x86 and x86-64 assembler designed for portability and modularity. It supports a range of object file formats, including Linux and *BSD a.out, ELF, COFF, Mach-O, 16-bit and 32-bit OBJ (OMF) format, Win32 and Win64. It will also output plain binary files, Intel hex and Motorola S-Record formats. Its syntax is designed to be simple and easy to understand, similar to the syntax in the Intel Software Developer Manual with minimal complexity. It supports all currently known x86 architectural extensions, and has strong support for macros.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.valgrind.org/&#34; target=&#34;_blank&#34;&gt;Valgrind&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Valgrind is an instrumentation framework for building dynamic analysis tools. There are Valgrind tools that can automatically detect many memory management and threading bugs, and profile your programs in detail. You can also use Valgrind to build new tools.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/radare/radare2&#34; target=&#34;_blank&#34;&gt;radare2&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Radare2 (also known as r2) is a complete framework for reverse-engineering and analyzing binaries; composed of a set of small utilities that can be used together or independently from the command line. Built around a disassembler for computer software which generates assembly language source code from machine-executable code, it supports a variety of executable formats for different processors and operating systems.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;basic-unix-tools-to-inspect-binary-executables&#34;&gt;Basic Unix Tools to inspect binary executables&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;strings - print the strings of printable characters in files.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is mainly used to look at printable characters in a binary executable&lt;/p&gt;

&lt;p&gt;Let us say that we have the following hello world file written in c&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(){
	printf(&amp;quot;Hello, world!\n&amp;quot;);

	exit(0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let us say that we generate a binary executable with gcc like this: &lt;code&gt;gcc -o hello.c hello&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We could use the strings command to print out the contents of it&lt;/p&gt;

&lt;p&gt;In the screenshot below we print out the contents of the binary executable with strings&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/strings.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can use the &lt;em&gt;objdump&lt;/em&gt; command to explore: &lt;em&gt;objdump - display information from object files.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;objdump displays information about one or more object files.&lt;/p&gt;

&lt;p&gt;The options control what particular information to display.&lt;/p&gt;

&lt;p&gt;This information is mostly useful to programmers who are working on the compilation tools, as opposed to programmers who just want their program to compile and work.&lt;/p&gt;

&lt;p&gt;Notice in this screenshot we got an object dump using intel and we are looking for the main method here&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/objdump.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Next we can use the &lt;em&gt;xxd&lt;/em&gt; command to look at that particular address printed in the screen:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;xxd - make a hexdump or do the reverse.&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/xxd.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In this screenshot we got the hexdump of the address space that corresponds with the objdump information from the previous screenshot.&lt;/p&gt;

&lt;h2 id=&#34;kali-linux-tools-for-reverse-engineering-penetration-testing-and-more&#34;&gt;Kali Linux Tools for Reverse Engineering, Penetration Testing and More&lt;/h2&gt;

&lt;p&gt;You can use many of the tools I listed earlier in the blog post in the Kali Linux Operating System.&lt;/p&gt;

&lt;p&gt;Kali Linux is a Debian-derived Linux distribution designed for digital forensics and penetration testing.&lt;/p&gt;

&lt;p&gt;You can download &lt;a href=&#34;https://www.kali.org/downloads/&#34; target=&#34;_blank&#34;&gt;Kali Linux Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-quick-look-at-radare-for-reverse-engineering&#34;&gt;A quick look at Radare for reverse engineering&lt;/h2&gt;

&lt;p&gt;Now recall that earlier we had compiled a simple hello world program written and c and compiled it using the gcc compiler.&lt;/p&gt;

&lt;p&gt;Using [radare2] we can look at the compiled executable and look at the opcodes and assembly code.&lt;/p&gt;

&lt;p&gt;We can look at the main function using radare.&lt;/p&gt;

&lt;p&gt;In a terminal session let us look at which teletype (tty) to help radare hook into the proper shell session.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/tty.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Next let us keep the tty session a long time by using the sleep command like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/sleep.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can create a target script with a &lt;code&gt;.rr2&lt;/code&gt; file extension which will run in radare2 at startup time&lt;/p&gt;

&lt;p&gt;&lt;em&gt;hello.rr2&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/usr/bin/env radare2
program=hello
stdio=/dev/pts/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have a configuration setup let us start using radare2. The actual command is &lt;code&gt;r2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot below we start the hello world binary executable:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/r2-initate.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can enter &lt;code&gt;aaa&lt;/code&gt; into the radare2 session to have radare2 analyze the binary executable.&lt;/p&gt;

&lt;p&gt;Here is the information printed by radare2:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/aaa.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now radare also has a lot of Vim mappings so if you enter the &lt;em&gt;V&lt;/em&gt; command and press enter you get into Visual Mode which looks like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-r2.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now this mode can be confusing so enter the command &lt;code&gt;?&lt;/code&gt; to see all the available commands while in visual mode:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-help.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You can change how the visual mode show information by cycling through with the p command which can have the following modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hex&lt;/li&gt;
&lt;li&gt;disasm&lt;/li&gt;
&lt;li&gt;debug&lt;/li&gt;
&lt;li&gt;words&lt;/li&gt;
&lt;li&gt;buf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like the debug mode in radare which looks like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-debug.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now in order to enter a command in visual mode press &lt;code&gt;:&lt;/code&gt; key in your keyboard&lt;/p&gt;

&lt;p&gt;You should see a screen like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-main.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now notice that we hit a breakpoint in radare&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-breakpoint.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;There are many more feature and options in Radare which you can read at in the official &lt;a href=&#34;https://radare.gitbooks.io/radare2book/&#34; target=&#34;_blank&#34;&gt;Radare2 Gitbook&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-find-me&#34;&gt;How to find me&lt;/h2&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started With Latex</title>
      <link>https://www.marcelbelmont.com/post/getting-started-with-latex/</link>
      <pubDate>Sun, 11 Nov 2018 21:26:43 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/getting-started-with-latex/</guid>
      <description>

&lt;p&gt;LaTex is a Typesetting system which was designed by &lt;a href=&#34;https://en.wikipedia.org/wiki/Leslie_Lamport&#34; target=&#34;_blank&#34;&gt;Leslie Lamport&lt;/a&gt; and derives much of its power from &lt;a href=&#34;https://en.wikipedia.org/wiki/TeX&#34; target=&#34;_blank&#34;&gt;Tex&lt;/a&gt;. It can be argued that LaTex is a set of macros.&lt;/p&gt;

&lt;h2 id=&#34;difference-between-tex-and-latex&#34;&gt;Difference between Tex and LaTex&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;TeX is about formatting with document/template designers in mind while LaTeX is all about  the content for document writers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Please read this &lt;a href=&#34;https://tex.stackexchange.com/questions/49/what-is-the-difference-between-tex-and-latex&#34; target=&#34;_blank&#34;&gt;stackexchange post for more details&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-is-latex-useful&#34;&gt;Why is LaTex useful?&lt;/h2&gt;

&lt;p&gt;You can more fine grain control of the quality of your document by using LaTex.&lt;/p&gt;

&lt;p&gt;Particularly if you are writing documents heavy in Mathematics, Science and Research Papers.&lt;/p&gt;

&lt;p&gt;Also LaTex lets you separate out the content of your writing from the layout of your document.&lt;/p&gt;

&lt;p&gt;LaTex lets you focus on the &amp;ldquo;what&amp;rdquo; of what you are writing and not &amp;ldquo;how&amp;rdquo; the final document will look.&lt;/p&gt;

&lt;h2 id=&#34;installing-latex-in-mac-os-x&#34;&gt;Installing LaTex in Mac OS X&lt;/h2&gt;

&lt;p&gt;You can install LaTex in Mac OS X easily by going to &lt;a href=&#34;http://www.tug.org/mactex/&#34; target=&#34;_blank&#34;&gt;MacTex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will get all the LaTex macros, compilers, editors and more in this full blown LaTex working environment.&lt;/p&gt;

&lt;h2 id=&#34;installing-latext-in-windows&#34;&gt;Installing LaText in Windows&lt;/h2&gt;

&lt;p&gt;You can install LaTex in Windows by going to &lt;a href=&#34;https://miktex.org/download&#34; target=&#34;_blank&#34;&gt;MikTex&lt;/a&gt; and to &lt;a href=&#34;http://www.tug.org/texlive/acquire-netinstall.html&#34; target=&#34;_blank&#34;&gt;Tex Live&lt;/a&gt;. It is best to install the full LaTex distribution.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax-of-a-latex-document&#34;&gt;Basic syntax of a LaTex Document&lt;/h2&gt;

&lt;p&gt;Here is a simple LaTex Document:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;helloWorld.tex&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{article}

\begin{document}
Hello world!
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You begin a LaTex document with &lt;code&gt;\documentclass&lt;/code&gt; command and then you use &lt;code&gt;\begin{document}&lt;/code&gt; command to start.&lt;/p&gt;

&lt;p&gt;Notice that here we placed &lt;em&gt;Hello, world!&lt;/em&gt; in between &lt;code&gt;\begin{document}&lt;/code&gt; and &lt;code&gt;\end{document}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;compile-latex-documents-with-latexmk-command&#34;&gt;Compile LaTex Documents with latexmk command&lt;/h2&gt;

&lt;p&gt;We can compile our latex document with this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;latexmk -pdf helloWorld.tex&lt;/code&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/latex-helloworld.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Here is the generated pdf with this command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/latex-helloworld-pdf.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;compile-latex-documents-with-latex-command&#34;&gt;Compile LaTex Documents with latex command&lt;/h2&gt;

&lt;p&gt;Let us look at another Tex document with tables now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{article} 
\usepackage[english]{babel}

\begin{document}

Without specifying width for last column:
\begin{center}
    \begin{tabular}{| l | l | l | l |}
    \hline
    Day &amp;amp; Min Temp &amp;amp; Max Temp &amp;amp; Summary \\ \hline
    Monday &amp;amp; 11C &amp;amp; 22C &amp;amp; A clear day with lots of sunshine.
    However, the strong breeze will bring down the temperatures. \\ \hline
    Tuesday &amp;amp; 9C &amp;amp; 19C &amp;amp; Cloudy with rain, across many northern regions. Clear spells 
    across most of Scotland and Northern Ireland, 
    but rain reaching the far northwest. \\ \hline
    Wednesday &amp;amp; 10C &amp;amp; 21C &amp;amp; Rain will still linger for the morning. 
    Conditions will improve by early afternoon and continue 
    throughout the evening. \\
    \hline
    \end{tabular}
\end{center}

With width specified:
\begin{center}
    \begin{tabular}{ | l | l | l | p{5cm} |}
    \hline
    Day &amp;amp; Min Temp &amp;amp; Max Temp &amp;amp; Summary \\ \hline
    Monday &amp;amp; 11C &amp;amp; 22C &amp;amp; A clear day with lots of sunshine.  
    However, the strong breeze will bring down the temperatures. \\ \hline
    Tuesday &amp;amp; 9C &amp;amp; 19C &amp;amp; Cloudy with rain, across many northern regions. Clear spells 
    across most of Scotland and Northern Ireland, 
    but rain reaching the far northwest. \\ \hline
    Wednesday &amp;amp; 10C &amp;amp; 21C &amp;amp; Rain will still linger for the morning. 
    Conditions will improve by early afternoon and continue 
    throughout the evening. \\
    \hline
    \end{tabular}
\end{center}

\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can compile this document with the the &lt;em&gt;latex&lt;/em&gt; command now and then use &lt;code&gt;dvipdfm&lt;/code&gt; to convert from dvi to pdf:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/convert-dvi-to-pdf.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;compile-latex-documents-with-pdflatex-command&#34;&gt;Compile LaTex documents with pdflatex command&lt;/h2&gt;

&lt;p&gt;We can compile directly into pdf with the &lt;em&gt;pdflatex&lt;/em&gt; command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/pdflatex-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;global-structure-of-latex-document&#34;&gt;Global Structure of LaTex Document&lt;/h2&gt;

&lt;p&gt;Every file should have this structure but there are exceptions to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{...}

\begin{document}
...
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The area between \documentclass{&amp;hellip;} and \begin{document} is called the preamble.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It normally contains commands that affect the entire document.&lt;/p&gt;

&lt;h4 id=&#34;document-classes&#34;&gt;Document Classes&lt;/h4&gt;

&lt;p&gt;This table has a complete list of all LaTex Document Classes:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Document Class&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;article&lt;/td&gt;
&lt;td&gt;For articles in scientific journals, presentations, short reports, program documentation, invitations, &amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IEEEtran&lt;/td&gt;
&lt;td&gt;For articles with the IEEE Transactions format.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;proc&lt;/td&gt;
&lt;td&gt;A class for proceedings based on the article class.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;report&lt;/td&gt;
&lt;td&gt;For longer reports containing several chapters, small books, thesis, &amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;book&lt;/td&gt;
&lt;td&gt;For real books.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;slides&lt;/td&gt;
&lt;td&gt;For slides. The class uses big sans serif letters.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;memoir&lt;/td&gt;
&lt;td&gt;For changing sensibly the output of the document. It is based on the book class, but you can create any kind of document with it&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;letter&lt;/td&gt;
&lt;td&gt;For writing letters.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;beamer&lt;/td&gt;
&lt;td&gt;For writing presentations (see LaTeX/Presentations).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;using-packages-in-latex&#34;&gt;Using Packages in LaTex&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Document_Structure#Packages&#34; target=&#34;_blank&#34;&gt;Packages Wiki&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While writing your document, you will probably find that there are some areas where basic LaTeX cannot solve your problem.&lt;/p&gt;

&lt;p&gt;If you want to include graphics, colored text or source code from a file into your document, you need to enhance the capabilities of LaTeX.&lt;/p&gt;

&lt;p&gt;Such enhancements are called packages. Some packages come with the LaTeX base distribution. Others are provided separately. Modern TeX distributions come with a large number of packages pre-installed. The command to use a package is pretty simple: \usepackage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is an example usage for importing packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using-sections-in-latex&#34;&gt;Using Sections in LaTex&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The commands for inserting sections are fairly intuitive. Of course, certain commands are appropriate to different document classes. For example, a book has chapters but an article doesn&amp;rsquo;t.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\chapter{Introduction}
This chapter&#39;s content...

\section{Structure}
This section&#39;s content...

\subsection{Top Matter}
This subsection&#39;s content...

\subsubsection{Article Information}
This subsubsection&#39;s content...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-started-with-travis-ci&#34;&gt;Getting started with Travis CI&lt;/h2&gt;

&lt;p&gt;If you want to get setup with Travis CI please read this blog post:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://harshjv.com/blog/setup-latex-pdf-build-using-travis-ci/&#34; target=&#34;_blank&#34;&gt;https://harshjv.com/blog/setup-latex-pdf-build-using-travis-ci/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-overall-advice-on-latex&#34;&gt;Getting overall advice on LaTex&lt;/h2&gt;

&lt;p&gt;Please read this very informative Github Repo on &lt;a href=&#34;https://github.com/dspinellis/latex-advice&#34; target=&#34;_blank&#34;&gt;LaTex&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;different-types-of-file-types-in-latex&#34;&gt;Different Types of File Types in LaTex&lt;/h2&gt;

&lt;p&gt;There are a myriad of different file types that LaTex can work with:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FileType&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.aux&lt;/td&gt;
&lt;td&gt;A file that transports information from one compiler run to the next. Among other things, the .aux file is used to store information associated with cross-references.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.bbl&lt;/td&gt;
&lt;td&gt;Bibliography file output by BiBTeX and used by LaTeX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.bib&lt;/td&gt;
&lt;td&gt;Bibliography database file. (where you can store a list of full bibliographic citations)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.blg&lt;/td&gt;
&lt;td&gt;BiBTeX log file. (errors are logged here)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.bst&lt;/td&gt;
&lt;td&gt;BiBTeX style file.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.cls&lt;/td&gt;
&lt;td&gt;Class files define what your document looks like. They are selected with the \documentclass command.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.dtx&lt;/td&gt;
&lt;td&gt;Documented TeX. This is the main distribution format for LaTeX style files. If you process a .dtx file you get documented macro code of the LaTeX package contained in the .dtx file.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.ins&lt;/td&gt;
&lt;td&gt;The installer for the files contained in the matching .dtx file. If you download a LaTeX package from the net, you will normally get a .dtx and a .ins file. Run LaTeX on the .ins file to unpack the .dtx file.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.fd&lt;/td&gt;
&lt;td&gt;Font description file telling LaTeX about new fonts.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.dvi&lt;/td&gt;
&lt;td&gt;Device Independent File. This is the main result of a LaTeX compile run with latex. You can look at its content with a DVI previewer program or you can send it to a printer with dvips or a similar application.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.pdf&lt;/td&gt;
&lt;td&gt;Portable Document Format. This is the main result of a LaTeX compile run with pdflatex. You can look at its content or print it with any PDF viewer.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.log&lt;/td&gt;
&lt;td&gt;Gives a detailed account of what happened during the last compiler run.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.toc&lt;/td&gt;
&lt;td&gt;Stores all your section headers. It gets read in for the next compiler run and is used to produce the table of contents.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.lof&lt;/td&gt;
&lt;td&gt;This is like .toc but for the list of figures.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.lot&lt;/td&gt;
&lt;td&gt;And again the same for the list of tables.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.idx&lt;/td&gt;
&lt;td&gt;If your document contains an index. LaTeX stores all the words that go into the index in this file. Process this file with makeindex.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.ind&lt;/td&gt;
&lt;td&gt;The processed .idx file, ready for inclusion into your document on the next compile cycle.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.ilg&lt;/td&gt;
&lt;td&gt;Logfile telling what makeindex did.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.sty&lt;/td&gt;
&lt;td&gt;LaTeX Macro package. This is a file you can load into your LaTeX document using the \usepackage command.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.tex&lt;/td&gt;
&lt;td&gt;LaTeX or TeX input file. It can be compiled with latex.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.out&lt;/td&gt;
&lt;td&gt;hyperref package file, just one for the master file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;read-online-latex-book&#34;&gt;Read Online LaTex Book&lt;/h2&gt;

&lt;p&gt;Please read the following &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX&#34; target=&#34;_blank&#34;&gt;LaTex Wiki Book&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;latex-workshop&#34;&gt;LaTex Workshop&lt;/h2&gt;

&lt;p&gt;I will be building a LaTex workshop that you can follow if you wish &lt;a href=&#34;https://github.com/jbelmont/latex-workshop&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-find-me&#34;&gt;How to find me&lt;/h2&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Rust Commandline Applications</title>
      <link>https://www.marcelbelmont.com/talk/building-commandline-applications-in-rust/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/talk/building-commandline-applications-in-rust/</guid>
      <description>&lt;p&gt;An All Things Open Conference Presentation on building commandline applications in Rust and Golang.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;😀Learning to build &lt;a href=&#34;https://twitter.com/hashtag/rustlang?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rustlang&lt;/a&gt; CLI applications with &lt;a href=&#34;https://twitter.com/jbelmont80?ref_src=twsrc%5Etfw&#34;&gt;@jbelmont80&lt;/a&gt; &lt;a href=&#34;https://twitter.com/AllThingsOpen?ref_src=twsrc%5Etfw&#34;&gt;@AllThingsOpen&lt;/a&gt; !! 🧠 &lt;a href=&#34;https://t.co/Nw0AIHjlPK&#34;&gt;pic.twitter.com/Nw0AIHjlPK&lt;/a&gt;&lt;/p&gt;&amp;mdash; 乃ﾑ尺刀ﾑ乃ﾑ丂 乃uﾚｱ乇ｲｲ (@_bulpett) &lt;a href=&#34;https://twitter.com/_bulpett/status/1054830077870071813?ref_src=twsrc%5Etfw&#34;&gt;October 23, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>A review of Hands On Continuous Integration and Delivery Book</title>
      <link>https://www.marcelbelmont.com/post/ci-cd-book/</link>
      <pubDate>Wed, 17 Oct 2018 19:22:45 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/ci-cd-book/</guid>
      <description>

&lt;h1 id=&#34;hands-on-continuous-integration-and-delivery&#34;&gt;Hands-On Continuous Integration and Delivery&lt;/h1&gt;

&lt;p&gt;There are several terms that are important when trying to learn about Continuous Integration and Continuous Delivery:&lt;/p&gt;

&lt;h2 id=&#34;definition-of-automation&#34;&gt;Definition of Automation&lt;/h2&gt;

&lt;p&gt;Automation is essentially any task that is completed without human interaction.
Let us say that you manually test a UI feature, if you write a script instead of manually test it than it can be said that you have automated the task.&lt;/p&gt;

&lt;h2 id=&#34;definition-of-continuous-integration&#34;&gt;Definition of Continuous Integration&lt;/h2&gt;

&lt;p&gt;Continuous Integration can be viewed as a software engineering task where source code is merged and tested in a version controlled project such as Git.&lt;/p&gt;

&lt;p&gt;Usually a Continuous Integration Build is triggered via source control management, meaning a developer pushes a commit to a version control system such as git.&lt;/p&gt;

&lt;p&gt;A Continuous Integration Build is more than just a compilation step.
It can consist of a compilation step, a testing phase, a code inspection phase, and a deployment phase.&lt;/p&gt;

&lt;p&gt;A Continuous Integration Build can act as a kind of verification step that checks that your software is working as a cohesive unit.&lt;/p&gt;

&lt;h2 id=&#34;definition-of-continuous-delivery&#34;&gt;Definition of Continuous Delivery&lt;/h2&gt;

&lt;p&gt;Continuous Delivery (CD) is the point at which you deliver a software product to your end users.&lt;/p&gt;

&lt;p&gt;A product is only useful if your intended users can actually use the product.&lt;/p&gt;

&lt;h2 id=&#34;business-impact-of-ci-cd-and-automation&#34;&gt;Business Impact of CI/CD and automation&lt;/h2&gt;

&lt;p&gt;Good CI/CD practices can fundamentally change the way an organization runs.&lt;/p&gt;

&lt;p&gt;If automation practices are effectively added on a CI/CD pipeline the quality of the software product will improve drastically.&lt;/p&gt;

&lt;p&gt;It is important to have a good set of unit tests in the first build of a CI/CD pipeline.&lt;/p&gt;

&lt;p&gt;We may add additional CI builds that serve as a full regression test suite for our software product.&lt;/p&gt;

&lt;p&gt;Later builds may incorporate Load Tests and Smoke Tests.&lt;/p&gt;

&lt;h2 id=&#34;using-jenkins-for-ci-cd&#34;&gt;Using Jenkins for CI/CD&lt;/h2&gt;

&lt;p&gt;You can use freestyle scripting in Jenkins and the new Jenkins 2.0 Pipeline Syntax along with Docker to create a more declarative CI Build System.&lt;/p&gt;

&lt;p&gt;Here is an example of a Jenkins Pipeline File:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipeline {
  agent {
    docker {
      image &#39;node:10-alpine&#39;
      args &#39;-v /Users/jean-marcelbelmont/jenkins_data&#39;
    }

  }
  stages {
    stage(&#39;Build&#39;) {
      steps {
        sh &#39;npm install&#39;
      }
    }
    stage(&#39;Cucumber Tests&#39;) {
      steps {
        sh &#39;npm run acceptance:tests&#39;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create a series of stages with the first stage creating a docker image to setup our environment.&lt;/p&gt;

&lt;p&gt;Notice that the docker block has &lt;em&gt;image&lt;/em&gt; for the docker image and &lt;em&gt;args&lt;/em&gt; for the arguments which in this case specify the location of the data mount.&lt;/p&gt;

&lt;p&gt;In the next stage of the pipeline we get our environment ready to build by issuing the command &lt;em&gt;npm install&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the last stage we run an acceptance test suite.&lt;/p&gt;

&lt;p&gt;Here is a screenshot of the Jenkins Pipeline:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/ci-cd-jenkins-pipeline.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;using-travis-ci-for-ci-cd&#34;&gt;Using Travis CI for CI/CD&lt;/h2&gt;

&lt;p&gt;Travis CI is a hosted and automated solution for CI Builds.&lt;/p&gt;

&lt;p&gt;The main difference between Travis CI and Jenkins is that Jenkins is a self managed automation solution for CI/CD. You can configure Jenkins in a fully customized manner whereas Travis CI is generally used in open source software projects.&lt;/p&gt;

&lt;p&gt;Here is a &lt;em&gt;.travis.yml&lt;/em&gt; script to show a possible CI/CD setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;language: go
services:
  - docker
go:
  - 1.9.x
os:
  - linux
sudo: false
env:
  matrix:
    - PORT=8080 ENVIRONMENT_NAME=travis
  global:
    secure: AvDa6vD77eIF3JifNegQ0cat2SS0vZpa9ami7E8LqYcnl4iJ3D47RHpR1eSkRrSwT6hJIsSG93y8Yi3WRSI3N8UkAuPs/tbr6mpaFwAHpZ0A+gxOf0Xt/SdV7xc2JEOuBjlwAoK23EXvvNyJwJxzAmg+ye5OzTv57LZu7tbWDoCT5Y1D8WD4IkDoFJUSDoG6SLwY0MWgd8YblhnpSIdWxn7H8cadJsjqhvnTkdyslx7s0rtpLsslNmBOgKu9yHdxAtxHXgBZnLHC9xLv41MDKJ1YNU6PqI/JUK4zHgWEHzXd4ZEATdDiq29WKtMIyJvcoVV8Kr8Tcm41ZuyFH6ZtzQGZOj1lyCmrI+qenMEhr7CvsPFOHpx0zZFQkjPYN9qDQAexzs5zEODMA9qjwpaaBXYm3xC7GHxLYUlXB+LpgB8bgmGIy0jax8Eyqlw8VRsmqyLBuPr5VU4W2ZV7GNYladNCLsNk/0VKWb6qdwzt4nXvCUZwbLeG8+TPIvceItxPA9MBxqdydVyfmwUB4aZSs76KJiALTxn0RcthgN+PE4RP6rcHlmsksd3/uup/LBASaK3yZH+DfFRh5VdzHGSqsYwP1Y2vxmnnWNltUfZMBW3WgPEO2sN29aMplcSFAVK8O2RNbBC2PDPRbmLzT7vrVZYKwCDQi6ywCVeS0xuv7js=
    # This creates the following global variable `COVERALLS_TOKEN`
before_install:
  - export PATH=$PATH:$HOME/gopath/bin
install:
  - make travis-install
before_script:
  - echo -e &amp;quot;Host github.com\n\tHostName github.com\n\tIdentityFile ~/.ssh/id_rsa\n&amp;quot; &amp;gt;&amp;gt; ~/.ssh/config
script:
  - make travis-script
after_success:
  - if [ -n &amp;quot;$TRAVIS_TAG&amp;quot; ]; then rm -rf ./bin; fi
  - if [ -n &amp;quot;$TRAVIS_TAG&amp;quot; ]; then curl -sL https://git.io/goreleaser | bash; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a breakdown of the travis yml script:&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;language&lt;/em&gt; field we specify the programming language which is &lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34;&gt;Golang&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;services&lt;/em&gt; field we specify the services we expect the Travis Virtual Machine to start on each CI build for us.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;go&lt;/em&gt; field we specify the go version we want to use&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;os&lt;/em&gt; field we specify the operating system we expect to use which can be mac or linux which you can read more about in &lt;a href=&#34;https://docs.travis-ci.com/user/reference/osx/&#34; target=&#34;_blank&#34;&gt;Travis Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;sudo&lt;/em&gt; field you specify the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;required

&lt;ul&gt;
&lt;li&gt;You will get a fully virtualized environment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;false

&lt;ul&gt;
&lt;li&gt;You will get a container based environment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;em&gt;env&lt;/em&gt; field we specify environment variables to be set for our CI build, which in this case consist of a &lt;em&gt;matrix&lt;/em&gt; field which has the environment variables of &lt;strong&gt;PORT&lt;/strong&gt; and &lt;strong&gt;ENVIRONMENT&lt;/strong&gt;. The &lt;em&gt;global&lt;/em&gt; field has an encrypted variable that we created with the travis cli.&lt;/p&gt;

&lt;p&gt;There are several lifecycle events that we can use in travis ci:&lt;/p&gt;

&lt;h4 id=&#34;before-install-lifecycle-event&#34;&gt;before_install lifecycle event&lt;/h4&gt;

&lt;p&gt;This event is useful when you want to set some values and/or install some dependencies before the actual default &lt;em&gt;install&lt;/em&gt; lifecycle event&lt;/p&gt;

&lt;h4 id=&#34;install-lifecycle-event&#34;&gt;install lifecycle event&lt;/h4&gt;

&lt;p&gt;This event is done on every build and essentially gets the environment ready for use to run your tests, lint code and more.&lt;/p&gt;

&lt;h4 id=&#34;before-script-lifecycle-event&#34;&gt;before_script lifecycle event&lt;/h4&gt;

&lt;p&gt;This event is useful when you want to run some actions before the actual &lt;em&gt;script&lt;/em&gt; lifecycle event.&lt;/p&gt;

&lt;h4 id=&#34;script-lifecycle-event&#34;&gt;script lifecycle event&lt;/h4&gt;

&lt;p&gt;This event will comprise the bulk of the actions you will do in your CI build&lt;/p&gt;

&lt;h4 id=&#34;after-success-lifecycle-event&#34;&gt;after_success lifecycle event&lt;/h4&gt;

&lt;p&gt;This event is used when you want to do some actions on a successful CI build.&lt;/p&gt;

&lt;p&gt;Notice that we are using Makefile tasks in the script section.&lt;/p&gt;

&lt;h2 id=&#34;makefile-contents&#34;&gt;Makefile Contents&lt;/h2&gt;

&lt;p&gt;Here are the contents of the makefile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;travis-install:
								go get -u github.com/mattn/goveralls
								go get -u github.com/philwinder/gocoverage
								go get -u github.com/alecthomas/gometalinter
								go get -u github.com/golang/dep/cmd/dep
								go get -u golang.org/x/tools/cmd/cover
								dep ensure

travis-script:
								set -e
								CGO_ENABLED=0 go build -i -o ${BIN_DIR} ${APID_MAIN}
								gometalinter --install
								gometalinter ./cmd/... ./internal/...
								go test ./... -cover
								gocoverage
								goveralls -coverprofile=profile.cov -repotoken=${COVERALLS_TOKEN}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;em&gt;travis-install&lt;/em&gt; makefile task we install all the golang library dependencies required for a CI build.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;travis-script&lt;/em&gt; makefile task we run a lint task, run tests, and push a code coverage report.&lt;/p&gt;

&lt;h2 id=&#34;using-circle-ci-for-ci-cd&#34;&gt;Using Circle CI for CI/CD&lt;/h2&gt;

&lt;p&gt;Circle CI like Travis CI is a hosted and managed automation solution.&lt;/p&gt;

&lt;p&gt;Circle CI uses a yaml syntax like Travis CI but has a very nice dashboard for viewing CI Builds.&lt;/p&gt;

&lt;p&gt;Here is a sample yml file with CI/CD tasks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: 2
jobs:
  build:
    working_directory: /go/src/github.com/packtci/go-template-example-with-circle-ci
    docker:
      - image: circleci/golang:1.9
    steps:
      - checkout
      - run:
          name: &amp;quot;Print go version&amp;quot;
          command: go version
      - run:
          name: &amp;quot;Run Unit Tests&amp;quot;
          command: go test
  integration:
    docker:
      - image: cypress/base:8
        environment:
          ## this enables colors in the output
          TERM: xterm
    steps:
      - checkout
      # special step to restore the dependency cache
      - restore_cache:
          key: v2-{{ checksum &amp;quot;package.json&amp;quot; }}
      - run: npm install
      # special step to save the dependency cache
      - save_cache:
          key: v2-{{ checksum &amp;quot;package.json&amp;quot; }}
          paths:
            - ~/.npm
            - ~/.cache
      - run: 
          name: &amp;quot;Run Integration Tests&amp;quot;
          command: npm test
  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
workflows:
  version: 2
  build_integration_and_deploy:
    jobs:
      - build
      - integration:
          requires:
            - build
      - deploy:
          requires:
            - integration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that here we create several steps for the CI/CD build.&lt;/p&gt;

&lt;p&gt;This is using a yaml syntax like Travis CI with different fields obviously.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;version&lt;/em&gt; field is where we specify the particular version of Circle CI syntax.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;jobs&lt;/em&gt; field is where we specify each job we want to run for Circle CI.&lt;/p&gt;

&lt;p&gt;Using the &lt;em&gt;docker&lt;/em&gt; field we can specify the particular docker images we need for our CI builds.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;workflows&lt;/em&gt; field is where we can schedule the jobs to run.&lt;/p&gt;

&lt;p&gt;Here is a screenshot of the Circle CI build steps:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/ci-cd-circle-ci.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;hands-on-continuous-integration-and-delivery-1&#34;&gt;Hands On Continuous Integration and Delivery&lt;/h2&gt;

&lt;p&gt;You can read more about Continuous Integration and Delivery by reading my books:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/virtualization-and-cloud/hands-continuous-integration-and-delivery&#34; target=&#34;_blank&#34;&gt;Hands On Continuous Integration and Delivery&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With VS Code</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-vscode-and-chrome/</link>
      <pubDate>Sun, 23 Sep 2018 19:09:59 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-vscode-and-chrome/</guid>
      <description>

&lt;h1 id=&#34;editor-tips-and-tricks-with-vs-code&#34;&gt;Editor Tips and Tricks with VS Code&lt;/h1&gt;

&lt;p&gt;Here are some suggested plugins by programming language.&lt;/p&gt;

&lt;h2 id=&#34;golang-extensions&#34;&gt;Golang Extensions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go&#34; target=&#34;_blank&#34;&gt;Go for Visual Studio Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;&amp;quot;go.useLanguageServer&amp;quot;: true&lt;/code&gt; in  &lt;em&gt;settings.json&lt;/em&gt; to use the Go language server from Sourcegraph for features like Hover, Definition, Find All References, Signature Help, Go to Symbol in File and Workspace.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; target=&#34;_blank&#34;&gt;GO Language Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will see Analysis Tools Missing in the bottom right, clicking this will offer to install all of the dependent Go tools. You can also run the command Go: Install/Update tools to install/update the same.&lt;/p&gt;

&lt;h2 id=&#34;rust-extensions&#34;&gt;Rust Extensions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=rust-lang.rust&#34; target=&#34;_blank&#34;&gt;Rust support for Visual Studio Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rust support is powered by the Rust Language Server (RLS). If you don&amp;rsquo;t have it installed, the extension will install it for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to find any other extensions just search in the Marketplace for them as there are tons of extensions available for languages and for certain configurations.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;editor-workflow-tips&#34;&gt;Editor Workflow Tips&lt;/h2&gt;

&lt;p&gt;Enter &lt;em&gt;F1&lt;/em&gt; in your keyboard to open the command window.&lt;/p&gt;

&lt;p&gt;Press &lt;em&gt;command p&lt;/em&gt; to open any files in the VS Code Workspace/Window&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vscode-command-prompt.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;file-navigation-tips&#34;&gt;File Navigation Tips&lt;/h4&gt;

&lt;p&gt;Press &lt;em&gt;command shift o&lt;/em&gt; to open the Symbols Menu to find symbols such as functions and more&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vscode-command-prompt.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Press &lt;em&gt;shift f12&lt;/em&gt; in order to find all usages of a function&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vscode-command-prompt.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Find the appropriate usage by hitting the up/down key and then press enter&lt;/p&gt;

&lt;h4 id=&#34;change-language-with-command-prompt&#34;&gt;Change Language with command prompt&lt;/h4&gt;

&lt;p&gt;Press &lt;em&gt;F1&lt;/em&gt; in your keyboard and then enter &lt;em&gt;change language mode&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/change-language-mode.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;install-bookmark-extension&#34;&gt;Install Bookmark Extension&lt;/h4&gt;

&lt;p&gt;Install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks&#34; target=&#34;_blank&#34;&gt;bookmark extension&lt;/a&gt; so that you can bookmark your source code&lt;/p&gt;

&lt;p&gt;Press &lt;em&gt;command alt k&lt;/em&gt; to set a bookmark&lt;/p&gt;

&lt;p&gt;Press &lt;em&gt;command alt j&lt;/em&gt; to go to previous set bookmark&lt;/p&gt;

&lt;p&gt;Press &lt;em&gt;command alt l&lt;/em&gt; to go jump to next bookmark&lt;/p&gt;

&lt;h4 id=&#34;code-folding-in-vs-code&#34;&gt;Code folding in VS Code&lt;/h4&gt;

&lt;p&gt;You can code fold by pressing &lt;em&gt;F1 and type fold all&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can unfold all by pressing &lt;em&gt;F1 and unfold all&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;format-file-types&#34;&gt;Format file types&lt;/h4&gt;

&lt;p&gt;You can easily format a json blog&lt;/p&gt;

&lt;p&gt;Here is a set of screenshots with a large json blog:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/large-json-blog.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/change-language-mode.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/format-document.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/json-entry.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/formatted-doc.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;code-diff-with-vs-code&#34;&gt;Code diff with VS Code&lt;/h4&gt;

&lt;p&gt;You can do code diffing with vs code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;code --diff file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;open-integrated-terminal&#34;&gt;Open Integrated Terminal&lt;/h4&gt;

&lt;p&gt;You can open the VS Code Integrated Terminal with &lt;em&gt;control `&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;install-programming-font-ligatures-in-vs-code&#34;&gt;Install Programming Font Ligatures in VS Code&lt;/h4&gt;

&lt;p&gt;You can use professional ligatures such as &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34; target=&#34;_blank&#34;&gt;FiraCode&lt;/a&gt; in VS Code&lt;/p&gt;

&lt;p&gt;Just follow the instructions in the &lt;a href=&#34;https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions&#34; target=&#34;_blank&#34;&gt;FiraCode Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can click the &lt;a href=&#34;https://github.com/tonsky/FiraCode/releases/download/1.205/FiraCode_1.205.zip&#34; target=&#34;_blank&#34;&gt;Download v1.205 button&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then open the zip file which should look like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/fira-zip-file.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;And when you open up all the ttf files you will see the following Font Book application&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/font-book.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Click install font button and then you will have the FiraCode fonts now.&lt;/p&gt;

&lt;p&gt;Next add an entry like this to your settings.json file in VS Code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    // Enables/Disables font ligatures.
    &amp;quot;editor.fontFamily&amp;quot;: &amp;quot;Fira Code&amp;quot;,
    &amp;quot;editor.fontLigatures&amp;quot;: true,
    &amp;quot;editor.fontWeight&amp;quot;: &amp;quot;300&amp;quot;,
    &amp;quot;editor.fontSize&amp;quot;: 13,
    &amp;quot;editor.cursorWidth&amp;quot;: 0,
    &amp;quot;editor.cursorStyle&amp;quot;: &amp;quot;block&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;change-editor-color-theme&#34;&gt;Change Editor Color Theme&lt;/h4&gt;

&lt;p&gt;You can change the color theme in VS Code by pressing &lt;em&gt;F1 and entering color theme&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can install many different themes in the VS Code Marketplace.&lt;/p&gt;

&lt;p&gt;Here are all of my Editor Themes:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vscode-color-themes.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or follow me at &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont at Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave a comment if you like this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hands-On Continuous Integration and Delivery</title>
      <link>https://www.marcelbelmont.com/publication/ci_cd_book/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/publication/ci_cd_book/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting started with Rustlang</title>
      <link>https://www.marcelbelmont.com/post/getting_started_with_rustlang/</link>
      <pubDate>Sun, 26 Aug 2018 20:30:37 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/getting_started_with_rustlang/</guid>
      <description>

&lt;h1 id=&#34;in-this-blog-post-i-go-over-getting-started-with-rustlang&#34;&gt;In this Blog Post I go over getting started with Rustlang&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;installing-rust-in-mac-os-x-linux&#34;&gt;Installing Rust in Mac OS X / Linux&lt;/h2&gt;

&lt;p&gt;To install Rust in Linux and Mac OS X run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://sh.rustup.rs -sSf | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For other installation methods please read the following &lt;a href=&#34;https://www.rust-lang.org/en-US/other-installers.html&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the cargo binaries to your path by adding the following entry in &lt;em&gt;~/.profile&lt;/em&gt;, &lt;em&gt;~/.bash_profile&lt;/em&gt; &lt;em&gt;~/.bashrc&lt;/em&gt;, &lt;em&gt;~/.zshrc&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;export PATH=&amp;quot;$HOME/.cargo/bin:$PATH&amp;quot;&amp;quot; &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note here that I appended this using &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to &lt;em&gt;~/.zshrc&lt;/em&gt; but you may choose &lt;em&gt;~/.bashrc&lt;/em&gt; or another file.&lt;/p&gt;

&lt;h4 id=&#34;installing-rust-in-windows&#34;&gt;Installing Rust in Windows&lt;/h4&gt;

&lt;p&gt;On Windows, go to &lt;a href=&#34;https://www.rust-lang.org/install.html&#34; target=&#34;_blank&#34;&gt;install&lt;/a&gt; and follow the instructions for installing Rust.&lt;/p&gt;

&lt;p&gt;You will need to install C++ build tools for Visual Studio 2013 or later here but it is best to just install &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017&#34; target=&#34;_blank&#34;&gt;Visual Studio Build Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tools are in the Other Tools and Frameworks section which looks like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vs-build-tools.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;check-rust-installation&#34;&gt;Check Rust Installation&lt;/h4&gt;

&lt;p&gt;If Rust is installed then you should be able to run the following command in your terminal windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustc --version
rustc 1.26.2 (594fb253c 2018-06-01)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-rustlang&#34;&gt;Updating Rustlang&lt;/h2&gt;

&lt;p&gt;In order to update the rust binaries you need to run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run the &lt;code&gt;--version&lt;/code&gt; options with rustc a new version should be reported if the update found a new version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustc --version
rustc 1.28.0 (9634041f0 2018-07-30)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;viewing-local-documentation&#34;&gt;Viewing Local Documentation&lt;/h2&gt;

&lt;p&gt;In order to see local documentation you can run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup doc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cargo-package-manager&#34;&gt;Cargo Package Manager&lt;/h2&gt;

&lt;p&gt;Rust comes with a powerful package manager called &lt;strong&gt;cargo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can create new rust packages by using the cargo package manager.&lt;/p&gt;

&lt;p&gt;The command you use is: &lt;code&gt;cargo new&lt;/code&gt; with options and provide a name&lt;/p&gt;

&lt;h4 id=&#34;create-a-new-binary-template-package&#34;&gt;Create a new binary template package&lt;/h4&gt;

&lt;p&gt;If you want to create a new rust binary template application then run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo new PACKAGE_NAME --bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;create-a-new-library-template-package&#34;&gt;Create a new library template package&lt;/h4&gt;

&lt;p&gt;If you want to create a new rust library template application then run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo new PACKAGE_NAME --lib
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-contents-of-a-new-binary-template-package&#34;&gt;The contents of a new binary template package&lt;/h4&gt;

&lt;p&gt;When you create a new binary application cargo will create the following files:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/new_rust_package_contents.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that the following files were created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cargo.lock

&lt;ul&gt;
&lt;li&gt;This file locks your dependencies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cargo.toml

&lt;ul&gt;
&lt;li&gt;This file will have basic metadata for the rust package and dependencies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;src directory

&lt;ul&gt;
&lt;li&gt;main.rs

&lt;ul&gt;
&lt;li&gt;This will be main program for the application&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contents of &lt;em&gt;Cargo.toml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[package]
name = &amp;quot;hello-world&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
authors = [&amp;quot;Jean-Marcel Belmont &amp;lt;marcelbelmont@gmail.com&amp;gt;&amp;quot;]

[dependencies]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Contents of &lt;em&gt;src/main.rs&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    println!(&amp;quot;Hello, world!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;build-rust-package&#34;&gt;Build Rust package&lt;/h4&gt;

&lt;p&gt;In order to build the rust package you can run the following command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cargo-build.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;This command generates the &lt;em&gt;target&lt;/em&gt; directory with the following content:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/target-directory.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;running-rust-package&#34;&gt;Running Rust package&lt;/h4&gt;

&lt;p&gt;You could run rust packages by issuing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will build and run the rust package.&lt;/p&gt;

&lt;h4 id=&#34;check-the-rust-package-for-build-issues&#34;&gt;Check the Rust package for build issues&lt;/h4&gt;

&lt;p&gt;You can use the &lt;code&gt;cargo check&lt;/code&gt; command to see if your package will build but it will not create an executable.&lt;/p&gt;

&lt;h4 id=&#34;running-tests-with-cargo&#34;&gt;Running tests with Cargo&lt;/h4&gt;

&lt;p&gt;You can easily run tests by using the &lt;code&gt;cargo test&lt;/code&gt; command in the root of your project.&lt;/p&gt;

&lt;p&gt;Whenever you create a new library it will stub out a test for you in &lt;em&gt;src/lib.rs&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Notice here that there is an annotation of &lt;code&gt;#[cfg(test)]&lt;/code&gt; for the tests module and &lt;code&gt;#[test]&lt;/code&gt; for the test case.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources-to-learn-rustlang&#34;&gt;Resources to learn Rustlang&lt;/h2&gt;

&lt;p&gt;Arguably the best resource to learn Rust is the &lt;a href=&#34;https://doc.rust-lang.org/book/2018-edition/index.html&#34; target=&#34;_blank&#34;&gt;Official Rust Book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Rust Book will walk you through each and every aspect of the Rust Language so please read it!&lt;/p&gt;

&lt;h4 id=&#34;read-the-standard-library&#34;&gt;Read the Standard Library&lt;/h4&gt;

&lt;p&gt;Another way to learn Rust well is to read the Standard Library &lt;a href=&#34;https://doc.rust-lang.org/std/index.html&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should also read &lt;a href=&#34;https://doc.rust-lang.org/std/index.html#a-tour-of-the-rust-standard-library&#34; target=&#34;_blank&#34;&gt;A tour of the standard library&lt;/a&gt; which will list all the primitive types, modules, and macros in Rust.&lt;/p&gt;

&lt;h4 id=&#34;using-the-rust-playground&#34;&gt;Using the Rust Playground&lt;/h4&gt;

&lt;p&gt;Much like Golang has a playground so does Rust.&lt;/p&gt;

&lt;p&gt;Here is a link to the Rust Playground that uses Rust nightly and has debugging mode enabled &lt;a href=&#34;https://play.rust-lang.org/?version=nightly&amp;amp;mode=debug&amp;amp;edition=2018&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;community-links&#34;&gt;Community Links&lt;/h2&gt;

&lt;p&gt;Check out all the community related information &lt;a href=&#34;https://www.rust-lang.org/en-US/community.html&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this Blog Post please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With Curl and Jq</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-curl-and-jq/</link>
      <pubDate>Sun, 22 Jul 2018 09:13:27 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-curl-and-jq/</guid>
      <description>

&lt;h1 id=&#34;tips-and-tricks-with-curl-and-jq&#34;&gt;Tips and Tricks With Curl and Jq&lt;/h1&gt;

&lt;p&gt;In this blog post we will work with Restful APIs and use jq, which is a command line processor for json. We will use curl to make Rest calls and then use jq to parse the json response into more useful information. By using jq we can do many useful transformation with json such as aggregating data like averages from a json response payload and extracting only the fields that we are interested in working with instead of an entire payload and much more.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites-for-the-blog-post&#34;&gt;Prerequisites for the Blog Post&lt;/h2&gt;

&lt;h4 id=&#34;jq-installation&#34;&gt;jq installation&lt;/h4&gt;

&lt;p&gt;To install jq please read the instructions in the &lt;a href=&#34;https://stedolan.github.io/jq/download/&#34; target=&#34;_blank&#34;&gt;jq installation documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mac OS X users can use &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;homebrew&lt;/a&gt; to install &lt;a href=&#34;https://stedolan.github.io/jq/&#34; target=&#34;_blank&#34;&gt;jq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run this command to install jq with homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;curl-installation&#34;&gt;curl installation&lt;/h4&gt;

&lt;p&gt;To install curl please read the instructions in the &lt;a href=&#34;https://curl.haxx.se/download.html&#34; target=&#34;_blank&#34;&gt;curl installation documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mac OS X users already have curl installed by default but can also use &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;homebrew&lt;/a&gt; to install &lt;a href=&#34;https://curl.haxx.se/&#34; target=&#34;_blank&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run this command to install curl with homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install curl
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-of-public-apis&#34;&gt;List of Public APIs&lt;/h2&gt;

&lt;p&gt;You can get a list of public apis in &lt;a href=&#34;https://github.com/toddmotto/public-apis&#34; target=&#34;_blank&#34;&gt;Todd Motto&amp;rsquo;s github repo&lt;/a&gt;.
We will use some of the public apis listed in this repo.&lt;/p&gt;

&lt;h2 id=&#34;using-curl-to-make-restful-api-calls&#34;&gt;Using curl to make restful api calls&lt;/h2&gt;

&lt;h4 id=&#34;brief-description-of-curl&#34;&gt;Brief description of curl&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://curl.haxx.se/&#34; target=&#34;_blank&#34;&gt;curl&lt;/a&gt; is used in command line applications or scripts to transfer data. It is used in a broad range of applications ranging from cars, tvs to audio equipment. We will be using curl to work with HTTP APIs but curl can work with many other protocols besides HTTP.&lt;/p&gt;

&lt;h4 id=&#34;making-a-restful-api-call-with-curl&#34;&gt;Making a restful api call with curl&lt;/h4&gt;

&lt;p&gt;Let us work with the &lt;a href=&#34;https://www.goodreads.com/&#34; target=&#34;_blank&#34;&gt;goodreads&lt;/a&gt; api to list some good book recommendations and first we need to authorize the &lt;a href=&#34;https://www.goodreads.com/api&#34; target=&#34;_blank&#34;&gt;goodreads api&lt;/a&gt; by creating an account with goodreads or by authorizing twitter or facebook as an oauth application with the goodreads application. You will need to go the &lt;a href=&#34;https://www.goodreads.com/api/keys&#34; target=&#34;_blank&#34;&gt;API Key page in good reads&lt;/a&gt; to register your oauth application with good reads.&lt;/p&gt;

&lt;h6 id=&#34;rest-call-to-get-the-reviews-for-a-book-given-a-title-string&#34;&gt;Rest call to get the reviews for a book given a title string&lt;/h6&gt;

&lt;p&gt;We will make a rest call to the following endpoint with the goodreads api:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET https://www.goodreads.com/book/title.json??author=Erich+Gamma&amp;amp;key=hTDxFOV2GPZTzvzp4FZDlw&amp;amp;title=Design Patterns&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;em&gt;format&lt;/em&gt; can be either json or xml as the data-interchange format and isbn is the the ISBN of the book to lookup.&lt;/p&gt;

&lt;p&gt;Now we will use curl in the command line to make a GET request to the goodreads api by running the following command in a command prompt or terminal application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl &#39;https://www.goodreads.com/book/title.json?author=Arthur+Conan+Doyle&amp;amp;key=hTDxFOV2GPZTzvzp4FZDlw&amp;amp;title=Hound+of+the+Baskervilles&#39; -H &#39;Accept: application/json&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is json that we get back from the API:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;reviews_widget&amp;quot;:&amp;quot;\u003cstyle\u003e\n  #goodreads-widget {\n    font-family: georgia, serif;\n    padding: 18px 0;\n    width:565px;\n  }\n  #goodreads-widget h1 {\n    font-weight:normal;\n    font-size: 16px;\n    border-bottom: 1px solid #BBB596;\n    margin-bottom: 0;\n  }\n  #goodreads-widget a {\n    text-decoration: none;\n    color:#660;\n  }\n  iframe{\n    background-color: #fff;\n  }\n  #goodreads-widget a:hover { text-decoration: underline; }\n  #goodreads-widget a:active {\n    color:#660;\n  }\n  #gr_footer {\n    width: 100%;\n    border-top: 1px solid #BBB596;\n    text-align: right;\n  }\n  #goodreads-widget .gr_branding{\n    color: #382110;\n    font-size: 11px;\n    text-decoration: none;\n    font-family: \&amp;quot;Helvetica Neue\&amp;quot;, Helvetica, Arial, sans-serif;\n  }\n\u003c/style\u003e\n\u003cdiv id=\&amp;quot;goodreads-widget\&amp;quot;\u003e\n  \u003cdiv id=\&amp;quot;gr_header\&amp;quot;\u003e\u003ch1\u003e\u003ca rel=\&amp;quot;nofollow\&amp;quot; href=\&amp;quot;https://www.goodreads.com/book/show/8921.The_Hound_of_the_Baskervilles\&amp;quot;\u003eThe Hound of the Baskervilles Reviews\u003c/a\u003e\u003c/h1\u003e\u003c/div\u003e\n  \u003ciframe id=\&amp;quot;the_iframe\&amp;quot; src=\&amp;quot;https://www.goodreads.com/api/reviews_widget_iframe?did=DEVELOPER_ID\u0026amp;format=html\u0026amp;isbn=0451528018\u0026amp;links=660\u0026amp;review_back=fff\u0026amp;stars=000\u0026amp;text=000\&amp;quot; width=\&amp;quot;565\&amp;quot; height=\&amp;quot;400\&amp;quot; frameborder=\&amp;quot;0\&amp;quot;\u003e\u003c/iframe\u003e\n  \u003cdiv id=\&amp;quot;gr_footer\&amp;quot;\u003e\n    \u003ca class=\&amp;quot;gr_branding\&amp;quot; target=\&amp;quot;_blank\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; href=\&amp;quot;https://www.goodreads.com/book/show/8921.The_Hound_of_the_Baskervilles?utm_medium=api\u0026amp;utm_source=reviews_widget\&amp;quot;\u003eReviews from Goodreads.com\u003c/a\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notice here that the json output is not very pretty let us now use the jq command line processor to pretty print our json.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will now use a Unix Pipe to pipe the output of our rest call into jq which will pretty print our json by default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl &#39;https://www.goodreads.com/book/title.json?author=Arthur+Conan+Doyle&amp;amp;key=hTDxFOV2GPZTzvzp4FZDlw&amp;amp;title=Hound+of+the+Baskervilles&#39; -H &#39;Pragma: no-cache&#39; -H &#39;Accept: application/json&#39; | jq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the output of the json using jq:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;reviews_widget&amp;quot;: &amp;quot;&amp;lt;style&amp;gt;\n  #goodreads-widget {\n    font-family: georgia, serif;\n    padding: 18px 0;\n    width:565px;\n  }\n  #goodreads-widget h1 {\n    font-weight:normal;\n    font-size: 16px;\n    border-bottom: 1px solid #BBB596;\n    margin-bottom: 0;\n  }\n  #goodreads-widget a {\n    text-decoration: none;\n    color:#660;\n  }\n  iframe{\n    background-color: #fff;\n  }\n  #goodreads-widget a:hover { text-decoration: underline; }\n  #goodreads-widget a:active {\n    color:#660;\n  }\n  #gr_footer {\n    width: 100%;\n    border-top: 1px solid #BBB596;\n    text-align: right;\n  }\n  #goodreads-widget .gr_branding{\n    color: #382110;\n    font-size: 11px;\n    text-decoration: none;\n    font-family: \&amp;quot;Helvetica Neue\&amp;quot;, Helvetica, Arial, sans-serif;\n  }\n&amp;lt;/style&amp;gt;\n&amp;lt;div id=\&amp;quot;goodreads-widget\&amp;quot;&amp;gt;\n  &amp;lt;div id=\&amp;quot;gr_header\&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;a rel=\&amp;quot;nofollow\&amp;quot; href=\&amp;quot;https://www.goodreads.com/book/show/8921.The_Hound_of_the_Baskervilles\&amp;quot;&amp;gt;The Hound of the Baskervilles Reviews&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;\n  &amp;lt;iframe id=\&amp;quot;the_iframe\&amp;quot; src=\&amp;quot;https://www.goodreads.com/api/reviews_widget_iframe?did=DEVELOPER_ID&amp;amp;amp;format=html&amp;amp;amp;isbn=0451528018&amp;amp;amp;links=660&amp;amp;amp;review_back=fff&amp;amp;amp;stars=000&amp;amp;amp;text=000\&amp;quot; width=\&amp;quot;565\&amp;quot; height=\&amp;quot;400\&amp;quot; frameborder=\&amp;quot;0\&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;\n  &amp;lt;div id=\&amp;quot;gr_footer\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;gr_branding\&amp;quot; target=\&amp;quot;_blank\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; href=\&amp;quot;https://www.goodreads.com/book/show/8921.The_Hound_of_the_Baskervilles?utm_medium=api&amp;amp;amp;utm_source=reviews_widget\&amp;quot;&amp;gt;Reviews from Goodreads.com&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;post-request-with-curl&#34;&gt;POST Request with curl&lt;/h4&gt;

&lt;p&gt;Curl has many command line options for dealing with HTTP APIs and we will have a section for each option.&lt;/p&gt;

&lt;h6 id=&#34;http-request-option-for-curl&#34;&gt;HTTP Request Option for curl&lt;/h6&gt;

&lt;p&gt;The command line option for http requests is either &lt;code&gt;-X&lt;/code&gt; or &lt;code&gt;--request&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can find all the HTTP Verbs documented in the HTTP 1.1 specification:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRACE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONNECT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;PATCH&lt;/code&gt; HTTP Verb came later and is documented in &lt;a href=&#34;https://tools.ietf.org/html/rfc5789#section-1&#34; target=&#34;_blank&#34;&gt;RFC 5789&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read more about this in &lt;a href=&#34;https://tools.ietf.org/html/rfc2616#section-9&#34; target=&#34;_blank&#34;&gt;RFC 2616 Section 9&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;example-post-request-to-circle-ci-api&#34;&gt;Example POST Request to CIRCLE CI API&lt;/h6&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/api/v1-reference/&#34; target=&#34;_blank&#34;&gt;CIRCLE CI API V1 Reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will make a POST request to Circle CI to test out a local configuration script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --user ${CIRCLECI_API_TOKEN_GITHUB}: \
    --request POST \
    --form revision=7d7c87e2c35df34f74f5b0cdfc47244f296c5fed \
    --form config=@config.yml \
    --form notify=false \
    https://circleci.com/api/v1.1/project/github/packtci/go-template-example-with-circle-ci/tree/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are providing the option &amp;ndash;user which takes &lt;code&gt;USER[:PASSWORD]  Server user and password&lt;/code&gt;
The &lt;code&gt;--form&lt;/code&gt; which takes &lt;code&gt;CONTENT  Specify HTTP multipart POST data (H)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-curl-and-jq-to-parse-out-response-payloads&#34;&gt;Using curl and jq to parse out response payloads&lt;/h2&gt;

&lt;h4 id=&#34;extract-top-level-attribute-in-json-payload&#34;&gt;Extract top level attribute in JSON Payload&lt;/h4&gt;

&lt;p&gt;We will now make a GET Request to the CIRCLE CI API to get information about the user and extract an attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET \
    --header &amp;quot;Accept: application/json&amp;quot; \
    &amp;quot;https://circleci.com/api/v1.1/me?circle-token=$CIRCLECI_PERSONAL_API_TOKEN&amp;quot; \
    | jq &#39;.name&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we use the &lt;a href=&#34;https://stedolan.github.io/jq/manual/#Basicfilters&#34; target=&#34;_blank&#34;&gt;jq&lt;/a&gt; utility to pluck out the name attribute which is a top level attribute in the response payload for the &lt;code&gt;GET&lt;/code&gt; request.&lt;/p&gt;

&lt;h4 id=&#34;parse-out-nested-attribute-in-big-response-payload&#34;&gt;Parse out nested attribute in big response payload&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET \
    --header &amp;quot;Accept: application/json&amp;quot; \
    &amp;quot;https://circleci.com/api/v1.1/recent-builds?circle-token=$CIRCLECI_PERSONAL_API_TOKEN&amp;amp;limit=20&amp;amp;offset=5&amp;quot; \
    | jq &#39;.[] | .subject&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we iterate through all the elements of the array and then parse out the nested subject attribute from the response&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/jq-parse.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-jq-play-to-interactively-experiment&#34;&gt;Using jq play to interactively experiment&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://jqplay.org/&#34; target=&#34;_blank&#34;&gt;jq play&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can craft more complicated jq queries with ease if you use the jq playground.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/jq-play.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice in this screenshot above that we used a combination of builtin functions in jq such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions&#34; target=&#34;_blank&#34;&gt;select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions&#34; target=&#34;_blank&#34;&gt;map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions&#34; target=&#34;_blank&#34;&gt;length&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that we were able to use the JavaScript equivalence operator of &lt;code&gt;==&lt;/code&gt; to check our condition&lt;/p&gt;

&lt;h6 id=&#34;add-the-jq-query-to-our-curl-command&#34;&gt;Add the jq query to our curl command&lt;/h6&gt;

&lt;p&gt;Let use add the jq query in the bottom of the screenshot to an existing curl command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

curl -X GET \
    --header &amp;quot;Accept: application/json&amp;quot; \
    &amp;quot;https://circleci.com/api/v1.1/recent-builds?circle-token=$CIRCLECI_PERSONAL_API_TOKEN&amp;amp;limit=20&amp;amp;offset=5&amp;quot; \
    | jq &#39;map(select(.ssh_disabled == false)) | length&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how useful the jq playground editor is in crafting jq queries&lt;/p&gt;

&lt;h6 id=&#34;compute-average-build-times-with-jq&#34;&gt;Compute average build times with jq&lt;/h6&gt;

&lt;p&gt;Now let us compute the average build time in Circle CI using jq.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

curl -X GET \
    --header &amp;quot;Accept: application/json&amp;quot; \
    &amp;quot;https://circleci.com/api/v1.1/recent-builds?circle-token=$CIRCLECI_PERSONAL_API_TOKEN&amp;amp;limit=20&amp;amp;offset=5&amp;quot; \
    | jq &#39;(reduce .[].build_time_millis as $build_time (0; . + $build_time) ) / length&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/manual/&#34; target=&#34;_blank&#34;&gt;jq manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jqplay.org/&#34; target=&#34;_blank&#34;&gt;jq playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ec.haxx.se/&#34; target=&#34;_blank&#34;&gt;curl book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jbelmont/tips-and-tricks-with-curl-and-jq&#34; target=&#34;_blank&#34;&gt;Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
