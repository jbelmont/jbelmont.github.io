<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Musings on Software Musings</title>
    <link>https://www.marcelbelmont.com/</link>
    <description>Recent content in Software Musings on Software Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jean-Marcel Belmont</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Acceptance Testing</title>
      <link>https://www.marcelbelmont.com/post/acceptance-testing/</link>
      <pubDate>Sun, 20 May 2018 15:48:12 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/acceptance-testing/</guid>
      <description>

&lt;p&gt;In this blog post we will define acceptance testing, explain why acceptance testing is important, utilize a library to write acceptance tests in and go over a method called Given When Then in Acceptance Testing, and incorporate acceptance testing into a CI/CD pipeline,.&lt;/p&gt;

&lt;h2 id=&#34;define-acceptance-testing&#34;&gt;Define Acceptance Testing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/acceptance/&#34; target=&#34;_blank&#34;&gt;Acceptance Testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An acceptance test is a formal description of the behavior of a software product, generally expressed as an example or a usage scenario. A number of different notations and approaches have been proposed for such examples or scenarios. In many cases the aim is that it should be possible to automate the execution of such tests by a software tool, either ad-hoc to the development team or off the shelf.&lt;/p&gt;

&lt;p&gt;An Acceptance Test Suite helps to veriy that an application is delivering the business value that your customers expect. Additionally an acceptance test suite helps guard agains regressions or defect that break preexisting functionality in your application.&lt;/p&gt;

&lt;h2 id=&#34;why-is-acceptance-testing-important&#34;&gt;Why is Acceptance Testing Important&lt;/h2&gt;

&lt;p&gt;So besides functioning as a Regression Test Suite as we stated above, an acceptance test suit help to test the business facing side of your application. It is common to have both Unit and Integration Tests for your code but acceptance tests help to prove that your application does what the customer thinks it should do not what a developer intends it to do.&lt;/p&gt;

&lt;p&gt;Many companies already invest in a large battery of Manual Acceptance Testing. Some companies are already spending an exhorbitant amount of money on manual acceptance testing. It may be that for each release a contracting company is hired to conduct manual testing of the entire application.&lt;/p&gt;

&lt;p&gt;Automated Acceptance Testing helps to protect your application when large refactorings occur in a codebase. If developers are making large scale changes to an application, an automated acceptance test suite can help protect and catch regressions that can occur with such changes.&lt;/p&gt;

&lt;h2 id=&#34;acceptance-criteria&#34;&gt;Acceptance Criteria&lt;/h2&gt;

&lt;p&gt;Acceptance Criteria are conditions in which a software application needs to satisfy in order to be accepted by a customer. Acceptance Criteria is a set of statements which mentions the result that will either pass or fail for both functional and non-functional requirements for the software project at the current stage. These functional and non-functional requirements are the conditions which can be acceptance.&lt;/p&gt;

&lt;p&gt;Acceptance Criteria should always be written before development commences so that it can successfully capture the customer intent rather than iterate functionalities in relation to the development reality. Acceptance Criteria should be written clearly in a simple language that the customer and product owners can understand.&lt;/p&gt;

&lt;h2 id=&#34;given-when-then&#34;&gt;Given When Then&lt;/h2&gt;

&lt;p&gt;Given When Then is a style of writing tests and was invented by Dan North and is a part of &lt;a href=&#34;https://dannorth.net/introducing-bdd/&#34; target=&#34;_blank&#34;&gt;Behavior-Driven Development (BDD)&lt;/a&gt;. The idea is that you should break down a user story/test into 3 main sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;given&lt;/em&gt; part helps describes the state that you are specifying in the user scenario.

&lt;ul&gt;
&lt;li&gt;This can also be thought of as a type of precondition before the test starts.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;when&lt;/em&gt; section is the actual behavior that you are trying to specify.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;then&lt;/em&gt; section helps describe the changes you expect due to the specified behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;feature-specification-example&#34;&gt;Feature Specification Example&lt;/h4&gt;

&lt;p&gt;Let us discuss a possible user story that a product owner specified albeit a trivial example.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;simple_addition.feature&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: Simple Addition of Numbers
  In order to do simple math as a developer I want to add numbers
  
  Scenario: Easy Math Problem
    Given a list of numbers set to []
    When I add the numbers together by []
    Then I get a larger result that is the sum of the numbers
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;writing-tests-using-cucumber&#34;&gt;Writing tests using Cucumber&lt;/h2&gt;

&lt;p&gt;Earlier we mentioned that given when then syntax is a style of testing that is a part of BDD. &lt;a href=&#34;http://docs.cucumber.io/guides/overview/&#34; target=&#34;_blank&#34;&gt;Cucumber&lt;/a&gt; is a tool that supports Behavior-Driven Development. Cucumber supports a multitude of languages and we will be using &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34; target=&#34;_blank&#34;&gt;cucumber-js&lt;/a&gt; in the tutorial.&lt;/p&gt;

&lt;p&gt;You can install cucumber-js by running the following command: &lt;code&gt;npm install --save-dev cucumber&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Requirements is node 6 or higher.&lt;/p&gt;

&lt;h4 id=&#34;cucumber-js-example&#34;&gt;Cucumber-js example&lt;/h4&gt;

&lt;p&gt;Run the following command to create a suitable folder structure:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir -p features/support&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a feature specification file that uses the &lt;a href=&#34;http://docs.cucumber.io/gherkin/reference/&#34; target=&#34;_blank&#34;&gt;Gherkin Syntax&lt;/a&gt; by running &lt;code&gt;touch features/simple_addition.feature&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now copy and paste the sample specification we wrote called simple_addition.feature and paste it into the file we just created.&lt;/p&gt;

&lt;p&gt;Inside the root of the directory then run &lt;code&gt;./node_modules/.bin/cucumber-js&lt;/code&gt; and you will see the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Warnings:

1) Scenario: Easy Math Problem # features/simple_addition.feature:3
   ? Given a list of numbers set to []
       Undefined. Implement with the following snippet:
         Given(&#39;a list of numbers set to []&#39;, function () {
           // Write code here that turns the phrase above into concrete actions
           return &#39;pending&#39;;
         });

   ? When I add the numbers together by []
       Undefined. Implement with the following snippet:
         When(&#39;I add the numbers together by []&#39;, function () {
           // Write code here that turns the phrase above into concrete actions
           return &#39;pending&#39;;
         });

   ? Then I get a larger result that is the sum of the numbers
       Undefined. Implement with the following snippet:
         Then(&#39;I get a larger result that is the sum of the numbers&#39;, function () {
           // Write code here that turns the phrase above into concrete actions
           return &#39;pending&#39;;
         });


1 scenario (1 undefined)
3 steps (3 undefined)
0m00.000s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can copy and paste the snippet that cucumber gave us into a file called steps.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { Given, When, Then } = require(&#39;cucumber&#39;)
const { expect } = require(&#39;chai&#39;)

Given(&#39;a list of numbers set to []&#39;, function () {
  // Write code here that turns the phrase above into concrete actions
  return &#39;pending&#39;;
});

When(&#39;I add the numbers together by []&#39;, function () {
  // Write code here that turns the phrase above into concrete actions
  return &#39;pending&#39;;
});

Then(&#39;I get a larger result that is the sum of the numbers&#39;, function () {
  // Write code here that turns the phrase above into concrete actions
  return &#39;pending&#39;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the command: &lt;code&gt;touch features/support/steps.js&lt;/code&gt; and paste these contents.&lt;/p&gt;

&lt;p&gt;This will not pass yet as we need to implement our functionality.&lt;/p&gt;

&lt;p&gt;Let us create a file called &lt;code&gt;addition.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;addition.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { setWorldConstructor } = require(&#39;cucumber&#39;)

class Addition {
  constructor() {
    this.summation = 0
  }

  setTo(numbers) {
    this.numbers = numbers
  }

  addBy() {
    this.summation = this.numbers.reduce((prev, curr) =&amp;gt; prev + curr, 0);
  }
}

setWorldConstructor(Addition)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let us rewrite a steps.js to this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;steps.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { Given, When, Then } = require(&#39;cucumber&#39;)
const { expect } = require(&#39;chai&#39;)

Given(&#39;a list of numbers set to []&#39;, function () {
    this.setTo([1, 2, 3, 4, 5])
});

When(&#39;I add the numbers together by []&#39;, function () {
    this.addBy();
});

Then(&#39;I get a larger result that is the sum of the numbers&#39;, function () {
    expect(this.summation).to.eql(15)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run our tests we see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run acceptance:tests

&amp;gt; cucumber-examples@1.0.0 acceptance:tests /Users/jean-marcelbelmont/dev/cucumber-examples
&amp;gt; cucumber-js

...

1 scenario (1 passed)
3 steps (3 passed)
0m00.001s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the npm script &lt;code&gt;acceptance:tests&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;cucumber-examples&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;A repo exploring Behavior Driven Development with Cucumber&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;acceptance:tests&amp;quot;: &amp;quot;cucumber-js&amp;quot;
  },
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;git+https://github.com/jbelmont/cucumber-examples.git&amp;quot;
  },
  &amp;quot;keywords&amp;quot;: [],
  &amp;quot;author&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;bugs&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;https://github.com/jbelmont/cucumber-examples/issues&amp;quot;
  },
  &amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/jbelmont/cucumber-examples#readme&amp;quot;,
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;chai&amp;quot;: &amp;quot;^4.1.2&amp;quot;,
    &amp;quot;cucumber&amp;quot;: &amp;quot;^4.2.1&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the scripts block is where the script is run.&lt;/p&gt;

&lt;h2 id=&#34;incorporate-tests-into-a-ci-cd-pipeline&#34;&gt;Incorporate Tests into a CI/CD Pipeline&lt;/h2&gt;

&lt;p&gt;In order to incorporate cucumber into a CI/CD pipeline you will need to choose a CI/CD tool. For the purposes of this blog post we will use Travis CI.&lt;/p&gt;

&lt;p&gt;Travis CI uses a yaml script file and is really easy to incorporate to a Github Project. First create a file called &lt;code&gt;.travis.yml&lt;/code&gt; and then make sure that sign up for &lt;code&gt;https://travis-ci.org&lt;/code&gt; account. You will then need to sync your current Github repos and then toggle on the repo of your choose. Next push up changes to source control and go to the CI build which in my case happens to be &lt;code&gt;https://travis-ci.org/jbelmont/cucumber-examples&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code&gt;.travis.yml&lt;/code&gt; script that the blog post uses:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dist: trusty
sudo: required
language: node_js
node_js:
  - 10
script:
  - npm run acceptance:tests
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the script part is &lt;code&gt;npm run acceptance:tests&lt;/code&gt; it is defined in the package.json file at the root of the directory.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;This example while trivial is a good illustration on why using a tool like cucumber is really useful to test your Acceptance Requirements in a programmatic way.&lt;/p&gt;

&lt;p&gt;If you would like to look at the &lt;a href=&#34;https://github.com/jbelmont/cucumber-examples&#34; target=&#34;_blank&#34;&gt;Cucumber Examples Repo Go Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks with Golang</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-golang/</link>
      <pubDate>Sat, 28 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-golang/</guid>
      <description>

&lt;h1 id=&#34;in-this-blog-post-i-go-over-tips-and-tricks-with-golang&#34;&gt;In this Blog Post I go over Tips and Tricks with Golang&lt;/h1&gt;

&lt;p&gt;Make sure to have &lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34;&gt;Golang Installed&lt;/a&gt; and you have the &lt;code&gt;GOPATH&lt;/code&gt; variable set.&lt;/p&gt;

&lt;p&gt;Set your &lt;code&gt;GOPATH&lt;/code&gt; variable in Mac OS X by setting it in &lt;code&gt;~/.bashrc, ~/.zshrc&lt;/code&gt; etc&lt;/p&gt;

&lt;p&gt;Add the following entry to your &lt;code&gt;.zshrc&lt;/code&gt;: &lt;code&gt;export GOPATH=$HOME/go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;source ~/.zshrc&lt;/code&gt; to get the environment variable set in your current shell process.&lt;/p&gt;

&lt;p&gt;Once golang is installed run the following command to see what is set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go env
GOARCH=&amp;quot;amd64&amp;quot;
GOBIN=&amp;quot;&amp;quot;
GOCACHE=&amp;quot;/Users/jean-marcelbelmont/Library/Caches/go-build&amp;quot;
GOEXE=&amp;quot;&amp;quot;
GOHOSTARCH=&amp;quot;amd64&amp;quot;
GOHOSTOS=&amp;quot;darwin&amp;quot;
GOOS=&amp;quot;darwin&amp;quot;
GOPATH=&amp;quot;/Users/jean-marcelbelmont/go&amp;quot;
GORACE=&amp;quot;&amp;quot;
GOROOT=&amp;quot;/usr/local/Cellar/go/1.10/libexec&amp;quot;
GOTMPDIR=&amp;quot;&amp;quot;
GOTOOLDIR=&amp;quot;/usr/local/Cellar/go/1.10/libexec/pkg/tool/darwin_amd64&amp;quot;
GCCGO=&amp;quot;gccgo&amp;quot;
CC=&amp;quot;clang&amp;quot;
CXX=&amp;quot;clang++&amp;quot;
CGO_ENABLED=&amp;quot;1&amp;quot;
CGO_CFLAGS=&amp;quot;-g -O2&amp;quot;
CGO_CPPFLAGS=&amp;quot;&amp;quot;
CGO_CXXFLAGS=&amp;quot;-g -O2&amp;quot;
CGO_FFLAGS=&amp;quot;-g -O2&amp;quot;
CGO_LDFLAGS=&amp;quot;-g -O2&amp;quot;
PKG_CONFIG=&amp;quot;pkg-config&amp;quot;
GOGCCFLAGS=&amp;quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/g6/jldtb40j5vvfxtjmg0f5nt4h0000gp/T/go-build176900775=/tmp/go-build -gno-record-gcc-switches -fno-common&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice I have set my &lt;code&gt;GOPATH&lt;/code&gt; but there is some other defaults that are set.&lt;/p&gt;

&lt;h2 id=&#34;using-go-docs&#34;&gt;Using Go Docs&lt;/h2&gt;

&lt;p&gt;You can easily go into docs for any GO package by doing the following:&lt;/p&gt;

&lt;p&gt;One trick that I do is that I copy the import statement in my editor like this:&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/goimport.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Once you have that copied you just do the following:&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;godoc.org/&lt;/code&gt; into a browser window and paste the package into the URL:&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/gourl.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Now this takes straight you straight to the documentation for this package.&lt;/p&gt;

&lt;p&gt;Now for a protip type &lt;code&gt;?&lt;/code&gt; in the documentation page and get a help context menu like this:&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/gohelpmenu.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Assuming that you know what functions/methods you can easily jump to them by pressing &lt;code&gt;f&lt;/code&gt; in your keyboard:&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;f&lt;/code&gt;:&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/gofindmenu.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In this example just type &lt;code&gt;WithStack&lt;/code&gt; and you can jump straight to the &lt;code&gt;WithStack&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;You can also go into your terminal and see the documentation by doing the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go doc fmt.Printf&lt;/code&gt; ==&amp;gt; This command gives you the docs for &lt;code&gt;fmt.Printf&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;sharing-go-code&#34;&gt;Sharing Go Code&lt;/h2&gt;

&lt;p&gt;You can easily share your go code with others by going to either the &lt;a href=&#34;https://play.golang.org/&#34; target=&#34;_blank&#34;&gt;Go Playground&lt;/a&gt; or &lt;a href=&#34;https://goplay.space/&#34; target=&#34;_blank&#34;&gt;Go Play&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-own-custom-assert-test-function&#34;&gt;Create your own custom assert test function&lt;/h2&gt;

&lt;p&gt;Here is a sample test file from my &lt;a href=&#34;https://github.com/jbelmont/api-workshop/blob/master/internal/hero/hero_test.go&#34; target=&#34;_blank&#34;&gt;api-workshop&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
// TestCreateInsertsProperly validates users can be created in the database.
func TestCreateInsertHero(t *testing.T) {
	// Insert User
	heroInfo := heroInfo()
	// Translate CreateProduct to Product in order to assert result.
	cuBytes, _ := json.Marshal(heroInfo.hero)
	var exH hero.Hero
	json.Unmarshal(cuBytes, &amp;amp;exH)
	h, err := hero.Create(ctx, masterDB, &amp;amp;heroInfo.hero)
	if err != nil {
		t.Fatalf(&amp;quot;Should be able to create a hero : %s.&amp;quot;, err)
	}
	if !h.ID.Valid() {
		t.Errorf(&amp;quot;Should generate valid Hero ID, got: %s&amp;quot;, h.ID)
	}
	assertEqualUsers(&amp;amp;exH, h, t)

	// Test the user context value
	ctxValues := ctx.Value(apiContext.KeyValues).(*apiContext.Values)
	HeroID := bson.ObjectIdHex(ctxValues.ID).Hex()
	if *h.CreatedByID != HeroID {
		t.Errorf(&amp;quot;Should create a user by userID: %s, got: %s&amp;quot;, HeroID, *h.CreatedByID)
	}
}

func assertEqualUsers(actual *hero.Hero, expected *hero.Hero, t *testing.T) {
	if actual.Name != expected.Name {
		t.Errorf(&amp;quot;Should create hero Name: %s, but got: %s&amp;quot;, expected.Name, actual.Name)
	}
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you familiar with XUnit style assertions you can just write your own using a function in Golang.&lt;/p&gt;

&lt;h2 id=&#34;go-tooling&#34;&gt;Go Tooling&lt;/h2&gt;

&lt;p&gt;You can easily discover the go tooling by typing &lt;code&gt;go help&lt;/code&gt; in your terminal&lt;/p&gt;

&lt;p&gt;If you like this Blog Post please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A quick look at the Elastic Stack</title>
      <link>https://www.marcelbelmont.com/post/elk-stack-getting-started/</link>
      <pubDate>Sun, 18 Mar 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/elk-stack-getting-started/</guid>
      <description>

&lt;h1 id=&#34;elastic-search-logstash-and-kibana&#34;&gt;Elastic Search, Logstash and Kibana&lt;/h1&gt;

&lt;p&gt;This quick post will get you up and running with the elk stack.&lt;/p&gt;

&lt;p&gt;Please clone my github repository where the scripts I created live and so that you can follow along with the post.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://github.com/jbelmont/elkstack-practice&#34; target=&#34;_blank&#34;&gt;Elkstack Practice&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to generate movies.json then do the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go run main.go &amp;gt; movies.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to generate tags.json then do the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd tags; go run main.go &amp;gt; tag.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install elasticsearch via homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install kibana via homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install logstash via homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install logstash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure that all the services are up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start kibana
brew services start elasticsearch
brew services start logstash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see all the services up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure that the elastic stack is up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X GET 127.0.0.1:9200
{
  &amp;quot;name&amp;quot; : &amp;quot;M43AiJz&amp;quot;,
  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch_jean-marcelbelmont&amp;quot;,
  &amp;quot;cluster_uuid&amp;quot; : &amp;quot;8dHbumffQ3iAOUU32Sx1Jw&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;6.2.2&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;10b1edd&amp;quot;,
    &amp;quot;build_date&amp;quot; : &amp;quot;2018-02-16T19:01:30.685723Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;7.2.1&amp;quot;,
    &amp;quot;minimum_wire_compatibility_version&amp;quot; : &amp;quot;5.6.0&amp;quot;,
    &amp;quot;minimum_index_compatibility_version&amp;quot; : &amp;quot;5.0.0&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see all the indices available with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X GET 127.0.0.1:9200/_cat/indices?v
health status index                           uuid                   pri rep docs.count docs.deleted store.size pri.store.size
yellow open   logstash-2017.05.04             hfY9yL1vTt-IQGE8G591VQ   5   1      16762            0      7.1mb          7.1mb
green  open   .monitoring-es-6-2018.03.18     FWPFXqVBTWmt84HfT4-_Pw   1   0       9903            0      5.7mb          5.7mb
yellow open   logstash-2017.05.02             T6DtDxYJQEm_rwaXg_YLfA   5   1      16278            0        7mb            7mb
green  open   .monitoring-kibana-6-2018.03.18 -tr0EU_0T16tskWdvbGBmg   1   0        314            0    197.5kb        197.5kb
green  open   .triggered_watches              zcs8Nqi2SQ6sUVI2TsBTUg   1   0          0            0     16.2kb         16.2kb
yellow open   app                             oRwQ4n5aSOqFZ_sWPg_iuA   5   1          1            0      5.4kb          5.4kb
yellow open   tags                            CY18aLQuQt-VsLZDce2kZw   5   1       1296            0    342.4kb        342.4kb
yellow open   movies                          141JB-VbTxylwb6IFP6JKA   5   1       9125            0      1.3mb          1.3mb
yellow open   logstash-2017.04.30             TH83PAHZTL6utR_wgxXU9A   5   1      14166            0      6.3mb          6.3mb
yellow open   ratings                         4QXKvkNsTmGVayapswxwcA   5   1     100004            0     13.4mb         13.4mb
green  open   .watches                        XMyhvohjTiSj1sG-ek97nw   1   0          6            0     33.3kb         33.3kb
yellow open   logstash-2017.05.01             8Cs8mEyXSuW_jTQXdUXubg   5   1      15948            0      6.9mb          6.9mb
yellow open   logs                            lXA5H-V_QSOrySGg6r6R1Q   5   1          1            0      5.8kb          5.8kb
yellow open   logstash-2017.05.05             e1hwj1ddQDK69ZmKaRFi5A   5   1      18646            0      7.7mb          7.7mb
yellow open   testindex                       RaI2XDStSBqDEz-jgl-5RQ   3   1          0            0       783b           783b
green  open   .watcher-history-7-2018.03.18   mfe3zaV3Qvib5XLPBA1W0A   1   0        502            0    730.4kb        730.4kb
green  open   .monitoring-alerts-6            IdSXd-D9RNqlGYXcWThGiA   1   0          1            0      6.1kb          6.1kb
yellow open   shakespeare                     EjHjJW8WTpCe4ZyeOhAJXA   5   1     111396            0     21.6mb         21.6mb
green  open   .kibana                         aZ2Fhv-PSsOf5BUTlDdhkw   1   0        143            1    142.5kb        142.5kb
yellow open   logstash-2017.05.03             nklpkzxxSRCWOL990fD2Qg   5   1      21172            0      9.3mb          9.3mb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can tell there is a list of indices here&lt;/p&gt;

&lt;p&gt;We will add some movies via the go script I created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X PUT -H &amp;quot;Content-Type: application/json&amp;quot; 127.0.0.1:9200/_bulk?pretty --data-binary @movies.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This imports movies json file into elastic&lt;/p&gt;

&lt;p&gt;Here we will create a new movie entry to movie index:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; 127.0.0.1:9200/movies/movie/180895/_update -d &#39;
{
  &amp;quot;doc&amp;quot; : {
    &amp;quot;title&amp;quot;: &amp;quot;BoneHead Man&amp;quot;
  }
}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example of using filters in elastic search:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X GET -H &#39;Content-Type: application/json&#39; &#39;127.0.0.1:9200/logstash-2017.05.04/_search?size=0&amp;amp;pretty&#39; -d &#39;
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;match&amp;quot;: {
    &amp;quot;agent&amp;quot;: &amp;quot;Googlebot&amp;quot;
   }
},
  &amp;quot;aggs&amp;quot;: {
    &amp;quot;timestamp&amp;quot;: {
      &amp;quot;date_histogram&amp;quot;: {
        &amp;quot;field&amp;quot;: &amp;quot;@timestamp&amp;quot;, &amp;quot;interval&amp;quot;: &amp;quot;minute&amp;quot;
      }
    }
  }
}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query will query and match via a user agent of &lt;code&gt;Googlebot&lt;/code&gt; and will do an aggregation based on timestamp and use an interval of a minute&lt;/p&gt;

&lt;p&gt;Instead of using &lt;code&gt;curl&lt;/code&gt; you can use the Kibana Dashboard to help you do both queries and create indices and list indices and much more&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/kibana-dev-tools.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice here that I clicked on the &lt;code&gt;Dev Tools&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;You get autocomplete functionality in the Dev tools and many other features.&lt;/p&gt;

&lt;p&gt;You can add more functionality to elastic search by installing the x-pack and you can do the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elasticsearch-plugin install x-pack&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here are some more recommended plugins to install:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elasticsearch-plugin install ingest-user-agent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elasticsearch-plugin install ingest-geoip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is a copy of my &lt;code&gt;elasticsearch.yml&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# ======================== Elasticsearch Configuration =========================
#
# NOTE: Elasticsearch comes with reasonable defaults for most settings.
#       Before you set out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please consult the documentation for further information on configuration options:
# https://www.elastic.co/guide/en/elasticsearch/reference/index.html
#
# ---------------------------------- Cluster -----------------------------------
#
# Use a descriptive name for your cluster:
#
cluster.name: elasticsearch_jean-marcelbelmont
#
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
node.name: node-1
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# ----------------------------------- Paths ------------------------------------
#
# Path to directory where to store the data (separate multiple locations by comma):
#
path.data: /usr/local/var/lib/elasticsearch/
#
# Path to log files:
#
path.logs: /usr/local/var/log/elasticsearch/
#
# ----------------------------------- Memory -----------------------------------
#
# Lock the memory on startup:
#
#bootstrap.memory_lock: true
#
# Make sure that the heap size is set to about half the memory available
# on the system and that the owner of the process is allowed to use this
# limit.
#
# Elasticsearch performs poorly when the system is swapping the memory.
#
# ---------------------------------- Network -----------------------------------
#
# Set the bind address to a specific IP (IPv4 or IPv6):
#
#network.host: 192.168.0.1
#
# Set a custom port for HTTP:
#
#http.port: 9200
#
# For more information, consult the network module documentation.
#
# --------------------------------- Discovery ----------------------------------
#
# Pass an initial list of hosts to perform discovery when new node is started:
# The default list of hosts is [&amp;quot;127.0.0.1&amp;quot;, &amp;quot;[::1]&amp;quot;]
#
#discovery.zen.ping.unicast.hosts: [&amp;quot;host1&amp;quot;, &amp;quot;host2&amp;quot;]
#
# Prevent the &amp;quot;split brain&amp;quot; by configuring the majority of nodes (total number of master-eligible nodes / 2 + 1):
#
#discovery.zen.minimum_master_nodes: 
#
# For more information, consult the zen discovery module documentation.
#
# ---------------------------------- Gateway -----------------------------------
#
# Block initial recovery after a full cluster restart until N nodes are started:
#
#gateway.recover_after_nodes: 3
#
# For more information, consult the gateway module documentation.
#
# ---------------------------------- Various -----------------------------------
#
# Require explicit names when deleting indices:
#
#action.destructive_requires_name: true

xpack.security.enabled: false

node.max_local_storage_nodes: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should also consider adding filebeat to the elastic search and you can add it with the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install filebeat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is my configuration file for &lt;code&gt;filebeat.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;###################### Filebeat Configuration Example #########################

# This file is an example configuration file highlighting only the most common
# options. The filebeat.reference.yml file from the same directory contains all the
# supported options with more comments. You can use it as a reference.
#
# You can find the full configuration reference here:
# https://www.elastic.co/guide/en/beats/filebeat/index.html

# For more available modules and options, please see the filebeat.reference.yml sample
# configuration file.

#=========================== Filebeat prospectors =============================

filebeat.prospectors:

# Each - is a prospector. Most options can be set at the prospector level, so
# you can use different prospectors for various configurations.
# Below are the prospector specific configurations.

- type: log

  # Change to true to enable this prospector configuration.
  enabled: false

  # Paths that should be crawled and fetched. Glob based paths.
  paths:
    - /var/log/*.log
    #- c:\programdata\elasticsearch\logs\*

  # Exclude lines. A list of regular expressions to match. It drops the lines that are
  # matching any regular expression from the list.
  #exclude_lines: [&#39;^DBG&#39;]

  # Include lines. A list of regular expressions to match. It exports the lines that are
  # matching any regular expression from the list.
  #include_lines: [&#39;^ERR&#39;, &#39;^WARN&#39;]

  # Exclude files. A list of regular expressions to match. Filebeat drops the files that
  # are matching any regular expression from the list. By default, no files are dropped.
  #exclude_files: [&#39;.gz$&#39;]

  # Optional additional fields. These fields can be freely picked
  # to add additional information to the crawled log files for filtering
  #fields:
  #  level: debug
  #  review: 1

  ### Multiline options

  # Mutiline can be used for log messages spanning multiple lines. This is common
  # for Java Stack Traces or C-Line Continuation

  # The regexp Pattern that has to be matched. The example pattern matches all lines starting with [
  #multiline.pattern: ^\[

  # Defines if the pattern set under pattern should be negated or not. Default is false.
  #multiline.negate: false

  # Match can be set to &amp;quot;after&amp;quot; or &amp;quot;before&amp;quot;. It is used to define if lines should be append to a pattern
  # that was (not) matched before or after or as long as a pattern is not matched based on negate.
  # Note: After is the equivalent to previous and before is the equivalent to to next in Logstash
  #multiline.match: after


#============================= Filebeat modules ===============================

filebeat.config.modules:
  # Glob pattern for configuration loading
  path: ${path.config}/modules.d/*.yml

  # Set to true to enable config reloading
  reload.enabled: false

  # Period on which files under path should be checked for changes
  #reload.period: 10s

#==================== Elasticsearch template setting ==========================

setup.template.settings:
  index.number_of_shards: 3
  #index.codec: best_compression
  #_source.enabled: false

#================================ General =====================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
#name:

# The tags of the shipper are included in their own field with each
# transaction published.
#tags: [&amp;quot;service-X&amp;quot;, &amp;quot;web-tier&amp;quot;]

# Optional fields that you can specify to add additional information to the
# output.
#fields:
#  env: staging


#============================== Dashboards =====================================
# These settings control loading the sample dashboards to the Kibana index. Loading
# the dashboards is disabled by default and can be enabled either by setting the
# options here, or by using the `-setup` CLI flag or the `setup` command.
#setup.dashboards.enabled: false

# The URL from where to download the dashboards archive. By default this URL
# has a value which is computed based on the Beat name and version. For released
# versions, this URL points to the dashboard archive on the artifacts.elastic.co
# website.
#setup.dashboards.url:

#============================== Kibana =====================================

# Starting with Beats version 6.0.0, the dashboards are loaded via the Kibana API.
# This requires a Kibana endpoint configuration.
setup.kibana:

  # Kibana Host
  # Scheme and port can be left out and will be set to the default (http and 5601)
  # In case you specify and additional path, the scheme is required: http://localhost:5601/path
  # IPv6 addresses should always be defined as: https://[2001:db8::1]:5601
  host: &amp;quot;localhost:5601&amp;quot;

#============================= Elastic Cloud ==================================

# These settings simplify using filebeat with the Elastic Cloud (https://cloud.elastic.co/).

# The cloud.id setting overwrites the `output.elasticsearch.hosts` and
# `setup.kibana.host` options.
# You can find the `cloud.id` in the Elastic Cloud web UI.
#cloud.id:

# The cloud.auth setting overwrites the `output.elasticsearch.username` and
# `output.elasticsearch.password` settings. The format is `&amp;lt;user&amp;gt;:&amp;lt;pass&amp;gt;`.
#cloud.auth:

#================================ Outputs =====================================

# Configure what output to use when sending the data collected by the beat.

#-------------------------- Elasticsearch output ------------------------------
output.elasticsearch:
  # Array of hosts to connect to.
  hosts: [&amp;quot;localhost:9200&amp;quot;]

  # Optional protocol and basic auth credentials.
  #protocol: &amp;quot;https&amp;quot;
  #username: &amp;quot;elastic&amp;quot;
  #password: &amp;quot;changeme&amp;quot;

#----------------------------- Logstash output --------------------------------
#output.logstash:
  # The Logstash hosts
  #hosts: [&amp;quot;localhost:5044&amp;quot;]

  # Optional SSL. By default is off.
  # List of root certificates for HTTPS server verifications
  #ssl.certificate_authorities: [&amp;quot;/etc/pki/root/ca.pem&amp;quot;]

  # Certificate for SSL client authentication
  #ssl.certificate: &amp;quot;/etc/pki/client/cert.pem&amp;quot;

  # Client Certificate Key
  #ssl.key: &amp;quot;/etc/pki/client/cert.key&amp;quot;

#================================ Logging =====================================

# Sets log level. The default log level is info.
# Available log levels are: error, warning, info, debug
#logging.level: debug

# At debug level, you can selectively enable logging only for some components.
# To enable all selectors use [&amp;quot;*&amp;quot;]. Examples of other selectors are &amp;quot;beat&amp;quot;,
# &amp;quot;publish&amp;quot;, &amp;quot;service&amp;quot;.
#logging.selectors: [&amp;quot;*&amp;quot;]

#============================== Xpack Monitoring ===============================
# filebeat can export internal metrics to a central Elasticsearch monitoring
# cluster.  This requires xpack monitoring to be enabled in Elasticsearch.  The
# reporting is disabled by default.

# Set to true to enable the monitoring reporter.
#xpack.monitoring.enabled: false

# Uncomment to send the metrics to Elasticsearch. Most settings from the
# Elasticsearch output are accepted here as well. Any setting that is not set is
# automatically inherited from the Elasticsearch output configuration, so if you
# have the Elasticsearch output configured, you can simply uncomment the
# following line.
#xpack.monitoring.elasticsearch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will also need to configure &lt;code&gt;logstash.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here is my configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;input {
	file {
		path =&amp;gt; &amp;quot;/Users/jean-marcelbelmont/elk/access_log&amp;quot;
		start_position =&amp;gt; &amp;quot;beginning&amp;quot;
		ignore_older =&amp;gt; 0
	}
}

filter {
	grok {
		match =&amp;gt; { &amp;quot;message&amp;quot; =&amp;gt; &amp;quot;%{COMBINEDAPACHELOG}&amp;quot; }
	}
	date {
		match =&amp;gt; [ &amp;quot;timestamp&amp;quot;, &amp;quot;dd/MMM/yyyy:HH:mm:ss Z&amp;quot; ]
	}
}

output {
	elasticsearch {
		hosts =&amp;gt; [ &amp;quot;localhost:9200&amp;quot; ]
	}
	stdout {
		codec =&amp;gt; rubydebug
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I spin up logstash with my configuration file: &lt;code&gt;sudo logstash -f /etc/logstash/conf.d/logstash.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I would highly suggest you check out &lt;a href=&#34;https://www.udemy.com/elasticsearch-6-and-elastic-stack-in-depth-and-hands-on&#34; target=&#34;_blank&#34;&gt;Frank Kanes Udemy Course on the Elastic Stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Api Testing</title>
      <link>https://www.marcelbelmont.com/post/api-testing/</link>
      <pubDate>Sun, 04 Feb 2018 20:21:03 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/api-testing/</guid>
      <description>

&lt;h1 id=&#34;restful-api-testing&#34;&gt;Restful API Testing&lt;/h1&gt;

&lt;p&gt;API testing is a necessary task to do while building APIs.&lt;/p&gt;

&lt;p&gt;Instead of using a browser or typing into a UI and clicking buttons, you can test APIs using tools such as &lt;a href=&#34;https://curl.haxx.se/&#34; target=&#34;_blank&#34;&gt;Curl&lt;/a&gt; and &lt;a href=&#34;https://www.getpostman.com/&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using a Rest Client you can make Rest calls such as for &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&#34; target=&#34;_blank&#34;&gt;HTTP Verbs&lt;/a&gt; such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&#34; target=&#34;_blank&#34;&gt;GET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&#34; target=&#34;_blank&#34;&gt;POST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&#34; target=&#34;_blank&#34;&gt;PUT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&#34; target=&#34;_blank&#34;&gt;DELETE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&#34; target=&#34;_blank&#34;&gt;PATCH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we test an API, we deal with &lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/XML&#34; target=&#34;_blank&#34;&gt;XML&lt;/a&gt;, and &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_service&#34; target=&#34;_blank&#34;&gt;Web Services&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;3rd-party-apis&#34;&gt;3rd Party APIs&lt;/h2&gt;

&lt;p&gt;Here is a list of 3rd Party APIs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/apis-explorer/&#34; target=&#34;_blank&#34;&gt;Google APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.yahoo.com/everything.html&#34; target=&#34;_blank&#34;&gt;Yahoo APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.facebook.com/&#34; target=&#34;_blank&#34;&gt;Facebook APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stripe.com/docs/api&#34; target=&#34;_blank&#34;&gt;Stripe APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.amazon.com/services-and-apis&#34; target=&#34;_blank&#34;&gt;Amazon APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.walmart.com/#/home&#34; target=&#34;_blank&#34;&gt;Walmart APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.github.com/v3/&#34; target=&#34;_blank&#34;&gt;Github APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://www.programmableweb.com/&#34; target=&#34;_blank&#34;&gt;Programmable Web&lt;/a&gt; to get a complete list of 3rd Party APIs you can utilize&lt;/p&gt;

&lt;h2 id=&#34;testing-restful-apis&#34;&gt;Testing Restful APIs&lt;/h2&gt;

&lt;p&gt;You can utilize many different types of tools to test APIs such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://curl.haxx.se/&#34; target=&#34;_blank&#34;&gt;Curl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.getpostman.com/&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://httpie.org/&#34; target=&#34;_blank&#34;&gt;HTTPie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://insomnia.rest/&#34; target=&#34;_blank&#34;&gt;Insomnia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Telnet&#34; target=&#34;_blank&#34;&gt;Telnet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are other Rest Clients you can use I just listed a few here&lt;/p&gt;

&lt;h2 id=&#34;postman-rest-client-advantages&#34;&gt;Postman Rest Client Advantages&lt;/h2&gt;

&lt;p&gt;I tend to favor Rest Clients like Postman because it helps to automate testing Restful APIs if you utilize some of its advanced features&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/postman-collection.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice here that you can create collection folders that can categorize APIs.&lt;/p&gt;

&lt;p&gt;You can do much more than this however&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/header-variables.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice here that &lt;code&gt;Basic {{encodeCredentials}}&lt;/code&gt; has curly braces around &lt;code&gt;encodeCredentials&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In Postman you surround variables in double curly braces&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/pre-request-script.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;If you want to set variables before the HTTP call goes out than using &lt;a href=&#34;https://www.getpostman.com/docs/postman/scripts/pre_request_scripts&#34; target=&#34;_blank&#34;&gt;Pre-request Script&lt;/a&gt; is what you want&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pre-request scripts are snippets of code associated with a collection request that are executed before the request is sent.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is perfect for use-cases like including the timestamp in the request headers or sending a random alphanumeric string in the URL parameters.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pre-request scripts are written in JavaScript, and the syntax is exactly like that of test scripts except that the response object is not present.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice here that I am using &lt;em&gt;common js&lt;/em&gt; syntax in Postman and in particular &lt;code&gt;require(&#39;btoa&#39;&lt;/code&gt;)` which is using &lt;strong&gt;Postman Sandbox API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find a more complete list in the &lt;a href=&#34;https://www.getpostman.com/docs/postman/scripts/postman_sandbox_api_reference&#34; target=&#34;_blank&#34;&gt;Postman Sandbox API reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also read &lt;a href=&#34;https://www.getpostman.com/docs/postman/scripts/postman_sandbox&#34; target=&#34;_blank&#34;&gt;Postman Sandbox&lt;/a&gt; for other libraries available in Postman Rest Client&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/test-script.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice here that the Test script section is similar to Pre-Request Script&lt;/p&gt;

&lt;p&gt;With Postman you can write and run tests for each request using the JavaScript language.&lt;/p&gt;

&lt;p&gt;But more than that you can set variables in the Test script section that you can save for later use&lt;/p&gt;

&lt;p&gt;Notice here the use of &lt;code&gt;postman.setEnvironmentVariable(&amp;quot;access_token&amp;quot;, token_type + &amp;quot; &amp;quot; + access_token);&lt;/code&gt; to set &lt;strong&gt;access_token&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is really useful because we can save the &lt;strong&gt;access_token&lt;/strong&gt; for other Rest calls&lt;/p&gt;

&lt;p&gt;Instead of manually setting the access token in a variable each day since access tokens tend to expire quickly you can use the tests script section to do that in an automated way.&lt;/p&gt;

&lt;p&gt;Notice that we also wrote a test in the test script section as well&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Parse JSON response
var responseBody = JSON.parse(responseBody);

var access_token = responseBody.access_token;
var token_type = responseBody.token_type;

postman.setEnvironmentVariable(&amp;quot;access_token&amp;quot;, token_type + &amp;quot; &amp;quot; + access_token);

pm.test(&amp;quot;Token Type is Bearer&amp;quot;, function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.token_type).to.eql(&amp;quot;Bearer&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/test-results.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice here we get a passing test since we got an access token from the Paypal API&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/environment.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice here that we set the environment for Paypal here&lt;/p&gt;

&lt;p&gt;Here we can use global variables that can be used per environment&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/global-variables.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Here I greyed out the environment variables for security reasons but you can read more about &lt;a href=&#34;https://www.getpostman.com/docs/postman/environments_and_globals/manage_globals&#34; target=&#34;_blank&#34;&gt;Global Variables at Postman Docs&lt;/a&gt;&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/presets.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Another useful feature in Postman is the Presets for Headers which you can read in the &lt;a href=&#34;https://www.getpostman.com/docs/postman/sending_api_requests/requests&#34; target=&#34;_blank&#34;&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Header Presets are useful if you find yourself reusing a lot of HTTP Header values often and you can simply set a preset to autofill the HTTP headers for you in one click.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/group-edit.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice here that we can use the group edit feature to quickly set header values in key value pairs in the group edit view.&lt;/p&gt;

&lt;p&gt;You can easily go back to the normal view by clicking &lt;code&gt;Key-Value Edit&lt;/code&gt; button again.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/http-verbs.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Postman supports all of the HTTP Verbs in their dropdown menu&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/params.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;You can easily set query string parameters utilizing the params section in postman&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/developer-tools.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice here that we can utilize developer tools in Postman.&lt;/p&gt;

&lt;p&gt;This is useful when you want to debug the &lt;em&gt;Pre-request Script&lt;/em&gt; and &lt;em&gt;Test script&lt;/em&gt; sections in Postman&lt;/p&gt;

&lt;p&gt;You can easily set &lt;code&gt;console.log&lt;/code&gt; statements to debug things.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/collection-runner.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice here that we can run all of the collections utilizing the collection runner.&lt;/p&gt;

&lt;p&gt;You can read more about the &lt;a href=&#34;https://www.getpostman.com/docs/postman/collection_runs/starting_a_collection_run&#34; target=&#34;_blank&#34;&gt;Postman Collection Runner Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can import Postman collections easily and if you have Postman Pro account you can share collections with team members.&lt;/p&gt;

&lt;p&gt;I covered a good amount of features that Postman offers but read the Fine docs in Postman for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile Terminology</title>
      <link>https://www.marcelbelmont.com/post/agile-patterns/</link>
      <pubDate>Sun, 28 Jan 2018 15:48:12 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/agile-patterns/</guid>
      <description>

&lt;h1 id=&#34;table-of-contents&#34;&gt;Table Of Contents:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#12-principles-of-agile-manifesto&#34;&gt;12 Principles of Agile Manifesto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#agile-terminology&#34;&gt;Agile Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sprint-duration&#34;&gt;Sprint Duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sprint-ceremonies&#34;&gt;Sprint Ceremonies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stories,-tasks-and-bugs&#34;&gt;Stories, Tasks and Bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qa&#34;&gt;QA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#user-acceptance-testing&#34;&gt;User Acceptance Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#integration-with-devops&#34;&gt;Integration with DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jira-workflows&#34;&gt;Jira Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;definition-of-ready-and-definition-of-done&#34; target=&#34;_blank&#34;&gt;Definition of Ready and Definition of Done&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;12-principles-of-agile-manifesto&#34;&gt;12 Principles of Agile Manifesto&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Welcome changing requirements, even late in development. Agile processes harness change for the customer&amp;rsquo;s competitive advantage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Business people and developers must work together daily throughout the project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Working software is the primary measure of progress.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Continuous attention to technical excellence and good design enhances agility.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Simplicity&amp;ndash;the art of maximizing the amount of work not done&amp;ndash;is essential.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The best architectures, requirements, and designs emerge from self-organizing teams.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;agile-terminology&#34;&gt;Agile Terminology&lt;/h2&gt;

&lt;p&gt;We will define some common agile terms using &lt;a href=&#34;https://www.agilealliance.org/agile101/agile-glossary/&#34; target=&#34;_blank&#34;&gt;The Agile Alliance Glossary&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;backlog&#34;&gt;Backlog&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/backlog/&#34; target=&#34;_blank&#34;&gt;Backlog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A backlog is a list of features or technical tasks which the team maintains and which, at a given moment, are known to be necessary and sufficient to complete a project or a release:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if an item on the backlog does not contribute to the project&amp;rsquo;s goal, it should be removed&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if at any time a task or feature becomes known that is considered necessary to the project, it should be added to the backlog.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;backlog-grooming&#34;&gt;Backlog Grooming&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/backlog-grooming/&#34; target=&#34;_blank&#34;&gt;Backlog Grooming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Backlog grooming is when the product owner and some, or all, of the rest of the team review items on the backlog to ensure the backlog contains the appropriate items, that they are prioritized, and that the items at the top of the backlog are ready for delivery. This activity occurs on a regular basis and may be an officially scheduled meeting or an ongoing activity.&lt;/p&gt;

&lt;p&gt;Some of the activities that occur during this refinement of the backlog include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;removing user stories that no longer appear relevant&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;creating new user stories in response to newly discovered needs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;re-assessing the relative priority of stories&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;assigning estimates to stories which have yet to receive one&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;correcting estimates in light of newly discovered information&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;splitting user stories which are high priority but too coarse grained to fit in an upcoming iteration&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;burndown-chart&#34;&gt;Burndown Chart&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/burndown-chart/&#34; target=&#34;_blank&#34;&gt;Burndown Chart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The team displays, somewhere on a wall of the project room, a large graph relating the quantity of work remaining (on the vertical axis) and the time elapsed since the start of the project (on the horizontal, showing future as well as past). This constitutes an &amp;ldquo;information radiator&amp;rdquo;, provided it is updated regularly. Two variants exist, depending on whether the amount graphed is for the work remaining in the iteration (&amp;ldquo;sprint burndown&amp;rdquo;) or more commonly the entire project (&amp;ldquo;product burndown&amp;rdquo;).&lt;/p&gt;

&lt;h4 id=&#34;continuous-integration&#34;&gt;Continuous Integration&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/continuous-integration/&#34; target=&#34;_blank&#34;&gt;CI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Teams practicing continuous integration seek two objectives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;minimize the duration and effort required by each integration episode&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;be able to deliver a product version suitable for release at any moment&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In practice, this dual objective requires an integration procedure which is reproducible at the very least, and largely automated. This is achieved through version control tools, team policies and conventions, and tools specifically designed to help achieve continuous integration.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;definition-of-done&#34;&gt;Definition of Done&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/definition-of-done/&#34; target=&#34;_blank&#34;&gt;Definition of Done&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The team agrees on, and displays prominently somewhere in the team room, a list of criteria which must be met before a product increment &amp;ldquo;often a user story&amp;rdquo; is considered &amp;ldquo;done&amp;rdquo;. Failure to meet these criteria at the end of a sprint normally implies that the work should not be counted toward that sprint&amp;rsquo;s velocity.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-ready&#34;&gt;Definition of Ready&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/definition-of-ready/&#34; target=&#34;_blank&#34;&gt;Definition of Ready&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just as completed items which fit the definition of &amp;ldquo;done&amp;rdquo; are said to be &amp;ldquo;DONE-done&amp;rdquo;, items that fit the definition of ready are called &amp;ldquo;READY-ready&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;An etymological note for the terminally curious: this doubling of a word to call attention to something that is &amp;ldquo;really&amp;rdquo; ready or &amp;ldquo;really&amp;rdquo; done (as opposed to merely called ready or done, carelessly, without thinking twice about it) is known as &amp;ldquo;contrastive focus reduplication&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;exploratory-testing&#34;&gt;Exploratory Testing&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/exploratory-testing/&#34; target=&#34;_blank&#34;&gt;Exploratory Testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exploratory testing is, more than strictly speaking a &amp;ldquo;practice,&amp;rdquo; a style or approach to testing software which is often contrasted to &amp;ldquo;scripted testing,&amp;rdquo; and characterized by the following aspects among others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;it emphasizes the tester&amp;rsquo;s autonomy, skill and creativity, much as other Agile practices emphasize these qualities in developers;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it recommends performing various test-related activities (such as test design, test execution, and interpretation of results) in an interleaved manner, throughout the project, rather than in a fixed sequence and at a particular &amp;ldquo;phase&amp;rdquo;;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it emphasizes the mutually supportive nature of these techniques, and the need for a plurality of testing approaches rather than a formal &amp;ldquo;test plan&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;kanban&#34;&gt;Kanban&lt;/h4&gt;

&lt;p&gt;The Kanban Method is a means to design, manage, and improve flow systems for knowledge work. The method also allows organizations to start with their existing workflow and drive evolutionary change. They can do this by visualizing their flow of work, limit work in progress (WIP) and stop starting and start finishing.&lt;/p&gt;

&lt;p&gt;The Kanban Method gets its name from the use of kanban - visual signaling mechanisms to control work in progress for intangible work products.&lt;/p&gt;

&lt;h4 id=&#34;planning-poker&#34;&gt;Planning Poker&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/poker/&#34; target=&#34;_blank&#34;&gt;Planning Poker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A playful approach to estimation, used by many Agile teams.&lt;/p&gt;

&lt;p&gt;The team meets in presence of the customer or Product Owner. Around the table, each team member holds a set of playing cards, bearing numerical values appropriate for points estimation of a user story.&lt;/p&gt;

&lt;p&gt;The Product Owner briefly states the intent and value of a story. Each member of the development team silently picks an estimate and readies the corresponding card, face down. When everyone has taken their pick, the cards are turned face up and the estimates are read aloud.&lt;/p&gt;

&lt;p&gt;The two (or more) team members who gave the high and low estimate justify their reasoning. After brief discussion, the team may seek convergence toward a consensus estimate by playing one or more further rounds.&lt;/p&gt;

&lt;h4 id=&#34;product-owner&#34;&gt;Product Owner&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/product-owner/&#34; target=&#34;_blank&#34;&gt;Product Owner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The product owner is a role on a product development team responsible for managing the product backlog in order to achieve the desired outcome that a product development team seeks to accomplish.  Key activities to accomplish this include:&lt;/p&gt;

&lt;p&gt;Clearly identify and describe product backlog items in order to build a shared understanding of the problem and solution with the product development team
Make decisions regarding the priority of product backlog items in order to deliver maximum outcome with minimum output
Determine whether a product backlog item was satisfactorily delivered
Ensure transparency into the upcoming work of the product development team.&lt;/p&gt;

&lt;h4 id=&#34;test-driven-development-tdd&#34;&gt;Test-Driven Development (TDD)&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/tdd/&#34; target=&#34;_blank&#34;&gt;TDD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;ldquo;Test-driven development&amp;rdquo; refers to a style of programming in which three activities are tightly interwoven: coding, testing (in the form of writing unit tests) and design (in the form of refactoring).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It can be succinctly described by the following set of rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;write a &amp;ldquo;single&amp;rdquo; unit test describing an aspect of the program&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run the test, which should fail because the program lacks that feature&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;write &amp;ldquo;just enough&amp;rdquo; code, the simplest possible, to make the test pass&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;refactor&amp;rdquo; the code until it conforms to the simplicity criteria&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;repeat, &amp;ldquo;accumulating&amp;rdquo; unit tests over time&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;acceptance-testing&#34;&gt;Acceptance Testing&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/acceptance/&#34; target=&#34;_blank&#34;&gt;Acceptance Testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An acceptance test is a formal description of the behavior of a software product, generally expressed as an example or a usage scenario. A number of different notations and approaches have been proposed for such examples or scenarios. In many cases the aim is that it should be possible to automate the execution of such tests by a software tool, either ad-hoc to the development team or off the shelf.&lt;/p&gt;

&lt;p&gt;Similar to a unit test, an acceptance test generally has a binary result, pass or fail. A failure suggests, though does not prove, the presence of a defect in the product.&lt;/p&gt;

&lt;h4 id=&#34;acceptance-test-driven-development-atdd&#34;&gt;Acceptance Test-Driven Development (ATDD)&lt;/h4&gt;

&lt;p&gt;Analogous to test-driven development, Acceptance Test Driven Development (ATDD) involves team members with different perspectives (customer, development, testing) collaborating to write acceptance tests in advance of implementing the corresponding functionality.  The collaborative discussions that occur to generate the acceptance test is often referred to as the three amigos, representing the three perspectives of customer (what problem are we trying to solve?), development (how might we solve this problem?), and testing (what about&amp;hellip;).&lt;/p&gt;

&lt;p&gt;These acceptance tests represent the user&amp;rsquo;s point of view and act as a form of requirements to describe how the system will function, as well as serve as a way of verifying that the system functions as intended. In some cases the team automates the acceptance tests.&lt;/p&gt;

&lt;h4 id=&#34;usability-testing&#34;&gt;Usability Testing&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/usability/&#34; target=&#34;_blank&#34;&gt;Usability Testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usability testing is a long-established, empirical and exploratory technique to answer questions such as &amp;ldquo;how would an end user respond to our software under realistic conditions?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It consists of observing a representative end user interacting with the product, given a goal to reach but no specific instructions for using the product. (For instance, a goal for usability testing of a furniture retailer&amp;rsquo;s Web site might be &amp;ldquo;You&amp;rsquo;ve just moved and need to do something about your two boxes of books; use the site to find a solution.&amp;rdquo;)&lt;/p&gt;

&lt;h4 id=&#34;velocity&#34;&gt;Velocity&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/velocity/&#34; target=&#34;_blank&#34;&gt;Velocity&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the end of each iteration, the team adds up effort estimates associated with user stories that were completed during that iteration. This total is called velocity.&lt;/p&gt;

&lt;p&gt;Knowing velocity, the team can compute (or revise) an estimate of how long the project will take to complete, based on the estimates associated with remaining user stories and assuming that velocity over the remaining iterations will remain approximately the same. This is generally an accurate prediction, even though rarely a precise one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please Read the &lt;a href=&#34;https://www.agilealliance.org/agile101/agile-glossary/&#34; target=&#34;_blank&#34;&gt;Agile Alliance Glossary For More Information&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;sprint-duration&#34;&gt;Sprint Duration&lt;/h2&gt;

&lt;p&gt;The Sprint duration is generall 2 weeks but some shops use a 3 week schedule to lessen burden on all parties.&lt;/p&gt;

&lt;h2 id=&#34;sprint-ceremonies&#34;&gt;Sprint Ceremonies&lt;/h2&gt;

&lt;p&gt;Legend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PO

&lt;ul&gt;
&lt;li&gt;Product Owner&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;UX

&lt;ul&gt;
&lt;li&gt;User Experience&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TL

&lt;ul&gt;
&lt;li&gt;Team Leads&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Ceremony&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Attendees&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Sprint Planning&lt;/td&gt;
&lt;td&gt;Takes place on Day 1 of the sprint. Depending on how much work has been done up front in loading the sprint with stories and tasks this could be a 60-90 minute or much longer. The objective is to finish Day 1 with all team members being 100% allocated and ready to start work on Day 2&lt;/td&gt;
&lt;td&gt;All Team Members&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sprint Retrospective&lt;/td&gt;
&lt;td&gt;To be done on Day 1 or Day 2 of the sprint to review the previous sprint progress and for the teams to state what they think went well and not so well and put in plans to improve.&lt;/td&gt;
&lt;td&gt;All Team Members&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Daily Standups&lt;/td&gt;
&lt;td&gt;To be done daily, preferably before 10am to allow teams to gather and review work they’re doing and any roadblocks.  This is an opportunity to review the sprint burndown and status of the stories and tasks and to ensure the team are heading in the right direction. The PO and Tech Lead are to help respond to questions the team might have to ensure they are delivering what is planned.&lt;/td&gt;
&lt;td&gt;All Team Members&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Pre Grooming&lt;/td&gt;
&lt;td&gt;This is a review of upcoming stories or stories in the backlog.  Its a review session to understand whether or not there is enough information contained within the story to “point” the story. If it is found a story does not have enough information, the Product Owner, UX Lead or Tech Lead will need to own next steps to provide more information for the team to apply story points before it goes to the sprint for development. The frequency of this meeting during the sprint is down to the team to own.&lt;/td&gt;
&lt;td&gt;PO, UX, TL&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Backlog Grooming (Pointing)&lt;/td&gt;
&lt;td&gt;The entire product backlog needs to be groomed, however due to its size and stories being added over time it will be impossible to have groomed the whole backlog.  The aim of this ceremony is to have groomed the stories being lined up for the next sprint and others that are stack ranked and in priority order. This session can generally only be done if pre grooming has been done first and it is confirmed all the right information exists for a developer to confidently point a story. The frequency of this meeting during the sprint is down to the team to own.&lt;/td&gt;
&lt;td&gt;All Team Members&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Demo Day&lt;/td&gt;
&lt;td&gt;This is the final ceremony of the sprint and is a opportunity for the developer to demo the functionality they have built to the product owners and other interested parties. The closing of this ceremony can then lead to business user acceptance testing.&lt;/td&gt;
&lt;td&gt;All Team Members&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;stories-tasks-and-bugs&#34;&gt;Stories, Tasks and Bugs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Stories are to be “pointed” as part of the backlog grooming process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each team should advise on their planned velocity in the upcoming sprint.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Initially the sprint should be loaded with the planned capacity in points.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;During sprint planning (or days leading up to) tasks are to be added to each story in the planned sprint.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hours of effort are to be assigned to each task.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;During sprint planning a review of the teams capacity in hours should be undertaken alongside the planned work and before the end of sprint planning all team members should be set to 100% capacity.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When bugs are planned to be fixed in the sprint (as agreed during sprint planned) the bugs should also have tasks with estimated hours applied to them to track the work effort.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Containerized Golang applications with Docker and Vue.js</title>
      <link>https://www.marcelbelmont.com/talk/trilug-talk/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/talk/trilug-talk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Page Object Pattern</title>
      <link>https://www.marcelbelmont.com/post/page-object-pattern/</link>
      <pubDate>Wed, 06 Dec 2017 10:09:18 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/page-object-pattern/</guid>
      <description>

&lt;h1 id=&#34;page-objects&#34;&gt;Page Objects&lt;/h1&gt;

&lt;h2 id=&#34;what-are-page-objects&#34;&gt;What are Page Objects?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/bliki/PageObject.html&#34; target=&#34;_blank&#34;&gt;Page Object Blog Post by Martin Fowler&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A page object wraps an HTML page, or fragment, with an application-specific API, allowing you to manipulate page elements without digging around in the HTML.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Page objects are a way to describe UI interactions in your page with application specific terminology instead of HTML specific language.&lt;/p&gt;

&lt;p&gt;This in turn helps you write tests that are more clear and also helps you be more dry (Don&amp;rsquo;t Repeat yourself) because you can reuse your page objects in other acceptance/end-to-end tests&lt;/p&gt;

&lt;h2 id=&#34;normal-html-page-structure&#34;&gt;Normal HTML Page Structure&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;page__container&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;page_container-list&amp;quot;&amp;gt;
        &amp;lt;li&amp;gt;John Rambo&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Chuck Norris&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;John Shaft&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here using ember acceptance testing syntax we can grab the list of names: &lt;code&gt;find(&#39;.page_container-list&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The problem with this is that it is not as descriptive as it could be&lt;/p&gt;

&lt;h2 id=&#34;page-object-pattern&#34;&gt;Page Object Pattern&lt;/h2&gt;

&lt;p&gt;Here is a sample Page Object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const usersList = {
    actionHeroes() {
        return find(&#39;.page_container-list&#39;);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can grab the list of action heroes like this: &lt;code&gt;usersList.actionHeroes()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Suppose we wanted to get the total count of action heroes, we could use the ember acceptance testing syntax as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;find(&#39;.page_container-list&#39;).length
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but instead we can create a function that returns the total count of superheroes using Page Object Design Pattern like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const usersList = {
    actionHeroes() {
        return find(&#39;.page_container-list&#39;);
    },
    totalNumberOfActionHeroes() {
        return find(&#39;.page_container-list&#39;).length;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so now using our Page Object pattern we can grab the list of superheroes as follows: &lt;code&gt;usersList.totalNumberOfActionHeroes();&lt;/code&gt; which is more descriptive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additionally this helps make our acceptance tests more reusable&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;page-object-methods&#34;&gt;Page Object Methods&lt;/h2&gt;

&lt;p&gt;Page Objects can also contain UI interaction flows.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;Say User A logs into your app and then wants to go to his settings page to update his login information.&lt;/p&gt;

&lt;p&gt;Using the Page Object Pattern we can construct the following Page Object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const UserLogin = {
    login({
        username,
        password
    }) {
        return authenticateToSystem(username, password);
    },
    visitSettings() {
        return visit(&#39;/settings&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can just do &lt;code&gt;UserLogin.login(&#39;jbelmont&#39;, &#39;somepassword&#39;).visitSettings();&lt;/code&gt; and both login and go to the User Settings Page.&lt;/p&gt;

&lt;h4 id=&#34;page-object-method-scenario&#34;&gt;Page Object Method Scenario&lt;/h4&gt;

&lt;p&gt;Say that we want to update the username of a specific user in a possible admin list&lt;/p&gt;

&lt;p&gt;Using Page Object pattern we could do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const AdminPage = {
    login({
        username,
        password
    }) {
        return authenticateToSystem(username, password);
    },
    visitAdmin(adminToken) {
        return visit(adminToken, &#39;/admin&#39;);
    },
    updateAdminUsername(username) {
        this._setInput(username);
        this._saveUsername(adminToken, username);
    },
    _setInput(newUserName) {
        document.querySelector(&#39;.admin__input&#39;).value = newUserName;
    },
    _saveUsername(adminToken, username) {
        db.saveNewUsername(adminToken, username);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now with this possible Page Object we could do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;AdminPage
    .login({
        username: &#39;cnorris&#39;,
        password: &#39;highkicker&#39;
    })
    visitAdmin(&#39;someAdminToken1234&#39;)
    .updateAdminUsername(&#39;jrambo&#39;, &#39;someAdminToken1234&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this a contrived example and not necessarily a secure way to update a username, it does illustrate the power of Page Objects!&lt;/p&gt;

&lt;h2 id=&#34;page-object-libraries&#34;&gt;Page Object Libraries&lt;/h2&gt;

&lt;p&gt;End to end testing libraries tend to have a page object pattern that is baked into them.&lt;/p&gt;

&lt;p&gt;Here is a list of End to End Testing libraries that have them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nightwatchjs/nightwatch/wiki/Page-Object-API&#34; target=&#34;_blank&#34;&gt;Nightwatchjs Page Object API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webdriver.io/guide/testrunner/pageobjects.html&#34; target=&#34;_blank&#34;&gt;Webdriverio Page Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/PageObjects&#34; target=&#34;_blank&#34;&gt;Selenium Page Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you like this post then follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compare and Contrast Golang and Nodejs for Commandline Apps</title>
      <link>https://www.marcelbelmont.com/post/compare-and-contrast-golang-and-nodejs-for-commandline-apps/</link>
      <pubDate>Tue, 10 Oct 2017 18:49:29 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/compare-and-contrast-golang-and-nodejs-for-commandline-apps/</guid>
      <description>

&lt;h1 id=&#34;command-line-applications&#34;&gt;Command Line Applications&lt;/h1&gt;

&lt;p&gt;Building command line applications is a refreshing change to building UIs.
In this blog post I go over briefly my thoughts on building commandline apps with Node.js and Golang&lt;/p&gt;

&lt;h2 id=&#34;node-js-commandline&#34;&gt;Node.js CommandLine&lt;/h2&gt;

&lt;p&gt;First off I did not use a &lt;code&gt;commander.js&lt;/code&gt; or any third party libraries to make my contrived application. I used vanilla node.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;

const process = require(&#39;process&#39;);
const fs = require(&#39;fs&#39;);

const lib = require(&#39;../lib&#39;);
const utf8 = require(&#39;../constants&#39;).utf8;

const args = process.argv.slice(2);

const tsvOrCsv = args.some(arg =&amp;gt; {
  return arg === &#39;--tsv-file&#39; || arg === &#39;--csv-file&#39;;
});

if (!tsvOrCsv) {
  lib.UsageMessage();
  process.exit(1);
}

const csvIndex = args.findIndex(arg =&amp;gt; arg === &#39;--csv-file&#39;);
let csv, tsv;
if (csvIndex &amp;gt; -1) {
  csv  = args.slice(csvIndex);
}

const tsvIndex = args.findIndex(arg =&amp;gt; arg === &#39;--tsv-file&#39;);
if (tsvIndex &amp;gt; -1) {
  tsv = args.slice(tsvIndex);
}
if (csv) {
  const csvPath = csv[1];
  const fileContents = [];
  fileReader(csvPath, function(err, data) {
    if (err) throw err;
    const [
      language,
      frequency
    ] = data.split(&#39;,&#39;);
    console.log(language);
    console.log(frequency);
  });
} else if (tsv) {
  const tsvPath = tsv[1];
  console.log(tsvPath);
} else {
  lib.UsageMessage();
  process.exit(1);
}

function fileReader(filePath, cb) {
  fs.readFile(`${__dirname}/../${filePath}`, utf8, function(err, data) {
    if (err) return cb(err);
    cb(null, data);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a snippet of code I used for node.js on one hand you can parse flags relatively easy but there is niceties missing.&lt;/p&gt;

&lt;p&gt;In node.js you can just use &lt;code&gt;process.argv&lt;/code&gt; and parse out the flags that were passed in via the commmandline&lt;/p&gt;

&lt;h2 id=&#34;golang-commandline-application&#34;&gt;Golang CommandLine application&lt;/h2&gt;

&lt;p&gt;Golang has many things baked into their standard library that make building command line applications very easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;encoding/csv&amp;quot;
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;
)

func convertToJSON(f *os.File, isTSVFile bool) {
	rows := make([]map[string]string, 0)
	var columns = []string{&amp;quot;language&amp;quot;, &amp;quot;frequency&amp;quot;}
	// Create a new reader.
	csvReader := csv.NewReader(bufio.NewReader(f))
	csvReader.TrimLeadingSpace = true
	if isTSVFile {
		csvReader.Comma = &#39;\t&#39; // Use tab-delimited instead of comma
	}
	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			fmt.Println(err)
		}
		row := make(map[string]string)
		for i, n := range columns {
			row[n] = record[i]
		}
		rows = append(rows, row)
	}
	data, err := json.MarshalIndent(&amp;amp;rows, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		fmt.Println(err)
	}
	// print the reformatted struct as JSON
	fmt.Printf(&amp;quot;%s\n&amp;quot;, data)
}

func main() {
	csvPtr := flag.String(&amp;quot;csv-file&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;CSV File to parse. (Required)&amp;quot;)
	tsvPtr := flag.String(&amp;quot;tsv-file&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;TSV File to parse. (Required)&amp;quot;)
	flag.Parse()

	if *csvPtr == &amp;quot;&amp;quot; &amp;amp;&amp;amp; *tsvPtr == &amp;quot;&amp;quot; {
		flag.PrintDefaults()
		os.Exit(1)
	} else if *csvPtr != &amp;quot;&amp;quot; {
		f, err := os.Open(*csvPtr)
		if err != nil {
			fmt.Println(err)
		}
		defer f.Close()
		convertToJSON(f, false)
	} else {
		f, err := os.Open(*tsvPtr)
		if err != nil {
			fmt.Println(err)
		}
		defer f.Close()
		convertToJSON(f, true)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice here that I just used the &lt;code&gt;flag&lt;/code&gt; builtin library and it does the job of parsing command line flags.&lt;/p&gt;

&lt;p&gt;Also dealing with asychronous code in &lt;code&gt;Golang&lt;/code&gt; is much easier in my opinion.&lt;/p&gt;

&lt;p&gt;There are many design patterns baked into Golang that make writing commandline applications a joy to work with.&lt;/p&gt;

&lt;h2 id=&#34;quick-summary&#34;&gt;Quick summary&lt;/h2&gt;

&lt;p&gt;You can easily use either node.js or &lt;code&gt;Golang&lt;/code&gt; but consider writing a command line application in Go.&lt;/p&gt;

&lt;h2 id=&#34;link-to-golang-workshop&#34;&gt;Link to Golang Workshop&lt;/h2&gt;

&lt;p&gt;I wrote a &lt;a href=&#34;https://github.com/jbelmont/golang-workshop&#34; target=&#34;_blank&#34;&gt;Golang workshop&lt;/a&gt; which you can check out if you aren&amp;rsquo;t familiar with Go.&lt;/p&gt;

&lt;p&gt;Follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont&lt;/a&gt; if you like this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A deep dive into Data Visualization, D3.js and SVG</title>
      <link>https://www.marcelbelmont.com/post/data-visualization-and-d3/</link>
      <pubDate>Sun, 24 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/data-visualization-and-d3/</guid>
      <description>

&lt;h1 id=&#34;data-visualization-and-d3-js&#34;&gt;Data Visualization and D3.js&lt;/h1&gt;

&lt;h2 id=&#34;sections&#34;&gt;Sections:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-data-visualization&#34;&gt;What is Data Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#types-of-visual-diagrams&#34;&gt;Types of Visual Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#d3-api-docs&#34;&gt;D3 API Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#list-of-d3-modules&#34;&gt;List of D3 Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#selections-and-data&#34;&gt;Selections and Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#enter-and-append&#34;&gt;Enter and Append&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#svg-basic-shapes&#34;&gt;SVG Basic Shapes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scales-and-axis&#34;&gt;Scales and Axis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#enter-and-update&#34;&gt;Enter and Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exit-and-merge&#34;&gt;Exit and Merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transitions&#34;&gt;Transitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#force-layout&#34;&gt;Force Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#d3-and-vuejs&#34;&gt;D3 and Vuejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-visualization-best-practices&#34;&gt;Data Visualization Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#general-data-visualization-resources&#34;&gt;General Data Visualization Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-visualization-experts-and-companies&#34;&gt;Data Visualization Experts and Companies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gitbook-link&#34;&gt;GitBook Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#github-repo&#34;&gt;Github Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-data-visualization&#34;&gt;What is Data Visualization&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Data visualization is the presentation of data in a pictorial or graphical format.&lt;/li&gt;
&lt;li&gt;It enables decision makers to see analytics presented visually&lt;/li&gt;
&lt;li&gt;Decision makers can then grasp difficult concepts or identify new patterns.&lt;/li&gt;
&lt;li&gt;With interactive visualization, you can take concepts further and teach concepts better.

&lt;ul&gt;
&lt;li&gt;You can drill down into charts and graphs for more detail,&lt;/li&gt;
&lt;li&gt;and interactively change what data you see and how it’s processed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;types-of-visual-diagrams&#34;&gt;Types of Visual Diagrams&lt;/h4&gt;

&lt;p&gt;A diagram is a symbolic representation of information according to some visualization technique.&lt;/p&gt;

&lt;h4 id=&#34;bar-charts&#34;&gt;Bar Charts&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bar_chart&#34; target=&#34;_blank&#34;&gt;Bar Chart&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bar chart or bar graph is a chart or graph that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.&lt;/li&gt;
&lt;li&gt;The bars can be plotted vertically or horizontally.&lt;/li&gt;
&lt;li&gt;A vertical bar chart is sometimes called a line graph.&lt;/li&gt;
&lt;/ul&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/bar-chart.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h4 id=&#34;line-charts&#34;&gt;Line Charts&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Line_chart&#34; target=&#34;_blank&#34;&gt;Line Chart&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A line chart or line graph is a type of chart which displays information as a series of data points called &amp;lsquo;markers&amp;rsquo; connected by straight line segments.&lt;/li&gt;
&lt;li&gt;It is a basic type of chart common in many fields.&lt;/li&gt;
&lt;li&gt;It is similar to a scatter plot except that the measurement points are ordered (typically by their x-axis value) and joined with straight line segments.&lt;/li&gt;
&lt;li&gt;A line chart is often used to visualize a trend in data over intervals of time – a time series – thus the line is often drawn chronologically.&lt;/li&gt;
&lt;/ul&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/line-chart.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h4 id=&#34;scatter-plots&#34;&gt;Scatter Plots&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Scatter_plot&#34; target=&#34;_blank&#34;&gt;Scatter Plots&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A scatter plot (also called a scatter graph, scatter chart, scattergram, or scatter diagram) is a type of plot or mathematical diagram using Cartesian coordinates to display values for typically two variables for a set of data.&lt;/li&gt;
&lt;li&gt;If the points are color-coded, one additional variable can be displayed.&lt;/li&gt;
&lt;li&gt;The data is displayed as a collection of points, each having the value of one variable determining the position on the horizontal axis and the value of the other variable determining the position on the vertical axis&lt;/li&gt;
&lt;/ul&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/scatter-plot.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;d3-api-docs&#34;&gt;D3 API Docs&lt;/h2&gt;

&lt;p&gt;D3 4.0 is a &lt;a href=&#34;https://github.com/d3&#34; target=&#34;_blank&#34;&gt;collection of modules&lt;/a&gt; that are designed to work together
* You can use the modules independently, or you can use them together as part of the default build.
* The source and documentation for each module is available in its repository.&lt;/p&gt;

&lt;p&gt;Follow the links below to learn more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://d3js.org/#introduction&#34; target=&#34;_blank&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md&#34; target=&#34;_blank&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3/blob/master/CHANGES.md&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3/wiki/Gallery&#34; target=&#34;_blank&#34;&gt;Gallery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bl.ocks.org/mbostock&#34; target=&#34;_blank&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3/wiki/Tutorials&#34; target=&#34;_blank&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3/wiki/Plugins&#34; target=&#34;_blank&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/d3.js&#34; target=&#34;_blank&#34;&gt;d3.js on Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/d3-js&#34; target=&#34;_blank&#34;&gt;d3-js Google Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://d3js.slack.com&#34; target=&#34;_blank&#34;&gt;d3-js Slack Channel&lt;/a&gt; (&lt;a href=&#34;https://d3-slackin.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;Invite&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/d3/d3&#34; target=&#34;_blank&#34;&gt;d3-js Gitter Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;d3-js IRC Channel =&amp;gt; #d3.js on irc.freenode.net&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;list-of-d3-modules&#34;&gt;List of D3 Modules&lt;/h4&gt;

&lt;h6 id=&#34;data-space&#34;&gt;Data space&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;query&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-request&lt;/li&gt;
&lt;li&gt;d3-queue&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;generation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-random&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;parsing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-dsv&lt;/li&gt;
&lt;li&gt;d3-time&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;formatting&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-time-format&lt;/li&gt;
&lt;li&gt;d3-format&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;manipulation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-array&lt;/li&gt;
&lt;li&gt;d3-collection&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;graphic-space&#34;&gt;Graphic space&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;data transform&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-scale&lt;/li&gt;
&lt;li&gt;d3-geo-projection&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;geometry computation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-voronoi&lt;/li&gt;
&lt;li&gt;d3-hull&lt;/li&gt;
&lt;li&gt;d3-quadtree&lt;/li&gt;
&lt;li&gt;d3-interpolate&lt;/li&gt;
&lt;li&gt;d3-geo&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;dynamic geometry computation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-transition&lt;/li&gt;
&lt;li&gt;d3-timer&lt;/li&gt;
&lt;li&gt;d3-ease&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;visual variables mapping&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-hierarchy&lt;/li&gt;
&lt;li&gt;d3-sankey&lt;/li&gt;
&lt;li&gt;d3-chord&lt;/li&gt;
&lt;li&gt;d3-hexbin&lt;/li&gt;
&lt;li&gt;d3-force&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;generation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-shape&lt;/li&gt;
&lt;li&gt;d3-path&lt;/li&gt;
&lt;li&gt;d3-polygon&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;converter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-color&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;view-space&#34;&gt;View space&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;visual variables mapping (selection, data-binding, attributes)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-selection&lt;/li&gt;
&lt;li&gt;d3-selection-multi&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;high level set of visual variables mapping (component)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-axis&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;interaction-space&#34;&gt;Interaction space&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;internal events&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-dispatch&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;user events and geometry computation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3-zoom&lt;/li&gt;
&lt;li&gt;d3-brush&lt;/li&gt;
&lt;li&gt;d3-drag&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;selections-and-data&#34;&gt;Selections and Data&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-selection&#34; target=&#34;_blank&#34;&gt;D3 Selections Documentation&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selections are immutable.&lt;/li&gt;
&lt;li&gt;All selection methods that affect which elements are selected (or their order) return a new selection rather than modifying the current selection.&lt;/li&gt;
&lt;li&gt;However, note that elements are necessarily mutable, as selections drive transformations of the document!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-selection#selecting-elements&#34; target=&#34;_blank&#34;&gt;Selecting Elements&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var anchor = d3.select(&amp;quot;a&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will select the first element that matches the specified selector string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const enter = svg.selectAll(&#39;rect&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will select all elements that match the specified selector string&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the selector is not a string, instead selects the specified array of nodes&lt;/li&gt;
&lt;li&gt;this is useful if you already have a reference to nodes, such as this.childNodes within an event listener or a global such as document.links&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;d3.selectAll(document.links).style(&amp;quot;color&amp;quot;, &amp;quot;red&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var even = d3.selectAll(&amp;quot;tr&amp;quot;).filter(&amp;quot;:nth-child(even)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice here that you can a css pseudo selector and you can also pass a function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var even = d3.selectAll(&amp;quot;tr&amp;quot;).filter(function(d, i) { return i &amp;amp; 1; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/&#34; target=&#34;_blank&#34;&gt;Block Builder Editor&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A very nice editor to build d3 visualizations that get saved as gists&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;code&gt;START CODING&lt;/code&gt; button&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Login and you will be routed to github page to authorize application&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can then save your code here and get interactive editor&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;playing-with-d3&#34;&gt;Playing with D3&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/ccd655bb9c410190e305408bb93871b9&#34; target=&#34;_blank&#34;&gt;Playing with D3&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;selections-demo&#34;&gt;Selections Demo&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/f5c73b49d3478dfbb0135148fa04ad92&#34; target=&#34;_blank&#34;&gt;Selections and Data Block Builder Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/e2017b083240255e42dffd515f9203d1&#34; target=&#34;_blank&#34;&gt;Selections Filter Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-selection#selection_attr&#34; target=&#34;_blank&#34;&gt;D3 Selections &lt;code&gt;attr&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If a value is specified, sets the attribute with the specified name to the specified value on the selected elements and returns this selection.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the value is a constant, all elements are given the same attribute value&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Otherwise, if the value is a function, it is evaluated for each selected element, in order, being passed the current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The function’s return value is then used to set each element’s attribute. A null value will remove the specified attribute.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-selection#selection_data&#34; target=&#34;_blank&#34;&gt;D3 Selections &lt;code&gt;data&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Joins the specified array of data with the selected elements, returning a new selection that represents the update selection: the elements successfully bound to data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-selection#selection_call&#34; target=&#34;_blank&#34;&gt;D3 Selections &lt;code&gt;call&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Invokes the specified function exactly once, passing in this selection along with any optional arguments.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Returns this selection. This is equivalent to invoking the function by hand but facilitates method chaining.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, to set several styles in a reusable function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function name(selection, first, last) {
  selection
      .attr(&amp;quot;first-name&amp;quot;, first)
      .attr(&amp;quot;last-name&amp;quot;, last);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-selection#selection_text&#34; target=&#34;_blank&#34;&gt;D3 Selections &lt;code&gt;text&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If a value is specified, sets the text content to the specified value on all selected elements, replacing any existing child elements.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the value is a constant, then all elements are given the same text content; otherwise, if the value is a function, it is evaluated for each selected element, in order, being passed the current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The function’s return value is then used to set each element’s text content. A null value will clear the content.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-selection#selection_append&#34; target=&#34;_blank&#34;&gt;D3 Selections &lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If the specified type is a string, appends a new element of this type (tag name) as the last child of each selected element, or before the next following sibling in the update selection if this is an enter selection.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The latter behavior for enter selections allows you to insert elements into the DOM in an order consistent with the new bound data; however, note that selection.order may still be required if updating elements change order (i.e., if the order of new data is inconsistent with old data).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the specified type is a function, it is evaluated for each selected element, in order, being passed the current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i]). This function should return an element to be appended. (The function typically creates a new element, but it may instead return an existing element.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, to append a DIV element to each paragraph:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;d3.selectAll(&amp;quot;p&amp;quot;).append(&amp;quot;div&amp;quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;d3.selectAll(&amp;quot;p&amp;quot;).append(function() {
  return document.createElement(&amp;quot;div&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;d3.selectAll(&amp;quot;p&amp;quot;).select(function() {
  return this.appendChild(document.createElement(&amp;quot;div&amp;quot;));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/e991b69658afc57c5b8c4a0e9dd08fca&#34; target=&#34;_blank&#34;&gt;D3 style class attr and more play&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;enter-and-append&#34;&gt;Enter and Append&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-selection#selection_enter&#34; target=&#34;_blank&#34;&gt;D3 Enter docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;enter&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Returns the enter selection: placeholder nodes for each datum that had no corresponding DOM element in the selection.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The enter selection is empty for selections not returned by selection.data.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The enter selection is typically used to create “missing” elements corresponding to new data.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For example, to create DIV elements from an array of numbers:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const div = d3.select(&amp;quot;body&amp;quot;)
  .selectAll(&amp;quot;div&amp;quot;)
  .data([4, 8, 15, 16, 23, 42])
  .enter().append(&amp;quot;div&amp;quot;)
    .text(d =&amp;gt; d);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If the body is initially empty, the above code will create six new DIV elements, append them to the body in-order, and assign their text content as the associated (string-coerced) number:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;4&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;8&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;15&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;16&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;23&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;42&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;enter-and-append-demo&#34;&gt;Enter and Append Demo&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/3e6a7ce02a072da3db8a4f77483b811f&#34; target=&#34;_blank&#34;&gt;Svg Enter and Append&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/d750c43050baf612a11c9bb42e62551b&#34; target=&#34;_blank&#34;&gt;SVG Enter Append Call&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/03048c2bf48778b1d605345d7fdd6965&#34; target=&#34;_blank&#34;&gt;Enter and Append with Circles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/b3418f3b8f3f90f8de7bc59bc4aa3592&#34; target=&#34;_blank&#34;&gt;Enter and Append&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click &lt;code&gt;Fork&lt;/code&gt; Button to Play with this on your own&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/bbc300e1ebe57b3f39477845a510eb33&#34; target=&#34;_blank&#34;&gt;Enter and Append with Existing Rects&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;svg-basic-shapes&#34;&gt;SVG Basic Shapes&lt;/h2&gt;

&lt;p&gt;SVG Basic Shapes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rectangle&lt;/li&gt;
&lt;li&gt;Circle&lt;/li&gt;
&lt;li&gt;Ellipse&lt;/li&gt;
&lt;li&gt;Straight Line&lt;/li&gt;
&lt;li&gt;Polyline&lt;/li&gt;
&lt;li&gt;Polygon&lt;/li&gt;
&lt;li&gt;Path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic shapes that SVG provides are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;rectangle&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;circle&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ellipse&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;straight line&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;polyline, polygon and path&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;rectangles&#34;&gt;Rectangles&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;svg width=&amp;quot;50&amp;quot; height=&amp;quot;50&amp;quot;&amp;gt;
    &amp;lt;rect x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;50&amp;quot; height=&amp;quot;50&amp;quot; /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For us to be able to use an SVG rectangle it must be defined inside of the SVG tags.&lt;/p&gt;

&lt;p&gt;The x and y - which is where the rectangle is drawn from and the height and width&lt;/p&gt;

&lt;p&gt;The SVG coordinate space starts at the top left and goes to the bottom right as x and y coordinates increase.&lt;/p&gt;

&lt;p&gt;So as the height increases, the rectangle will get longer down&lt;/p&gt;

&lt;p&gt;And as the width increases, the rectangle will get longer to the right.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var rectangles = [
  {&amp;quot;x&amp;quot;: 0,   &amp;quot;y&amp;quot;:   0, &amp;quot;width&amp;quot;: 30, &amp;quot;height&amp;quot;: 40},
  {&amp;quot;x&amp;quot;: 50,  &amp;quot;y&amp;quot;:  50, &amp;quot;width&amp;quot;: 30, &amp;quot;height&amp;quot;: 40},
  {&amp;quot;x&amp;quot;: 100, &amp;quot;y&amp;quot;: 100, &amp;quot;width&amp;quot;: 30, &amp;quot;height&amp;quot;: 40},
  {&amp;quot;x&amp;quot;: 150, &amp;quot;y&amp;quot;: 150, &amp;quot;width&amp;quot;: 30, &amp;quot;height&amp;quot;: 40}
];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var svgContainer = d3.select(&amp;quot;body&amp;quot;)
  .append(&amp;quot;svg&amp;quot;)
  .attr(&amp;quot;width&amp;quot;,&amp;quot;560&amp;quot;)
  .attr(&amp;quot;height&amp;quot;,&amp;quot;900&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var svgRectangles = svgContainer
  .selectAll(&amp;quot;rect&amp;quot;)
  .data(rectangles)
  .enter()
  .append(&amp;quot;rect&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This binds each JSON object to an SVG rectangle DOM element&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;svgRectangles
    .attr(&amp;quot;x&amp;quot;,      function (d,i) { return d.x;  })
    .attr(&amp;quot;y&amp;quot;,      function (d,i) { return d.y;      })
    .attr(&amp;quot;width&amp;quot;,  function (d,i) { return d.width;  })
    .attr(&amp;quot;height&amp;quot;, function (d,i) { return d.height; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use an anonymous function to extract the relevant information from each JSON object
For the rectangle, this means the x, y, width and height information.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/f3cd7d0885e7a285021d5bfcb63c12eb&#34; target=&#34;_blank&#34;&gt;D3 Rectangle in SVG&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;circles&#34;&gt;Circles&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;svg width=&amp;quot;50&amp;quot; height=&amp;quot;50&amp;quot;&amp;gt;
    &amp;lt;circle cx=&amp;quot;25&amp;quot; cy=&amp;quot;25&amp;quot; r=&amp;quot;25&amp;quot; /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SVG circles must be defined inside of the SVG tags&lt;/p&gt;

&lt;p&gt;The SVG circle takes in three main inputs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cx which is where the center of the circle is drawn from&lt;/li&gt;
&lt;li&gt;cy which is where the center of the circle is drawn from&lt;/li&gt;
&lt;li&gt;r which is the radius of the circle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The JSON objects should have the cx, cy and r properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var svgContainer = d3.select(&amp;quot;body&amp;quot;)
  .append(&amp;quot;svg&amp;quot;)
  .attr(&amp;quot;width&amp;quot;,&amp;quot;560&amp;quot;)
  .attr(&amp;quot;height&amp;quot;,&amp;quot;900&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we define the SVG Container the rectangles will live in.&lt;/p&gt;

&lt;p&gt;Note that we define the width and height of the SVG viewport container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var circles = [
  {&amp;quot;cx&amp;quot;:  25, &amp;quot;cy&amp;quot;:  25, &amp;quot;r&amp;quot;: 20},
  {&amp;quot;cx&amp;quot;:  75, &amp;quot;cy&amp;quot;:  75, &amp;quot;r&amp;quot;: 20},
  {&amp;quot;cx&amp;quot;: 125, &amp;quot;cy&amp;quot;: 125, &amp;quot;r&amp;quot;: 20},
  {&amp;quot;cx&amp;quot;: 175, &amp;quot;cy&amp;quot;: 175, &amp;quot;r&amp;quot;: 20}
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The circles array contains 4 circle JSON Objects.&lt;/p&gt;

&lt;p&gt;This will be the data source used to construct the circles&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var svgCircles = svgContainer.selectAll(&amp;quot;circle&amp;quot;).data(circles).enter().append(&amp;quot;circle&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This binds each JSON object to an SVG circle DOM element&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;svgCircles
    .attr(&amp;quot;cx&amp;quot;, function (d,i) { return d.cx; })
    .attr(&amp;quot;cy&amp;quot;, function (d,i) { return d.cy; })
    .attr(&amp;quot;r&amp;quot;,  function (d,i) { return d.r;  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use an anonymous function to extract the relevant information from each JSON object&lt;/p&gt;

&lt;p&gt;For the circle, this means the cx, cy and r information.&lt;/p&gt;

&lt;p&gt;Bonus if you can set the first SVG Circle to Red Color&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip use the filter function with the svgCircles variable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/99ffa83bcf299372014e743419cadc2d&#34; target=&#34;_blank&#34;&gt;D3 Circles in SVG&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;ellipses&#34;&gt;Ellipses&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;svg width=&amp;quot;50&amp;quot; height=&amp;quot;50&amp;quot;&amp;gt;
    &amp;lt;ellipse cx=&amp;quot;25&amp;quot; cy=&amp;quot;25&amp;quot; rx=&amp;quot;15&amp;quot; ry=&amp;quot;10&amp;quot; /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SVG ellipses must be defined inside of the SVG tags.&lt;/p&gt;

&lt;p&gt;The SVG ellipse takes in four main inputs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cx which is where the center of the ellipse is drawn from&lt;/li&gt;
&lt;li&gt;cy which is where the center of the ellipse is drawn from&lt;/li&gt;
&lt;li&gt;x radius of the ellipse&lt;/li&gt;
&lt;li&gt;y radius of the ellipse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The JSON object should have the cx, cy, rx and ry properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var svgContainer = d3.select(&amp;quot;body&amp;quot;)
  .append(&amp;quot;svg&amp;quot;)
  .attr(&amp;quot;width&amp;quot;,&amp;quot;560&amp;quot;)
  .attr(&amp;quot;height&amp;quot;,&amp;quot;900&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we define the SVG Container the ellipses will live in.&lt;/p&gt;

&lt;p&gt;Note that we define the width and height of the SVG viewport container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var ellipses = [
  {&amp;quot;cx&amp;quot;:  25, &amp;quot;cy&amp;quot;:  25, &amp;quot;rx&amp;quot;: 15, &amp;quot;ry&amp;quot;: 20},
  {&amp;quot;cx&amp;quot;:  75, &amp;quot;cy&amp;quot;:  75, &amp;quot;rx&amp;quot;: 15, &amp;quot;ry&amp;quot;: 20},
  {&amp;quot;cx&amp;quot;: 125, &amp;quot;cy&amp;quot;: 125, &amp;quot;rx&amp;quot;: 15, &amp;quot;ry&amp;quot;: 20},
  {&amp;quot;cx&amp;quot;: 175, &amp;quot;cy&amp;quot;: 175, &amp;quot;rx&amp;quot;: 15, &amp;quot;ry&amp;quot;: 20}
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ellipses array contains 4 ellipse JSON Objects.&lt;/p&gt;

&lt;p&gt;This will be the data source used to construct the ellipses&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var svgEllipses = svgContainer
  .selectAll(&amp;quot;ellipse&amp;quot;)
  .data(ellipses)
  .enter()
  .append(&amp;quot;ellipse&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;svgEllipses
    .attr(&amp;quot;cx&amp;quot;, function (d,i) { return d.cx; })
    .attr(&amp;quot;cy&amp;quot;, function (d,i) { return d.cy; })
    .attr(&amp;quot;rx&amp;quot;, function (d,i) { return d.rx; })
    .attr(&amp;quot;ry&amp;quot;, function (d,i) { return d.ry; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use an anonymous function to extract the relevant information from each JSON object&lt;/p&gt;

&lt;p&gt;For the ellipse, this means the cx, cy, rx and ry information.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;d3.selectAll(&#39;ellipse&#39;).data()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the data bound to each ellipse&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;d3.selectAll(&#39;ellipse&#39;).nodes()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return each dom node for each ellipse&lt;/p&gt;

&lt;p&gt;This binds each JSON object to an SVG ellipse DOM element&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/d3461d2bc771d8e2d7bac18d192b6f4a&#34; target=&#34;_blank&#34;&gt;D3 Ellipses in SVG&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;straight-lines&#34;&gt;Straight Lines&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;svg width=&amp;quot;50&amp;quot; height=&amp;quot;50&amp;quot;&amp;gt;
    &amp;lt;line x1=&amp;quot;5&amp;quot; y1=&amp;quot;5&amp;quot; x2=&amp;quot;40&amp;quot; y2=&amp;quot;40&amp;quot; stroke=&amp;quot;gray&amp;quot; stroke-width=&amp;quot;5&amp;quot; /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SVG Straight Lines must be defined inside of the SVG tags.&lt;/p&gt;

&lt;p&gt;The SVG Straight Line takes in six main inputs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;x1 which is where the line starts&lt;/li&gt;
&lt;li&gt;y1 which is where the line starts&lt;/li&gt;
&lt;li&gt;x2 which is where the line ends&lt;/li&gt;
&lt;li&gt;y2 which is where the line ends&lt;/li&gt;
&lt;li&gt;stroke which is the color of the line&lt;/li&gt;
&lt;li&gt;stroke-width which is the stroke width&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The stroke and stroke-width are necessary because an SVG line is dimensionless.&lt;/p&gt;

&lt;p&gt;So by applying a stroke-width greater than zero, we can see the line.&lt;/p&gt;

&lt;p&gt;The JSON object should have the x1, y1, x2, y2, stroke and stroke-width properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var svgContainer = d3.select(&amp;quot;body&amp;quot;)
  .append(&amp;quot;svg&amp;quot;)
  .attr(&amp;quot;width&amp;quot;,&amp;quot;200&amp;quot;)
  .attr(&amp;quot;height&amp;quot;,&amp;quot;200&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we define the SVG Container the straight lines will live in.&lt;/p&gt;

&lt;p&gt;Note that we define the width and height of the SVG viewport container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var straightLines = [
  { &amp;quot;x1&amp;quot;:  0, &amp;quot;y1&amp;quot;:  0, &amp;quot;x2&amp;quot;: 40, &amp;quot;y2&amp;quot;: 40, &amp;quot;stroke&amp;quot;:&amp;quot;black&amp;quot;, &amp;quot;stroke_width&amp;quot;:5 },
  { &amp;quot;x1&amp;quot;: 50, &amp;quot;y1&amp;quot;: 50, &amp;quot;x2&amp;quot;: 90, &amp;quot;y2&amp;quot;: 90, &amp;quot;stroke&amp;quot;:&amp;quot;black&amp;quot;, &amp;quot;stroke_width&amp;quot;:5 },
  { &amp;quot;x1&amp;quot;:100, &amp;quot;y1&amp;quot;:100, &amp;quot;x2&amp;quot;:140, &amp;quot;y2&amp;quot;:140, &amp;quot;stroke&amp;quot;:&amp;quot;black&amp;quot;, &amp;quot;stroke_width&amp;quot;:5 },
  { &amp;quot;x1&amp;quot;:150, &amp;quot;y1&amp;quot;:150, &amp;quot;x2&amp;quot;:190, &amp;quot;y2&amp;quot;:190, &amp;quot;stroke&amp;quot;:&amp;quot;black&amp;quot;, &amp;quot;stroke_width&amp;quot;:5 }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The straight lines array contains 4 straight line JSON Objects.&lt;/p&gt;

&lt;p&gt;This will be the data source used to construct the straight lines&lt;/p&gt;

&lt;p&gt;Note that for the stroke_width, we use an underscore to separate the stroke and width words&lt;/p&gt;

&lt;p&gt;Why this is important will be seen shortly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var svgStraightLines = svgContainer
  .selectAll(&amp;quot;line&amp;quot;)
  .data(straightLines)
  .enter()
  .append(&amp;quot;line&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This binds each JSON object to an SVG Straight Line DOM element&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;svgStraightLines
    .attr(&amp;quot;x1&amp;quot;,           function (d,i) { return d.x1;           })
    .attr(&amp;quot;y1&amp;quot;,           function (d,i) { return d.y1;           })
    .attr(&amp;quot;x2&amp;quot;,           function (d,i) { return d.x2;           })
    .attr(&amp;quot;y2&amp;quot;,           function (d,i) { return d.y2;           })
    .attr(&amp;quot;stroke&amp;quot;,       function (d,i) { return d.stroke;       })
    .attr(&amp;quot;stroke-width&amp;quot;, function (d,i) { return d.stroke_width; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use an anonymous function to extract the relevant information from each JSON object&lt;/p&gt;

&lt;p&gt;For the straight line, this means the x1, y1, x2, y2, stroke and stroke-width information.&lt;/p&gt;

&lt;p&gt;Note, the stroke-width anonymous function uses the d.stroke {underscore} width.&lt;/p&gt;

&lt;p&gt;If we have written stroke {dash} width, then JavaScript would have thought we were trying to do a subtraction.&lt;/p&gt;

&lt;p&gt;This is very important to keep in mind as this can often cause bugs in the code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/be3d71e582388f97554a0656132b5755&#34; target=&#34;_blank&#34;&gt;D3 Straight Lines in SVG&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;scales-and-axis&#34;&gt;Scales and Axis&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-scale&#34; target=&#34;_blank&#34;&gt;D3 Scales Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key Functions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-scale#scaleBand&#34; target=&#34;_blank&#34;&gt;Scale Band&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constructs a new band scale with the empty domain, the unit range [0, 1], no padding, no rounding and center alignment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-scale#scaleLinear&#34; target=&#34;_blank&#34;&gt;Scale Linear&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Constructs a new continuous scale with the unit domain [0, 1], the unit range [0, 1], the default interpolator and clamping disabled.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linear scales are a good default choice for continuous quantitative data because they preserve proportional differences.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Each range value y can be expressed as a function of the domain value x: y = mx + b.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-scale#continuous_domain&#34; target=&#34;_blank&#34;&gt;D3 Continuous &lt;code&gt;domain&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If domain is specified, sets the scale’s domain to the specified array of numbers.&lt;/li&gt;
&lt;li&gt;The array must contain two or more elements.&lt;/li&gt;
&lt;li&gt;If the elements in the given array are not numbers, they will be coerced to numbers.&lt;/li&gt;
&lt;li&gt;If domain is not specified, returns a copy of the scale’s current domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var color = d3.scaleLinear()
    .domain([-1, 0, 1])
    .range([&amp;quot;red&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;green&amp;quot;]);

color(-0.5); // &amp;quot;rgb(255, 128, 128)&amp;quot;
color(+0.5); // &amp;quot;rgb(128, 192, 128)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-scale&#34; target=&#34;_blank&#34;&gt;D3 Axis Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/96f2c14132fb446e839ef8fd9e517267&#34; target=&#34;_blank&#34;&gt;Scales and Axis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice in this file that I make a call to &lt;code&gt;d3.csv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-request#csv&#34; target=&#34;_blank&#34;&gt;d3 request docs for csv and tsv files&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Returns a new request for the CSV file at the specified url with the default mime type text/csv.&lt;/li&gt;
&lt;li&gt;If no callback is specified, this is equivalent to:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;d3.request(url)
    .mimeType(&amp;quot;text/csv&amp;quot;)
    .response(function(xhr) { return d3.csvParse(xhr.responseText, row); });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;d3.request(url)
    .mimeType(&amp;quot;text/csv&amp;quot;)
    .response(function(xhr) { return d3.csvParse(xhr.responseText, row); })
    .get(callback);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is our function in the blockbuilder file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// dataset for city demographics by city
d3.csv(&#39;demographic-states-by-city.csv&#39;, (err, data) =&amp;gt; {
  data.forEach(d =&amp;gt; {
    d[COUNT_HISPANICS] = Number(d[COUNT_HISPANICS]) + 0; // y
  });

  // get min/max
  var min = d3.min(data, d =&amp;gt; d[COUNT_HISPANICS]);
  var max = d3.max(data, d =&amp;gt; d[COUNT_HISPANICS]);
  // or use extent, which gives back [min, max]
  const extent = d3.extent(data, d =&amp;gt; d[COUNT_HISPANICS]);

  // try different scales, change the ranges, see what happens
  const yScale = d3.scaleLinear()
    .domain(extent)
    .range([height, 0]);

  // try passing in tick valuess
  const yAxis = d3.axisLeft()
    .scale(yScale);

  const axis = d3.select(&#39;svg&#39;).append(&#39;g&#39;)
    .attr(&#39;transform&#39;, &#39;translate(40, 20)&#39;)
    .call(yAxis);

  const text = axis.selectAll(&#39;text&#39;)
    .attr(&#39;fill&#39;, d =&amp;gt; d === 35 ? &#39;blue&#39; : &#39;green&#39;)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;d3.csv(url, row, callback);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice we provided a url and a callback but not &lt;code&gt;row&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;d3-scale-and-axis-methods&#34;&gt;D3 scale and axis methods&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-array#extent&#34; target=&#34;_blank&#34;&gt;D3 array method &lt;code&gt;extent&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Returns the minimum and maximum value in the given array using natural order.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the array is empty, returns [undefined, undefined].&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An optional accessor function may be specified, which is equivalent to calling array.map(accessor) before computing the extent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-scale#scaleTime&#34; target=&#34;_blank&#34;&gt;D3 scale method &lt;code&gt;scaleTime&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constructs a new time scale with the domain [2000-01-01, 2000-01-02]

&lt;ul&gt;
&lt;li&gt;the unit range [0, 1], the default interpolator and clamping disabled.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-axis#axisBottom&#34; target=&#34;_blank&#34;&gt;D3 axis method &lt;code&gt;axisBottom&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constructs a new bottom-oriented axis generator for the given scale, with empty tick arguments, a tick size of 6 and padding of 3.&lt;/li&gt;
&lt;li&gt;In this orientation, ticks are drawn below the horizontal domain path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/@mbostock/introducing-d3-scale-61980c51545f&#34; target=&#34;_blank&#34;&gt;Introduction to D3 Scales by Mike Bostock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click &lt;code&gt;Fork&lt;/code&gt; Button to Play with this on your own&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;shapes&#34;&gt;Shapes&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/shapes.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h4 id=&#34;svg-elements&#34;&gt;SVG Elements&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths&#34; target=&#34;_blank&#34;&gt;SVG Paths&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform&#34; target=&#34;_blank&#34;&gt;SVG Transform&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;path-attribute&#34;&gt;Path Attribute&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d3-shape&lt;/code&gt; calculates the path attribute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine if you had to hand code this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;svg width=&amp;quot;190&amp;quot; height=&amp;quot;160&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;

  &amp;lt;path d=&amp;quot;M10 10 C 20 20, 40 20, 50 10&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;transparent&amp;quot;/&amp;gt;
  &amp;lt;path d=&amp;quot;M70 10 C 70 20, 120 20, 120 10&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;transparent&amp;quot;/&amp;gt;
  &amp;lt;path d=&amp;quot;M130 10 C 120 20, 180 20, 170 10&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;transparent&amp;quot;/&amp;gt;
  &amp;lt;path d=&amp;quot;M10 60 C 20 80, 40 80, 50 60&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;transparent&amp;quot;/&amp;gt;
  &amp;lt;path d=&amp;quot;M70 60 C 70 80, 110 80, 110 60&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;transparent&amp;quot;/&amp;gt;
  &amp;lt;path d=&amp;quot;M130 60 C 120 80, 180 80, 170 60&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;transparent&amp;quot;/&amp;gt;
  &amp;lt;path d=&amp;quot;M10 110 C 20 140, 40 140, 50 110&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;transparent&amp;quot;/&amp;gt;
  &amp;lt;path d=&amp;quot;M70 110 C 70 140, 110 140, 110 110&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;transparent&amp;quot;/&amp;gt;
  &amp;lt;path d=&amp;quot;M130 110 C 120 140, 180 140, 170 110&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;transparent&amp;quot;/&amp;gt;

&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/bostock-line-chart.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h4 id=&#34;pie&#34;&gt;Pie&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-shape#pies&#34; target=&#34;_blank&#34;&gt;Pie Chart&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The pie generator does not produce a shape directly, but instead computes the necessary angles to represent a tabular dataset as a pie or donut chart&lt;/li&gt;
&lt;li&gt;These angles can then be passed to an arc generator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-shape#pie&#34; target=&#34;_blank&#34;&gt;D3 shape &lt;code&gt;pie&lt;/code&gt; method&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constructs a new pie generator with the default settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-shape#arc&#34; target=&#34;_blank&#34;&gt;D3 shape &lt;code&gt;arc&lt;/code&gt; method&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constructs a new arc generator with the default settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-shape#_arc&#34; target=&#34;_blank&#34;&gt;D3 shape &lt;code&gt;arc&lt;/code&gt; with args method&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the radii and angles are instead defined as constants, you can generate an arc without any arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var arc = d3.arc()
    .innerRadius(0)
    .outerRadius(100)
    .startAngle(0)
    .endAngle(Math.PI / 2);

arc(); // &amp;quot;M0,-100A100,100,0,0,1,100,0L0,0Z&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/fa75876b679907a613d61805c37231a8&#34; target=&#34;_blank&#34;&gt;Area Chart&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;enter-and-update&#34;&gt;Enter and Update&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://bost.ocks.org/mike/constancy/&#34; target=&#34;_blank&#34;&gt;Mikes Blog Post on Object Constancy&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Animated transitions are pretty, but they also serve a purpose: they make it easier to follow the data. This is known as object constancy: a graphical element that represents a particular data point (such as Ohio) can be tracked visually through the transition. This lessens the cognitive burden by using preattentive processing of motion rather than sequential scanning of labels.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;To achieve object constancy with D3.js, specify a key function as the second argument to selection.data.&lt;/li&gt;
&lt;li&gt;This function takes a data point as input and returns a corresponding key: a string, such as a name, that uniquely identifies the data point.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, the bar chart above defines data as objects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;State&amp;quot;: &amp;quot;ND&amp;quot;,
  &amp;quot;Total&amp;quot;: 641481,
  &amp;quot;Under 5 Years&amp;quot;: 0.065,
  &amp;quot;5 to 13 Years&amp;quot;: 0.105,
  &amp;quot;14 to 17 Years&amp;quot;: 0.053,
  &amp;quot;18 to 24 Years&amp;quot;: 0.129,
  &amp;quot;16 Years and Over&amp;quot;: 0.804,
  &amp;quot;18 Years and Over&amp;quot;: 0.777,
  &amp;quot;15 to 44 Years&amp;quot;: 0.410,
  &amp;quot;45 to 64 Years&amp;quot;: 0.260,
  &amp;quot;65 Years and Over&amp;quot;: 0.147,
  &amp;quot;85 Years and Over&amp;quot;: 0.028
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with a suitable key function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function key(d) {
  return d.State;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;thinking-with-joins&#34;&gt;Thinking with Joins&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://bost.ocks.org/mike/join/&#34; target=&#34;_blank&#34;&gt;Mike Bostock&amp;rsquo;s Blog Post on Thinking with Joins&lt;/a&gt;&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/three-circles.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;Data points joined to existing elements produce the update (inner) selection.&lt;/li&gt;
&lt;li&gt;Leftover unbound data produce the enter selection (left), which represents missing elements.&lt;/li&gt;
&lt;li&gt;Likewise, any remaining unbound elements produce the exit selection (right), which represents elements to be removed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Now we can unravel the mysterious enter-append sequence through the data join&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, svg.selectAll(&amp;ldquo;circle&amp;rdquo;) returns a new empty selection, since the SVG container was empty. The parent node of this selection is the SVG container.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This selection is then joined to an array of data, resulting in three new selections that represent the three possible states: enter, update, and exit. Since the selection was empty, the update and exit selections are empty, while the enter selection contains a placeholder for each new datum.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The update selection is returned by selection.data, while the enter and exit selections hang off the update selection; selection.enter thus returns the enter selection.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The missing elements are added to the SVG container by calling selection.append on the enter selection. This appends a new circle for each data point to the SVG&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;exit-and-merge&#34;&gt;Exit and Merge&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/2ebf2c68f53b86fd77b8d318bfb668a0&#34; target=&#34;_blank&#34;&gt;Enter and Update&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;transitions&#34;&gt;Transitions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A transition is a selection-like interface for animating changes to the DOM.&lt;/li&gt;
&lt;li&gt;Instead of applying changes instantaneously, transitions smoothly interpolate the DOM from its current state to the desired target state over a given duration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To apply a transition, select elements, call selection.transition, and then make the desired changes.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;d3.select(&amp;quot;body&amp;quot;)
  .transition()
    .style(&amp;quot;background-color&amp;quot;, &amp;quot;red&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Transitions are derived from selections via selection.transition.&lt;/li&gt;
&lt;li&gt;You can also create a transition on the document root element using d3.transition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-transition#selection_transition&#34; target=&#34;_blank&#34;&gt;selection.transition&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Returns a new transition on the given selection with the specified name.&lt;/li&gt;
&lt;li&gt;If a name is not specified, null is used.&lt;/li&gt;
&lt;li&gt;The new transition is only exclusive with other transitions of the same name.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var t = d3.transition()
    .duration(750)
    .ease(d3.easeLinear);

d3.selectAll(&amp;quot;.apple&amp;quot;).transition(t)
    .style(&amp;quot;fill&amp;quot;, &amp;quot;red&amp;quot;);

d3.selectAll(&amp;quot;.orange&amp;quot;).transition(t)
    .style(&amp;quot;fill&amp;quot;, &amp;quot;orange&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/dd2b58748e79855d1baa9d11fb76cef8&#34; target=&#34;_blank&#34;&gt;Circle Transitions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click &lt;code&gt;Fork&lt;/code&gt; Button to Play with this on your own&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;force-layout&#34;&gt;Force Layout&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/d3/d3-force&#34; target=&#34;_blank&#34;&gt;Force Layout Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the domain of information visualization, physical simulations are useful for studying networks and hierarchies!&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/force-dragging.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Force Layout is good at providing insights on the relationships between connections&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d3indepth.com/force-layout/&#34; target=&#34;_blank&#34;&gt;d3 force layout guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To give credit where it is due, the following content below is derived from the above url&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;D3 force layout uses a physics based simulator for positioning visual elements.&lt;/p&gt;

&lt;p&gt;Forces can be set up between elements, For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;all elements repel one another&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;elements are attracted to center(s) of gravity&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;linked elements are a fixed distance apart (network visualisation)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;elements may not overlap (collision detection)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;force-simulation&#34;&gt;Force Simulation&lt;/h4&gt;

&lt;p&gt;There are 4 steps in setting up force simulation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create an array of objects&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Call forceSimulation, passing in the array of objects.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add one or more force functions (forceManyBody, forceCenter, forceCollide, etc) to the system&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set up callback function to update the element positions after each tick.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const dimensions = {
  width: 300,
  height: 300
};

const nodes = [{}, {}, {}, {}, {}];

let simulation = d3.forceSimulation(nodes)
  .force(&#39;charge&#39;, d3.forceManyBody())
  .force(&#39;center&#39;, d3.forceCenter(dimensions.width / 2, dimensions.height / 2))
  .on(&#39;tick&#39;, ticked);

function ticked() {
  var u = d3.select(&#39;svg&#39;)
    .selectAll(&#39;circle&#39;)
    .data(nodes)

  u.enter()
    .append(&#39;circle&#39;)
    .attr(&#39;r&#39;, 5)
    .merge(u)
    .attr(&#39;cx&#39;, function(d) {
      return d.x
    })
    .attr(&#39;cy&#39;, function(d) {
      return d.y
    })

  u.exit().remove()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d3-force-functions&#34;&gt;D3 Force Functions&lt;/h4&gt;

&lt;p&gt;Force functions are added to the simulation using .force() where the first argument is a user defined id and the second argument the force function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;simulation.force(&#39;charge&#39;, d3.forceManyBody())
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;forcecenter&#34;&gt;forceCenter&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3-force#forceCenter&#34; target=&#34;_blank&#34;&gt;forceCenter&lt;/a&gt; (for setting the center of gravity of the system)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creates a new centering force with the specified x- and y- coordinates.
If x and y are not specified, they default to ⟨0,0⟩.&lt;/p&gt;

&lt;p&gt;forceCenter is useful (if not essential) for centering your elements as a whole about a center point. (Without it elements might disappear off the page.)&lt;/p&gt;

&lt;p&gt;Initialis with a center position:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;d3.forceCenter(100, 100)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or using the configuration functions .x() and .y():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;d3.forceCenter().x(100).y(100)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;simulation.force(&#39;center&#39;, d3.forceCenter(100, 100))&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;forcemanybody&#34;&gt;forceManyBody&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3-force#forceManyBody&#34; target=&#34;_blank&#34;&gt;forceManyBody&lt;/a&gt; (for making elements attract or repel one another)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creates a new many-body force with the default parameters.&lt;/p&gt;

&lt;p&gt;forceManyBody causes all elements to attract or repel one another.
The strength of the attraction or repulsion can be set using .strength() where a positive value will cause elements to attract one another while a negative value causes elements to repel each other.
The default value is -30.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;simulation.force(&#39;charge&#39;, d3.forceManyBody().strength(-20))&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;forcecollide&#34;&gt;forceCollide&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3-force#forceCollide&#34; target=&#34;_blank&#34;&gt;forceCollide&lt;/a&gt; (for preventing elements overlapping)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creates a new circle collision force with the specified radius.
If radius is not specified, it defaults to the constant one for all nodes.&lt;/p&gt;

&lt;p&gt;forceCollide is used to stop elements overlapping and is useful when ‘clumping’ circles together.&lt;/p&gt;

&lt;p&gt;We must specify the radius of the elements using .radius():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var numNodes = 100
var nodes = d3.range(numNodes).map(function(d) {
  return {radius: Math.random() * 25}
})

var simulation = d3.forceSimulation(nodes)
  .force(&#39;charge&#39;, d3.forceManyBody().strength(5))
  .force(&#39;center&#39;, d3.forceCenter(width / 2, height / 2))
  .force(&#39;collision&#39;, d3.forceCollide().radius(function(d) {
    return d.radius
  }))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;forcex-and-forcey&#34;&gt;forceX and forceY&lt;/h3&gt;

&lt;p&gt;forceX and forceY cause elements to be attracted towards specified position(s).&lt;/p&gt;

&lt;h4 id=&#34;forcex&#34;&gt;forceX&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3-force#forceX&#34; target=&#34;_blank&#34;&gt;forceX&lt;/a&gt; for attracting elements to a given point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creates a new positioning force along the x-axis towards the given position x.
If x is not specified, it defaults to 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;simulation.force(&#39;x&#39;, d3.forceX().x(function(d) {
  return xCenter[d.category];
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;forcey&#34;&gt;forceY&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3-force#forceY&#34; target=&#34;_blank&#34;&gt;forceY&lt;/a&gt; for attracting elements to a given point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creates a new positioning force along the y-axis towards the given position y.
If y is not specified, it defaults to 0.&lt;/p&gt;

&lt;h4 id=&#34;forcelink&#34;&gt;forceLink&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d3/d3-force#forceLink&#34; target=&#34;_blank&#34;&gt;forceLink&lt;/a&gt; for creating a fixed distance between connected elements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creates a new link force with the specified links and default parameters.
If links is not specified, it defaults to the empty array.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;forceLink pushes linked elements to be a fixed distance apart.&lt;/li&gt;
&lt;li&gt;It requires an array of links that specify which elements we want to link together. * Each link object specifies a source and target element, where the value is the element’s array index:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var links = [
  {source: 0, target: 1},
  {source: 0, target: 2},
  {source: 0, target: 3},
  {source: 1, target: 6},
  {source: 3, target: 4},
  {source: 3, target: 7},
  {source: 4, target: 5},
  {source: 4, target: 7}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pass our links array into the forceLink function using .links():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;simulation.force(&#39;link&#39;, d3.forceLink().links(links))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once again all credit for this content goes to &lt;a href=&#34;http://d3indepth.com/force-layout/&#34; target=&#34;_blank&#34;&gt;d3indepth.com/force-layout/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;force-layout-1&#34;&gt;Force Layout&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://bl.ocks.org/mbostock/ad70335eeef6d167bc36fd3c04378048&#34; target=&#34;_blank&#34;&gt;Force Layout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blockbuilder.org/jbelmont/1aab97d586c87c2872b0ceeaa7769773&#34; target=&#34;_blank&#34;&gt;Force Layout Forked Demo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;d3-and-vuejs&#34;&gt;D3 and Vuejs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://jsfiddle.net/jbelmont/peb26h33/8/&#34; target=&#34;_blank&#34;&gt;D3 and Vuejs jsFiddle&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;data-visualization-best-practices&#34;&gt;Data Visualization Best Practices&lt;/h2&gt;

&lt;p&gt;There is a wonderful illustration in this &lt;a href=&#34;https://www.tableau.com/sites/default/files/media/whitepaper_visual-analysis-guidebook_0.pdf&#34; target=&#34;_blank&#34;&gt;Tableau White Paper&lt;/a&gt; on Data Visualization Best Practices&lt;/p&gt;

&lt;h2 id=&#34;general-data-visualization-resources&#34;&gt;General Data Visualization Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.dashingd3js.com/table-of-contents&#34; target=&#34;_blank&#34;&gt;Dashing D3js&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.visualisingdata.com&#34; target=&#34;_blank&#34;&gt;Visualizing Data&lt;/a&gt;&lt;/strong&gt; - a fantastic blog about data visualization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://flowingdata.com&#34; target=&#34;_blank&#34;&gt;Flowing Data&lt;/a&gt;&lt;/strong&gt; - another data visualization blog.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://infosthetics.com&#34; target=&#34;_blank&#34;&gt;Information Aesthetics&lt;/a&gt;&lt;/strong&gt; - Another good blog.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://sxywu.com/&#34; target=&#34;_blank&#34;&gt;Shirley Wu&lt;/a&gt;&lt;/strong&gt; - Excellent blog on Data Visualization.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data-visualization-experts-and-companies&#34;&gt;Data Visualization Experts and Companies&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://blog.blprnt.com&#34; target=&#34;_blank&#34;&gt;Jer Thorp&lt;/a&gt;&lt;/strong&gt; - Data artist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://feltron.tumblr.com&#34; target=&#34;_blank&#34;&gt;Nicolas Feltron&lt;/a&gt;&lt;/strong&gt; - Data artist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://stamen.com&#34; target=&#34;_blank&#34;&gt;Stamen&lt;/a&gt;&lt;/strong&gt; - Data visualization company, excellent blog, heavy focus on maps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://fathom.info/latest/&#34; target=&#34;_blank&#34;&gt;Fathom&lt;/a&gt;&lt;/strong&gt; - Another interesting data visualization company.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gitbook-link&#34;&gt;Gitbook Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.marcelbelmont.com/data-visualization-workshop/&#34; target=&#34;_blank&#34;&gt;D3 Data Visualization Gitbook&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;github-repo&#34;&gt;Github Repo&lt;/h2&gt;

&lt;p&gt;If you like this information please get more details and challenges at &lt;a href=&#34;https://github.com/jbelmont/data-visualization-workshop&#34; target=&#34;_blank&#34;&gt;Data Visualization Workshop&lt;/a&gt; and star the repository.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Book Review of Designing Interface Animation</title>
      <link>https://www.marcelbelmont.com/post/a-book-review-of-designing-interface-animation/</link>
      <pubDate>Wed, 13 Sep 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/a-book-review-of-designing-interface-animation/</guid>
      <description>

&lt;h1 id=&#34;a-book-review-of-designing-interface-animation&#34;&gt;A Book Review of Designing Interface Animation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-case-for-animation&#34;&gt;The Case for animation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#why-you-cannot-ignore-animation&#34;&gt;Why you can&amp;rsquo;t ignore animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#you-already-know-more-about-animation-than-you-think&#34;&gt;You Already know more about animation than you think&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modern-principles-of-interactive-animation&#34;&gt;Modern Principles of Interactive Animation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-animation-to-solve-design-problems&#34;&gt;Using Animation to Solve Design Problems&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-animation-to-orient-and-give-context&#34;&gt;Using Animation to Orient and Give Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-animation-to-direct-focus-and-attention&#34;&gt;Using Animation to Direct Focus and Attention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-animation-to-show-cause-and-effect&#34;&gt;Using Animation to Show Cause and Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-animation-for-feedback&#34;&gt;Using Animation for Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-animation-to-demonstrate&#34;&gt;Using Animation to Demonstrate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-animation-to-express-your-brand&#34;&gt;Using Animation to Express Your Brand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#animation-in-your-work-and-process&#34;&gt;Animation in Your Work and Process&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#where-animation-fits-in-your-design-process&#34;&gt;Where Animation Fits in your Design Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prototyping-your-animation-ideas&#34;&gt;Prototyping Your Animation Ideas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#animating-responsibly&#34;&gt;Animating Responsibly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#purchase-designing-interface-animation&#34;&gt;Purchase Designing Interface Animation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-case-for-animation&#34;&gt;The Case for animation&lt;/h2&gt;

&lt;p&gt;PART I&lt;/p&gt;

&lt;h4 id=&#34;why-you-cannot-ignore-animation&#34;&gt;Why you cannot ignore animation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Animation has some positive effects on the brain such as reducing cognitive load when done right&lt;/li&gt;
&lt;li&gt;Animation helps to communicate on a different level than things like type and color&lt;/li&gt;
&lt;li&gt;Animation can be a design constant in user experiences that span across devices, screen sizes, and platforms&lt;/li&gt;
&lt;li&gt;Animation can be used to focus user attention and help reinforce &lt;code&gt;content hierarchy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Animation can reinforce a personal/company brand personality and values&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;you-already-know-more-about-animation-than-you-think&#34;&gt;You Already know more about animation than you think&lt;/h4&gt;

&lt;p&gt;Val Head goes over the 12 classic principles of animation and which ones pertain to animation&lt;/p&gt;

&lt;h6 id=&#34;12-classic-principles-of-animation&#34;&gt;12 Classic Principles of animation:&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Timing&lt;/li&gt;
&lt;li&gt;Follow-through and overlapping action&lt;/li&gt;
&lt;li&gt;Anticipation&lt;/li&gt;
&lt;li&gt;Secondary action&lt;/li&gt;
&lt;li&gt;Arcs&lt;/li&gt;
&lt;li&gt;Squash and stretch&lt;/li&gt;
&lt;li&gt;Slow In and Slow Out&lt;/li&gt;
&lt;li&gt;Exaggeration&lt;/li&gt;
&lt;li&gt;Straight Ahead and Pose to Pose&lt;/li&gt;
&lt;li&gt;Solid Drawing&lt;/li&gt;
&lt;li&gt;Appeal&lt;/li&gt;
&lt;li&gt;Staging&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Out of the 12 classic principles though there are 5 that are most important for animation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timing and spacing&lt;/li&gt;
&lt;li&gt;Follow-through and overlapping action&lt;/li&gt;
&lt;li&gt;Anticipation&lt;/li&gt;
&lt;li&gt;Secondary action&lt;/li&gt;
&lt;li&gt;Arcs&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;modern-principles-of-interactive-animation&#34;&gt;Modern Principles of Interactive Animation&lt;/h4&gt;

&lt;p&gt;Tricks to design animations that are useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have a known purpose for every animation in your user interface&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t create obstacles with animation

&lt;ul&gt;
&lt;li&gt;Meaning don&amp;rsquo;t block users from your using the UI because of your animation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make sure to keep animations flexible and nonblocking&lt;/li&gt;
&lt;li&gt;Make sure to focus on readability above duration

&lt;ul&gt;
&lt;li&gt;Give easing enough time for users to understand what is happening during the animation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make sure to animate the most performant CSS properties so that you have good performance from the start

&lt;ul&gt;
&lt;li&gt;If you animate non performant CSS, you can decrease UI performance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;using-animation-to-solve-design-problems&#34;&gt;Using Animation to Solve Design Problems&lt;/h2&gt;

&lt;p&gt;PART II&lt;/p&gt;

&lt;h4 id=&#34;using-animation-to-orient-and-give-context&#34;&gt;Using Animation to Orient and Give Context&lt;/h4&gt;

&lt;p&gt;Animation can help orient your users to the spatial relationships in your UI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animation helps users create a mental model of the interface and even parts of the UI that aren&amp;rsquo;t visible&lt;/li&gt;
&lt;li&gt;Animation helps move between layers in a layered interface&lt;/li&gt;
&lt;li&gt;Animation helps guide users through steps to complete a task in a UI

&lt;ul&gt;
&lt;li&gt;For example to help onboard new users to your site by animating different features&lt;/li&gt;
&lt;li&gt;This can help users from future issues by better understanding your product features&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Animation helps connect application content with context changes in the UI&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;using-animation-to-direct-focus-and-attention&#34;&gt;Using Animation to Direct Focus and Attention&lt;/h4&gt;

&lt;p&gt;Utilize Animation&amp;rsquo;s ability to grab attention by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animating the most important content for your users&lt;/li&gt;
&lt;li&gt;Use animation to direct eye flow and guide users gaze through the content hierachy with motion&lt;/li&gt;
&lt;li&gt;Use animation to help visual continuity to help show when an object has not changed&lt;/li&gt;
&lt;li&gt;Use a defined easing palette and create contrast of motion or easing&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;using-animation-to-show-cause-and-effect&#34;&gt;Using Animation to Show Cause and Effect&lt;/h4&gt;

&lt;p&gt;Use animation to show users what effect their actions have triggered in the UI while they complete a task:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure to hint at affordances with animation

&lt;ul&gt;
&lt;li&gt;Affordance being the concept of using an object&amp;rsquo;s characteristics to inform you how to use it&lt;/li&gt;
&lt;li&gt;For instance in iPhone the swipe gesture is when you tap in the lower right and and it gives cue to swipe up&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make sure to cue the next step in a series of tasks with animation&lt;/li&gt;
&lt;li&gt;Animation can also help preview the effect of a task before it is done&lt;/li&gt;
&lt;li&gt;Animation can confirm an action&amp;rsquo;s effect once it is done&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;using-animation-for-feedback&#34;&gt;Using Animation for Feedback&lt;/h4&gt;

&lt;p&gt;Animation can help make feedback better by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animating more effectively any attention-grabbing error messages&lt;/li&gt;
&lt;li&gt;Animation can visually confirm behind-the-scenes-task when in context&lt;/li&gt;
&lt;li&gt;Animation can also provide meaningful loading indicators

&lt;ul&gt;
&lt;li&gt;When used appropriately loading indicators can help users understand that something is occurring in the background&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Animation such as a skeleton background can give visual cues to users and help make perceived wait times in a UI to feel shorter&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;using-animation-to-demonstrate&#34;&gt;Using Animation to Demonstrate&lt;/h4&gt;

&lt;p&gt;Animation Focus:&lt;/p&gt;

&lt;p&gt;An animation should have a clear focus of either a single feature or a single aspect of a story to tell&lt;/p&gt;

&lt;p&gt;Animation Length:&lt;/p&gt;

&lt;p&gt;Make sure to keep animation succint and show a single taks or action at a time&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t block access to user content or navigation when using an animation&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;using-animation-to-express-your-brand&#34;&gt;Using Animation to Express Your Brand&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Animation design guidelines or values can help keep your personal/company brand efforts consistent and cohesive

&lt;ul&gt;
&lt;li&gt;The big takeaway is that teams need to communicate how animations work throughout the UI to avoid confusing users with different types of animations where there should be consistency&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make sure to collect and evaluate existing animation as a group with a motion audi

&lt;ul&gt;
&lt;li&gt;This can give you valuable insight into how your company is using animation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Animation can also be used to describe your brand much like Words are used&lt;/li&gt;
&lt;li&gt;Make sure to look for real-world objects or even animals to emulate to define what your brand looks like in motion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;animation-in-your-work-and-process&#34;&gt;Animation in Your Work and Process&lt;/h2&gt;

&lt;p&gt;Part III&lt;/p&gt;

&lt;h4 id=&#34;where-animation-fits-in-your-design-process&#34;&gt;Where Animation Fits in your Design Process&lt;/h4&gt;

&lt;p&gt;Tips to make sure animation is part of your design process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start animation discussions early&lt;/li&gt;
&lt;li&gt;Use storyboards to brainstorm animation ideas quickly early on&lt;/li&gt;
&lt;li&gt;Make sure to use prototypes and motion mock-ups to test how your animation ideas hold up with user interaction

&lt;ul&gt;
&lt;li&gt;Also prototypes help discuss ideas with fellow team members&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Document animation design decisions in your animation style guide&lt;/li&gt;
&lt;li&gt;Try to keep communication open and try to discuss animation ideas and opportunities through a project life-cycle&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;prototyping-your-animation-ideas&#34;&gt;Prototyping Your Animation Ideas&lt;/h4&gt;

&lt;p&gt;4 Points are made to keep prototyping focused:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quick sketches help build great low-fidelity prototypes to help shape direction that animation should take

&lt;ul&gt;
&lt;li&gt;Low-fidelity prototypes being a quick sketch on paper or on a whiteboard&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Motion comps can be helpful in evaluating the behavior of an animation; like how an animation responds to input and whether an animation gives timely feedback to users&lt;/li&gt;
&lt;li&gt;Interactive prototypes can be quick and simple to make and they don&amp;rsquo;t have to have production quality code&lt;/li&gt;
&lt;li&gt;Some specific tools are mentioned like Framer.js or making HTML, CSS prototypes in code&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;animating-responsibly&#34;&gt;Animating Responsibly&lt;/h4&gt;

&lt;p&gt;Points to keep in mind to animate responsibly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animations can be both beneficial and harmful for accessibility.

&lt;ul&gt;
&lt;li&gt;Always aim to minimize harmful animation effects and maximimize potential benefits&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Design animations with users with vestibular disorders (disorders related to balance and dizziness) in mind.

&lt;ul&gt;
&lt;li&gt;Make your animations purposeful and give accurate context cues and provide a means to reduce an animation motion&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make sure to treat animations as a layer of enhancement to make your work more universal and less fragile&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;purchase-designing-interface-animation&#34;&gt;Purchase Designing Interface Animation&lt;/h2&gt;

&lt;p&gt;You can purchase interface animation at &lt;a href=&#34;Purchase Designing Interface Animation&#34; target=&#34;_blank&#34;&gt;Designing Interface Animation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Great job Val Head&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single Sign-On concepts explained through Oauth, Saml and Json Web Tokens</title>
      <link>https://www.marcelbelmont.com/post/concepts-in-single-sign-on-using-jwt-and-saml/</link>
      <pubDate>Wed, 06 Sep 2017 14:41:25 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/concepts-in-single-sign-on-using-jwt-and-saml/</guid>
      <description>

&lt;h1 id=&#34;authentication-authorization-oauth-saml&#34;&gt;Authentication, Authorization, Oauth, SAML&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-authentication-with-http&#34;&gt;Basic Authentication with HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#digest-schemes&#34;&gt;Digest Schemes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#single-sign-on-with-oauth-and-saml&#34;&gt;Single Sign-On with Oauth and SAML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oauth&#34;&gt;Oauth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#security-assertion-markup-language&#34;&gt;Security Assertion Markup Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#repo-details&#34;&gt;Repo Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;basic-authentication-with-http&#34;&gt;Basic Authentication with HTTP&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;HTTP/1.0&amp;rdquo;, includes the specification for a Basic Access
Authentication scheme. This scheme is not considered to be a secure
method of user authentication (unless used in conjunction with some
external secure system such as SSL [5]), as the user name and
password are passed over the network as cleartext.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2617&#34; target=&#34;_blank&#34;&gt;Basic Authentication RFC2617&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If an HTTP receives an anonymous request for a protected resource it can force the use of Basic authentication by rejecting the request with a 401 (Access Denied) status code and setting the WWW-Authenticate response header as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;HTTP/1.1 401 Access Denied
WWW-Authenticate: Basic realm=&amp;quot;My Server&amp;quot;
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;basic-authentication-the-client-sends-the-user-name-and-password-as-unencrypted-base64-encoded-text&#34;&gt;Basic Authentication - The client sends the user name and password as unencrypted base64 encoded text.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Basic Authenthication should only be used with HTTPS, as the password can be easily captured and reused over HTTP.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-of-basic-auth-using-curl-with-neither-authorization-header-set-nor-username-and-password-set-in-url&#34;&gt;Example of Basic Auth using CURL with neither Authorization header set nor username and password set in url&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;curl -k -X GET &amp;quot;https://localhost:3000/api/v1/basicAuth&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns the header&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;WWW-Authenticate →Basic realm=&amp;quot;need login credendtials&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The HTTP Status Code of &lt;code&gt;401&lt;/code&gt; meaning unauthorized&lt;/p&gt;

&lt;p&gt;Using Basic Auth in url with Curl Command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;curl -k -X GET &amp;quot;https://rambo:soldier@localhost:3000/api/v1/basicAuth&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns following response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;credentials&amp;quot;: {
    &amp;quot;username&amp;quot;: &amp;quot;rambo&amp;quot;,
    &amp;quot;password&amp;quot;: &amp;quot;soldier&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;providing-the-following-username-and-password-credentials&#34;&gt;Providing the following username and password credentials&lt;/h5&gt;

&lt;p&gt;Username: &lt;code&gt;rambo&lt;/code&gt;
Password: &lt;code&gt;soldier&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using Chrome Developer Tools JavaScript Console:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;window.btoa(&amp;quot;rambo&amp;quot; + &amp;quot;:&amp;quot; + &amp;quot;soldier&amp;quot;)&lt;/code&gt; returns base64 encoded string &lt;code&gt;cmFtYm86c29sZGllcg==&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using Node.js Buffer toString Method in node repl&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;new Buffer(&#39;rambo&#39; + &#39;:&#39; + &#39;soldier&#39;).toString(&#39;base64&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;return base64 encode string &lt;code&gt;cmFtYm86c29sZGllcg==&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using Basic Auth with Authorization Header set&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;curl -k -X GET -H &amp;quot;Authorization: Basic cmFtYm86c29sZGllcg==&amp;quot; &amp;quot;https://localhost:3000/api/v1/basicAuth&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns following response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;credentials&amp;quot;: {
    &amp;quot;username&amp;quot;: &amp;quot;rambo&amp;quot;,
    &amp;quot;password&amp;quot;: &amp;quot;soldier&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to parse The Authorization Header in Chrome and return an object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;atob(&#39;basic cmFtYm86c29sZGllcg==&#39;
  .split(&#39; &#39;)[1])
  .split(&#39;:&#39;)
  .reduce((prev, curr, idx, arr) =&amp;gt;  {
    prev[curr] = curr;
    return prev;
  }, {});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to parse the Authorization Header in Nodejs and return an object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const authorization = &#39;basic cmFtYm86c29sZGllcg==&#39;.split(&#39; &#39;);
const parseString = new Buffer(authorization[1], &#39;base64&#39;).toString();
return parseString.split(&#39;:&#39;)
  .reduce((prev, curr, idx, arr) =&amp;gt;  {
    prev[curr] = curr;
    return prev;
  }, {});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;digest-schemes&#34;&gt;Digest Schemes&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;the Digest scheme is based on a
simple challenge-response paradigm. The Digest scheme challenges
using a nonce value. A valid response contains a checksum (by
default, the MD5 checksum) of the username, the password, the given
nonce value, the HTTP method, and the requested URI. In this way, the
password is never sent in the clear. Just as with the Basic scheme,
the username and password must be prearranged in some fashion not
addressed by this document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2617&#34; target=&#34;_blank&#34;&gt;Digest Schemes RFC2617&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Digest Access Authentication scheme is not intended to be a
complete answer to the need for security in the World Wide Web. This
scheme provides no encryption of message content. The intent is
simply to create an access authentication method that avoids the most
serious flaws of Basic authentication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2617#page-6&#34; target=&#34;_blank&#34;&gt;Digest Access Authentication&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;digest-authentication&#34;&gt;Digest Authentication&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The Digest scheme is based on a simple challenge-response paradigm.
The Digest scheme challenges using a nonce value and might indicate
that username hashing is supported.  A valid response contains an
unkeyed digest of the username, the password, the given nonce value,
the HTTP method, and the requested URI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Digest access authentication was originally specified by RFC 2069 (An Extension to HTTP: Digest Access Authentication).
RFC 2069 specifies roughly a traditional digest authentication scheme with security maintained by a server-generated noncevalue.
The authentication response is formed as follows (where HA1 and HA2 are names of string variables):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MD5&#34; target=&#34;_blank&#34;&gt;MD5 Algorithm&lt;/a&gt;
&lt;strong&gt;MD5 is an algorithm that produces a hash&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ha1 = md5(username:realm:password)&lt;/code&gt;
&lt;code&gt;ha2 = md5(HTTPMethod:digestURI)&lt;/code&gt;
&lt;code&gt;response = md5(ha1:nonce:ha2)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function md5({ str, encoding = &#39;hex&#39; }) {
  return crypto
    .createHash(&#39;md5&#39;)
    .update(str)
    .digest(encoding);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A custom md5 function that uses &lt;code&gt;nodejs&lt;/code&gt; crypto library.&lt;/p&gt;

&lt;p&gt;Test usage for md5 to compute &lt;code&gt;ha1&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;test(&#39;mdf5 should compute challenge when given ha2, nonce, cnonce, and qop&#39;, assert =&amp;gt; {
  const md5 = require(&#39;../../utils/md5&#39;).md5;
  const ha2 = md5({
    str: &#39;GET:/api/v1/digestScheme&#39;
  });
  const actual = md5({
    str: `${ha2}:${process.env.NONCE}:${process.env.NONCE}:auth`
  });
  const expected = &#39;adc91a91ffaa68815d5a5d8e4ed8d9e9&#39;;
  assert.is(actual, expected, `should return ${expected}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-www-authenticate-response-header-field&#34;&gt;The WWW-Authenticate Response Header Field&lt;/h2&gt;

&lt;p&gt;Set HTTP header like so&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;res.setHeader(
  &#39;WWW-Authenticate&#39;,
  `Digest realm=&amp;quot;https://localhost:3000/api/v1/digestScheme&amp;quot;,
  qop=&amp;quot;auth, auth-int&amp;quot;, algorithm=MD5,
  nonce=&amp;quot;${process.env.NONCE}&amp;quot;,
  opaque=&amp;quot;${process.env.OPAQUE}&amp;quot;`
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Server Challenge computed as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function serverResponse({ ha2, nonce, cnonce, qop }) {
  return md5({
    str: `${ha2}:${nonce}:${cnonce}:${qop}`
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checking client response with server response and if they match return authenticated property&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (clientChallenge !== serverChallenge) {
    res.setHeader(
      &#39;WWW-Authenticate&#39;,
      `Digest realm=&amp;quot;https://localhost:3000/api/v1/digestScheme&amp;quot;,
      qop=&amp;quot;auth, auth-int&amp;quot;, algorithm=MD5,
      nonce=&amp;quot;${process.env.NONCE}&amp;quot;,
      opaque=&amp;quot;${process.env.OPAQUE}&amp;quot;`
    );
    res.send(responseCodes[&#39;unauthorized&#39;]);
} else {
  res.send(responseCodes[&#39;ok&#39;], {
    authenticated: true
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;single-sign-on-with-oauth-and-saml&#34;&gt;Single Sign-On with Oauth and SAML&lt;/h2&gt;

&lt;h3 id=&#34;sso&#34;&gt;SSO&lt;/h3&gt;

&lt;p&gt;SSO (Single Sign On) occurs when a user logs in to one Client and is then signed in to other Clients automatically, regardless of the platform, technology, or domain the user is using.&lt;/p&gt;

&lt;p&gt;Single sign-on (SSO) is a session and user authentication service that permits a user to use one set of login credentials (e.g., name and password) to access multiple applications.
The service authenticates the end user for all the applications the user has been given rights to and eliminates further prompts when the user switches applications during the same session.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.sitepoint.com/single-sign-on-explained/&#34; target=&#34;_blank&#34;&gt;SSO&lt;/a&gt;
&lt;strong&gt;A good example of the use of SSO is in Google’s services. You need only be signed in to one primary Google account to access different services like YouTube, Gmail, Google+, Google Analytics, and more.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;oauth&#34;&gt;Oauth&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;OAuth is an open standard for authorization, commonly used as a way for Internet users to authorize websites or applications to access their information on other websites but without giving them the passwords.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;rfc-6749-oauth-2-0-authorization-framework&#34;&gt;RFC 6749 OAuth 2.0 Authorization Framework&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34; target=&#34;_blank&#34;&gt;OAuth&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;roles&#34;&gt;Roles&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The Third-Party Application: &amp;ldquo;Client&amp;rdquo;

&lt;ol&gt;
&lt;li&gt;The client is the application that is attempting to get access to the user&amp;rsquo;s account. It needs to get permission from the user before it can do so.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The API: &amp;ldquo;Resource Server&amp;rdquo;

&lt;ol&gt;
&lt;li&gt;The resource server is the API server used to access the user&amp;rsquo;s information.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The Authorization Server

&lt;ol&gt;
&lt;li&gt;This is the server that presents the interface where the user approves or denies the request. In smaller implementations, this may be the same server as the API server, but larger scale deployments will often build this as a separate component.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The User: &amp;ldquo;Resource Owner&amp;rdquo;

&lt;ol&gt;
&lt;li&gt;The resource owner is the person who is giving access to some portion of their account.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;creating-an-application-for-oauth&#34;&gt;Creating an application for OAuth&lt;/h3&gt;

&lt;p&gt;When registering a new app, you usually register basic information such as application name, website, a logo, etc.
In addition, you must register a redirect URI to be used for redirecting users to for web server, browser-based, or mobile apps.&lt;/p&gt;

&lt;h4 id=&#34;redirect-uris&#34;&gt;Redirect URIs&lt;/h4&gt;

&lt;p&gt;Any HTTP redirect URIs must be protected with TLS security, so the service will only redirect to URIs beginning with &amp;ldquo;https&amp;rdquo;.
This prevents tokens from being intercepted during the authorization process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remember that HTTP is a clear text protocol&lt;/em&gt;
&lt;em&gt;Someone can easily sniff packets with tools like Wireshark and see passwords, etc.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;client-id-and-secret&#34;&gt;Client ID and Secret&lt;/h4&gt;

&lt;p&gt;Upon registering your app, you will receive a client id and secret&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client ID is considered public information, and is used to build login URLs, or included in Javascript source code on a page.&lt;/li&gt;
&lt;li&gt;The client secret must be kept confidential.

&lt;ol&gt;
&lt;li&gt;If a deployed app cannot keep the secret confidential, such as single-page Javascript apps or native apps, then the secret is not used, and ideally the service shouldn&amp;rsquo;t issue a secret to these types of apps in the first place.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;authorization&#34;&gt;Authorization&lt;/h3&gt;

&lt;p&gt;OAuth 2 provides several &amp;ldquo;grant types&amp;rdquo; for different use cases. The grant types defined are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Authorization Code for apps running on a web server, browser-based and mobile apps.&lt;/li&gt;
&lt;li&gt;Password for logging in with a username and password&lt;/li&gt;
&lt;li&gt;Client credentials for application access&lt;/li&gt;
&lt;li&gt;Implicit was previously recommended for clients without a secret, but has been superceded by using the Authorization Code grant with no secret.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;token-exchange&#34;&gt;Token Exchange&lt;/h3&gt;

&lt;p&gt;Client Request&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://oauth2server.com/auth?response_type=code&amp;amp;client_id=CLIENT_ID&amp;amp;redirect_uri=REDIRECT_URI&amp;amp;scope=photos&amp;amp;state=1234zyx&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;POST https://api.oauth2server.com/token
  grant_type=authorization_code
  &amp;amp;code=AUTH_CODE_HERE
  &amp;amp;redirect_uri=REDIRECT_URI
  &amp;amp;client_id=CLIENT_ID
  &amp;amp;client_secret=CLIENT_SECRET
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Remember the ampersand (&amp;amp;) is a query string separator which are appended to urls&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Break down of the query&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grant_type=authorization_code&lt;/code&gt; - The grant type for this flow is authorization_code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code=AUTH_CODE_HERE&lt;/code&gt; - This is the code you received in the query string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirect_uri=REDIRECT_URI&lt;/code&gt; - Must be identical to the redirect URI provided in the original link&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_id=CLIENT_ID&lt;/code&gt; - The client ID you received when you first created the application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_secret=CLIENT_SECRET&lt;/code&gt; - Since this request is made from server-side code, the secret is included&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Server responds with this possible 200 response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;access_token&amp;quot;: &amp;quot;RsT5OjbzRn430zqMLgV3Ia&amp;quot;,
  &amp;quot;expires_in&amp;quot;: 3600
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or this possible 500 level HTTP Error response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;error&amp;quot;: &amp;quot;invalid_request&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;single-page-apps&#34;&gt;Single-Page Apps&lt;/h4&gt;

&lt;p&gt;GET request from client &lt;code&gt;https://oauth2server.com/auth?response_type=code&amp;amp;client_id=CLIENT_ID&amp;amp;redirect_uri=REDIRECT_URI&amp;amp;scope=photos&amp;amp;state=1234zyx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Newer query string parameters&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;scope - One or more scope values indicating which parts of the user&amp;rsquo;s account you wish to access&lt;/li&gt;
&lt;li&gt;state - A random string generated by your application, which you&amp;rsquo;ll verify later&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;other-grant-types&#34;&gt;Other Grant Types&lt;/h2&gt;

&lt;p&gt;OAuth 2 also provides a &amp;ldquo;password&amp;rdquo; grant type which can be used to exchange a username and password for an access token directly.
Since this obviously requires the application to collect the user&amp;rsquo;s password, it must only be used by apps created by the service itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;POST https://api.oauth2server.com/token
  grant_type=password&amp;amp;
  username=USERNAME&amp;amp;
  password=PASSWORD&amp;amp;
  client_id=CLIENT_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grant_type=password&lt;/code&gt; - The grant type for this flow is password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username=USERNAME&lt;/code&gt; - The user&amp;rsquo;s username as collected by the application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password=PASSWORD&lt;/code&gt; - The user&amp;rsquo;s password as collected by the application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_id=CLIENT_ID&lt;/code&gt; - The client ID you received when you first created the application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sample Curl Request with bearer token&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -H &amp;quot;Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia&amp;quot; \
https://api.oauth2server.com/1/me
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;security-assertion-markup-language&#34;&gt;Security Assertion Markup Language&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Security Assertion Markup Language (SAML, pronounced sam-el) is an XML-based,
open-standard data format for exchanging authentication and authorization data between parties,
in particular, between an identity provider and a service provider.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&#34; target=&#34;_blank&#34;&gt;SAML&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SAML is an XML-based framework that allows identity and security information to be shared across security domains.&lt;/p&gt;

&lt;p&gt;The Assertion, an XML security token, is a fundamental construct of SAML that is often adopted for use in other protocols and specifications.&lt;/p&gt;

&lt;h4 id=&#34;saml&#34;&gt;SAML&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7522&#34; target=&#34;_blank&#34;&gt;RFC 7522&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SAML is a standard for logging users into applications based on their sessions in another context.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This single sign-on (SSO) login standard has significant advantages over logging in using a username/password:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No need to type in credentials&lt;/li&gt;
&lt;li&gt;No need to remember and renew passwords&lt;/li&gt;
&lt;li&gt;No weak passwords&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SAML SSO works by transferring the user’s identity from one place (the identity provider) to another (the service provider)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is done through an exchange of digitally signed XML documents.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example that contains contains an authorization request.
An Authorization Request is sent by the Service Provider to the Identity Provider.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;samlp:AuthnRequest xmlns:samlp=&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot; xmlns:saml=&amp;quot;urn:oasis:names:tc:SAML:2.0:assertion&amp;quot; ID=&amp;quot;pfx41d8ef22-e612-8c50-9960-1b16f15741b3&amp;quot; Version=&amp;quot;2.0&amp;quot; ProviderName=&amp;quot;SP test&amp;quot; IssueInstant=&amp;quot;2014-07-16T23:52:45Z&amp;quot; Destination=&amp;quot;http://idp.example.com/SSOService.php&amp;quot; ProtocolBinding=&amp;quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&amp;quot; AssertionConsumerServiceURL=&amp;quot;http://sp.example.com/demo1/index.php?acs&amp;quot;&amp;gt;
  &amp;lt;saml:Issuer&amp;gt;http://sp.example.com/demo1/metadata.php&amp;lt;/saml:Issuer&amp;gt;
  &amp;lt;ds:Signature xmlns:ds=&amp;quot;http://www.w3.org/2000/09/xmldsig#&amp;quot;&amp;gt;
    &amp;lt;ds:SignedInfo&amp;gt;
      &amp;lt;ds:CanonicalizationMethod Algorithm=&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;/&amp;gt;
      &amp;lt;ds:SignatureMethod Algorithm=&amp;quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&amp;quot;/&amp;gt;
      &amp;lt;ds:Reference URI=&amp;quot;#pfx41d8ef22-e612-8c50-9960-1b16f15741b3&amp;quot;&amp;gt;
        &amp;lt;ds:Transforms&amp;gt;
          &amp;lt;ds:Transform Algorithm=&amp;quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&amp;quot;/&amp;gt;
          &amp;lt;ds:Transform Algorithm=&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;/&amp;gt;
        &amp;lt;/ds:Transforms&amp;gt;
        &amp;lt;ds:DigestMethod Algorithm=&amp;quot;http://www.w3.org/2000/09/xmldsig#sha1&amp;quot;/&amp;gt;
        &amp;lt;ds:DigestValue&amp;gt;yJN6cXUwQxTmMEsPesBP2NkqYFI=&amp;lt;/ds:DigestValue&amp;gt;
      &amp;lt;/ds:Reference&amp;gt;
    &amp;lt;/ds:SignedInfo&amp;gt;
    &amp;lt;ds:SignatureValue&amp;gt;g5eM9yPnKsmmE/Kh2qS7nfK8HoF6yHrAdNQxh70kh8pRI4KaNbYNOL9sF8F57Yd+jO6iNga8nnbwhbATKGXIZOJJSugXGAMRyZsj/rqngwTJk5KmujbqouR1SLFsbo7Iuwze933EgefBbAE4JRI7V2aD9YgmB3socPqAi2Qf97E=&amp;lt;/ds:SignatureValue&amp;gt;
    &amp;lt;ds:KeyInfo&amp;gt;
      &amp;lt;ds:X509Data&amp;gt;
        &amp;lt;ds:X509Certificate&amp;gt;MIICajCCAdOgAwIBAgIBADANBgkqhkiG9w0BAQQFADBSMQswCQYDVQQGEwJ1czETMBEGA1UECAwKQ2FsaWZvcm5pYTEVMBMGA1UECgwMT25lbG9naW4gSW5jMRcwFQYDVQQDDA5zcC5leGFtcGxlLmNvbTAeFw0xNDA3MTcwMDI5MjdaFw0xNTA3MTcwMDI5MjdaMFIxCzAJBgNVBAYTAnVzMRMwEQYDVQQIDApDYWxpZm9ybmlhMRUwEwYDVQQKDAxPbmVsb2dpbiBJbmMxFzAVBgNVBAMMDnNwLmV4YW1wbGUuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC7vU/6R/OBA6BKsZH4L2bIQ2cqBO7/aMfPjUPJPSn59d/f0aRqSC58YYrPuQODydUABiCknOn9yV0fEYm4bNvfjroTEd8bDlqo5oAXAUAI8XHPppJNz7pxbhZW0u35q45PJzGM9nCv9bglDQYJLby1ZUdHsSiDIpMbGgf/ZrxqawIDAQABo1AwTjAdBgNVHQ4EFgQU3s2NEpYx7wH6bq7xJFKa46jBDf4wHwYDVR0jBBgwFoAU3s2NEpYx7wH6bq7xJFKa46jBDf4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQQFAAOBgQCPsNO2FG+zmk5miXEswAs30E14rBJpe/64FBpM1rPzOleexvMgZlr0/smF3P5TWb7H8Fy5kEiByxMjaQmml/nQx6qgVVzdhaTANpIE1ywEzVJlhdvw4hmRuEKYqTaFMLez0sRL79LUeDxPWw7Mj9FkpRYT+kAGiFomHop1nErV6Q==&amp;lt;/ds:X509Certificate&amp;gt;
      &amp;lt;/ds:X509Data&amp;gt;
    &amp;lt;/ds:KeyInfo&amp;gt;
  &amp;lt;/ds:Signature&amp;gt;
  &amp;lt;samlp:NameIDPolicy Format=&amp;quot;urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&amp;quot; AllowCreate=&amp;quot;true&amp;quot;/&amp;gt;
  &amp;lt;samlp:RequestedAuthnContext Comparison=&amp;quot;exact&amp;quot;&amp;gt;
    &amp;lt;saml:AuthnContextClassRef&amp;gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport&amp;lt;/saml:AuthnContextClassRef&amp;gt;
  &amp;lt;/samlp:RequestedAuthnContext&amp;gt;
&amp;lt;/samlp:AuthnRequest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;samlp:Response xmlns:samlp=&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot; xmlns:saml=&amp;quot;urn:oasis:names:tc:SAML:2.0:assertion&amp;quot; ID=&amp;quot;_8e8dc5f69a98cc4c1ff3427e5ce34606fd672f91e6&amp;quot; Version=&amp;quot;2.0&amp;quot; IssueInstant=&amp;quot;2014-07-17T01:01:48Z&amp;quot; Destination=&amp;quot;http://sp.example.com/demo1/index.php?acs&amp;quot; InResponseTo=&amp;quot;ONELOGIN_4fee3b046395c4e751011e97f8900b5273d56685&amp;quot;&amp;gt;
  &amp;lt;saml:Issuer&amp;gt;http://idp.example.com/metadata.php&amp;lt;/saml:Issuer&amp;gt;
  &amp;lt;samlp:Status&amp;gt;
    &amp;lt;samlp:StatusCode Value=&amp;quot;urn:oasis:names:tc:SAML:2.0:status:Success&amp;quot;/&amp;gt;
  &amp;lt;/samlp:Status&amp;gt;
  &amp;lt;saml:Assertion xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xs=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; ID=&amp;quot;_d71a3a8e9fcc45c9e9d248ef7049393fc8f04e5f75&amp;quot; Version=&amp;quot;2.0&amp;quot; IssueInstant=&amp;quot;2014-07-17T01:01:48Z&amp;quot;&amp;gt;
    &amp;lt;saml:Issuer&amp;gt;http://idp.example.com/metadata.php&amp;lt;/saml:Issuer&amp;gt;
    &amp;lt;saml:Subject&amp;gt;
      &amp;lt;saml:NameID SPNameQualifier=&amp;quot;http://sp.example.com/demo1/metadata.php&amp;quot; Format=&amp;quot;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&amp;quot;&amp;gt;_ce3d2948b4cf20146dee0a0b3dd6f69b6cf86f62d7&amp;lt;/saml:NameID&amp;gt;
      &amp;lt;saml:SubjectConfirmation Method=&amp;quot;urn:oasis:names:tc:SAML:2.0:cm:bearer&amp;quot;&amp;gt;
        &amp;lt;saml:SubjectConfirmationData NotOnOrAfter=&amp;quot;2024-01-18T06:21:48Z&amp;quot; Recipient=&amp;quot;http://sp.example.com/demo1/index.php?acs&amp;quot; InResponseTo=&amp;quot;ONELOGIN_4fee3b046395c4e751011e97f8900b5273d56685&amp;quot;/&amp;gt;
      &amp;lt;/saml:SubjectConfirmation&amp;gt;
    &amp;lt;/saml:Subject&amp;gt;
    &amp;lt;saml:Conditions NotBefore=&amp;quot;2014-07-17T01:01:18Z&amp;quot; NotOnOrAfter=&amp;quot;2024-01-18T06:21:48Z&amp;quot;&amp;gt;
      &amp;lt;saml:AudienceRestriction&amp;gt;
        &amp;lt;saml:Audience&amp;gt;http://sp.example.com/demo1/metadata.php&amp;lt;/saml:Audience&amp;gt;
      &amp;lt;/saml:AudienceRestriction&amp;gt;
    &amp;lt;/saml:Conditions&amp;gt;
    &amp;lt;saml:AuthnStatement AuthnInstant=&amp;quot;2014-07-17T01:01:48Z&amp;quot; SessionNotOnOrAfter=&amp;quot;2024-07-17T09:01:48Z&amp;quot; SessionIndex=&amp;quot;_be9967abd904ddcae3c0eb4189adbe3f71e327cf93&amp;quot;&amp;gt;
      &amp;lt;saml:AuthnContext&amp;gt;
        &amp;lt;saml:AuthnContextClassRef&amp;gt;urn:oasis:names:tc:SAML:2.0:ac:classes:Password&amp;lt;/saml:AuthnContextClassRef&amp;gt;
      &amp;lt;/saml:AuthnContext&amp;gt;
    &amp;lt;/saml:AuthnStatement&amp;gt;
    &amp;lt;saml:AttributeStatement&amp;gt;
      &amp;lt;saml:Attribute Name=&amp;quot;uid&amp;quot; NameFormat=&amp;quot;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&amp;quot;&amp;gt;
        &amp;lt;saml:AttributeValue xsi:type=&amp;quot;xs:string&amp;quot;&amp;gt;test&amp;lt;/saml:AttributeValue&amp;gt;
      &amp;lt;/saml:Attribute&amp;gt;
      &amp;lt;saml:Attribute Name=&amp;quot;mail&amp;quot; NameFormat=&amp;quot;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&amp;quot;&amp;gt;
        &amp;lt;saml:AttributeValue xsi:type=&amp;quot;xs:string&amp;quot;&amp;gt;test@example.com&amp;lt;/saml:AttributeValue&amp;gt;
      &amp;lt;/saml:Attribute&amp;gt;
      &amp;lt;saml:Attribute Name=&amp;quot;eduPersonAffiliation&amp;quot; NameFormat=&amp;quot;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&amp;quot;&amp;gt;
        &amp;lt;saml:AttributeValue xsi:type=&amp;quot;xs:string&amp;quot;&amp;gt;users&amp;lt;/saml:AttributeValue&amp;gt;
        &amp;lt;saml:AttributeValue xsi:type=&amp;quot;xs:string&amp;quot;&amp;gt;examplerole1&amp;lt;/saml:AttributeValue&amp;gt;
      &amp;lt;/saml:Attribute&amp;gt;
    &amp;lt;/saml:AttributeStatement&amp;gt;
  &amp;lt;/saml:Assertion&amp;gt;
&amp;lt;/samlp:Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are some libraries that passport-saml uses such as xmlbuilder xmldom, xml-crypto and more to work with saml requests and responses&lt;/p&gt;

&lt;p&gt;Essentially the HTTP Request will be like This with a bearer token&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;GET https://localhost:3000/api/v1/saml

Authorization: &#39;Bearer {ACCESS_TOKEN}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a curl request with a content-type header of application/x-www-form-urlencoded and a grant type in Oauth languagee with client credentials&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://localhost:3000/api/v1/saml
  -d &#39;grant_type=client_credentials&amp;amp;client_id=TestClient&amp;amp;client_secret=TestSecret&#39;
  -H &#39;Content-Type: application/x-www-form-urlencoded&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;json-web-token-jwt&#34;&gt;JSON Web Token (JWT)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34; target=&#34;_blank&#34;&gt;JWT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read the docs at &lt;a href=&#34;https://jwt.io/introduction/&#34; target=&#34;_blank&#34;&gt;JWT&lt;/a&gt; there is a great explanation of JWTs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Essentially with JWTs there is 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Header&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Signature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out &lt;a href=&#34;https://jwt.io/#debugger&#34; target=&#34;_blank&#34;&gt;JWT Debugger&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I wrote some small utilities in the &lt;a href=&#34;https://github.com/jbelmont/sso-with-oauth-and-saml&#34; target=&#34;_blank&#34;&gt;SSO with oAuth and Saml Repo&lt;/a&gt; in the utils folder&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#39;use strict&#39;;

function base64(str) {
  return new Buffer(JSON.stringify(str))
    .toString(&#39;base64&#39;)
    .replace(/=/g,&#39;&#39;)
    .replace(/\+/g,&#39;-&#39;)
    .replace(/\//g,&#39;_&#39;);
}

function b64(str) {
  return new Buffer(JSON.stringify(str))
    .toString(&#39;base64&#39;);
}

exports.base64 = base64;
exports.b64 = b64;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This small function does Base 64 encoding&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#39;use strict&#39;;

function decodeUnsignedJWT(jwt) {
  const [
    headerB64,
    payloadB64
   ] = jwt.split(&#39;.&#39;);
  const headerStr = new Buffer(headerB64, &#39;base64&#39;).toString();
  const payloadStr = new Buffer(payloadB64, &#39;base64&#39;).toString();
  return {
    header: JSON.parse(headerStr),
    payload: JSON.parse(payloadStr)
  };
}

function decodeBasicAuth(str) {
  const usernameAndPassword = str.split(&#39; &#39;)[1];
  const parseString = new Buffer(usernameAndPassword, &#39;base64&#39;).toString();
  const [
    username,
    password
  ] = parseString.split(&#39;:&#39;);
  return {
    username,
    password
  };
}

exports.decodeUnsignedJWT = decodeUnsignedJWT;
exports.decodeBasicAuth = decodeBasicAuth;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;decodeUnsignedJWT&lt;/code&gt; can split a jwt by header and payload&lt;/li&gt;
&lt;li&gt;&lt;code&gt;decodeBasicAuth&lt;/code&gt; can split a Basic Authorization request&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;repo-details&#34;&gt;Repo Details&lt;/h2&gt;

&lt;p&gt;Please star &lt;a href=&#34;https://github.com/jbelmont/sso-with-oauth-and-saml&#34; target=&#34;_blank&#34;&gt;SSO with oauth and saml&lt;/a&gt; and follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont&lt;/a&gt; on Github&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software Testing Foundations</title>
      <link>https://www.marcelbelmont.com/post/software-testing/</link>
      <pubDate>Thu, 31 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/software-testing/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#unit-testing&#34;&gt;Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#integration-testing&#34;&gt;Integration Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-driven-development&#34;&gt;Test-Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#behavior-driven-development&#34;&gt;Behavior-Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#end-to-end-testing&#34;&gt;End-to-End Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mocking&#34;&gt;Mocking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-fixtures&#34;&gt;Test Fixtures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#property-based-testing&#34;&gt;Property Based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;unit-testing&#34;&gt;Unit Testing&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the
&lt;a href=&#34;https://marcelbelmont.com/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.quora.com/Why-does-Kent-Beck-refer-to-the-rediscovery-of-test-driven-development&#34; target=&#34;_blank&#34;&gt;Rediscovery of TDD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instructions for Unit Exercises:
1. Go to unit folder &lt;code&gt;cd unit&lt;/code&gt;
2. Open program.test.js and go to each TODO block.
3. Complete each todo block by adding unit tests.
4. Please run the following script to &lt;code&gt;npm run unit:test&lt;/code&gt; in order to do the unit test exercises&lt;/p&gt;

&lt;h3 id=&#34;1-unit-test-the-map-function&#34;&gt;1. Unit Test the Map Function:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;nest.test(&#39;Unit test the map function&#39;, assert =&amp;gt; {
    assert.equal(actual, expected,
        `should render default message`);
    assert.end();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;for-a-typical-unit-test-i-usually-create-2-variables-one-named-actual-and-another-named-expect&#34;&gt;For a typical unit test I usually create 2 variables one named actual and another named expect&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;For &lt;code&gt;assert.equal(actual, expected, &#39;My message here&#39;)&lt;/code&gt; if actual and expected are equal then the unit test will pass.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The map function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[1,2,3,4,5].map(function(number) {
    return {
        value: number
    };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the following structure&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { value: 1 },
    { value: 2 },
    ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add variables actual and expected to this first unit test.
The equal method expects to get single property/value in order to pass 1 === 1 or &amp;ldquo;Mike&amp;rdquo; === &amp;ldquo;Mike&amp;rdquo;
The deepEqual method does a deep property check like this [1,2,3] === [1,2,3]&lt;/p&gt;

&lt;h3 id=&#34;2-unit-test-the-filter-function&#34;&gt;2. Unit Test the Filter Function.&lt;/h3&gt;

&lt;p&gt;The filter function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[1,2,3,4,5].filter(function(number) {
    return number &amp;gt; 3;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the following structure
&lt;code&gt;[4, 5]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Either choose &lt;code&gt;assert.equal&lt;/code&gt; or &lt;code&gt;assert.deepEqual&lt;/code&gt; but remember deepEqual does a deep check with arrays but equal checks properties.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-unit-test-the-concatall-function&#34;&gt;3. Unit Test the concatAll Function.&lt;/h3&gt;

&lt;p&gt;The concatAll function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[
    [1,2,3,4,5],
    [6,7,8,9,10]
].concatAll();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the following structure
&lt;code&gt;[1,2,3,4,5,6,7,8,9,10]&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;write-a-unit-test-using-the-same-format-as-previous-2-exercises&#34;&gt;Write a Unit Test using the same format as previous 2 exercises.&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;nest.test(&#39;I am some text&#39;, assert =&amp;gt; {
    const actual = ...;
    const expected = ...;
    assert.equal(
        actual,
        expected,
        &#39;I should another text&#39;
    );
    assert.end();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-unit-test-the-concatmap-function&#34;&gt;4. Unit Test the concatMap Function.&lt;/h3&gt;

&lt;p&gt;The concatMap function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const numStrings = [ [&amp;quot;One&amp;quot;, &amp;quot;Two&amp;quot;, &amp;quot;Three&amp;quot;], [&amp;quot;Four&amp;quot;, &amp;quot;Five&amp;quot;, &amp;quot;Six&amp;quot;] ];
[1, 2, 3, 4, 5].concatMap(function(num) {
    return numStrings[num];
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the following structure
&lt;code&gt;[&amp;quot;One&amp;quot;, &amp;quot;Two&amp;quot;, &amp;quot;Three&amp;quot;, &amp;quot;Four&amp;quot;, &amp;quot;Five&amp;quot;, &amp;quot;Six&amp;quot;]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;integration-testing&#34;&gt;Integration Testing&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://marcelbelmont.com/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;distinction-between-unit-tests&#34;&gt;Distinction between Unit Tests&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Introducing dependencies on external modules or data also turns unit tests into integration tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If one module misbehaves in a chain of interrelated modules, it is not so immediately clear where to look for the cause of the failure.&lt;/em&gt;
&lt;em&gt;When code under development relies on a database, a web service, or any other external process or service,&lt;/em&gt;
&lt;em&gt;enforcing a unit-testable separation is also an opportunity and a driving force to design more modular, more testable and more reusable code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34; target=&#34;_blank&#34;&gt;Distinction between Unit Tests&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;starting-instructions&#34;&gt;Starting instructions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Open 2 terminal prompts&lt;/li&gt;
&lt;li&gt;run the command &lt;code&gt;couchdb&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cd integration-tests&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;ii-using-text-editor-of-your-choice-open-program-test-js-and-complete-each-todo-block&#34;&gt;II. Using text editor of your choice open program.test.js and complete each TODO block.&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-finish-integration-test-for-the-api-v1-users-badmofos-endpoint&#34;&gt;1. Finish Integration test for the /api/v1/users/badMofos endpoint:&lt;/h3&gt;

&lt;h4 id=&#34;inspect-the-payload-with-the-following-curl-command&#34;&gt;Inspect the payload with the following curl command&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X GET -H &amp;quot;Accept: application/json&amp;quot; -H &amp;quot;Cache-Control: no-cache&amp;quot; &amp;quot;http://localhost:3000/api/v1/users/badMofos&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-the-telnet-command-and-paste-in-the-following-commands-to-your-terminal-and-hit-enter&#34;&gt;Use the telnet command and paste in the following commands to your terminal and hit enter.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;telnet localhost 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste this GET request into terminal that is expecting request and line feed and hit enter twice&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;GET /api/v1/users/badMofos HTTP/1.1
Host: localhost:3000
Accept: application/json
Cache-Control: no-cache
Postman-Token: f3413251-c0de-69ac-99dd-992bcaaca3bd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-a-rest-client-such-as-postman-chrome-app-or-anything-else&#34;&gt;Use a REST client such as Postman Chrome App or anything else.&lt;/h4&gt;

&lt;h5 id=&#34;whichever-way-you-use-choose-you-get-the-following-json-payload&#34;&gt;Whichever way you use choose you get the following JSON payload&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;_id&amp;quot;: &amp;quot;users&amp;quot;,
  &amp;quot;_rev&amp;quot;: &amp;quot;1-c9d988323eed080b054d6eb467abe4f9&amp;quot;,
  &amp;quot;names&amp;quot;: [
    &amp;quot;John J Rambo&amp;quot;,
    &amp;quot;Conan The Barbarian&amp;quot;,
    &amp;quot;Billy Jack&amp;quot;
  ],
  &amp;quot;ranks&amp;quot;: [
    &amp;quot;One Bad Mofo&amp;quot;,
    &amp;quot;Too Big of a dude&amp;quot;,
    &amp;quot;Kicks too high for my taste&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Add assertion to expect function call in line 16 using the payload information.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-finish-integration-test-for-api-v1-couch-insertdocument-endpoint&#34;&gt;2. Finish Integration Test for /api/v1/couch/insertDocument endpoint&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The Super Test library api docs can be found here &lt;a href=&#34;https://visionmedia.github.io/superagent&#34; target=&#34;_blank&#34;&gt;SuperTest&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;hints-to-complete-the-exercise&#34;&gt;Hints to complete the exercise:&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;1. Use post method in supertest&lt;/em&gt;
&lt;em&gt;2. Use set method in supertest and pass in object with Accept and Content-Type headers.&lt;/em&gt;
&lt;em&gt;3. Use send method in supertest and pass in object with a name and document property.&lt;/em&gt;
&lt;em&gt;4. Make sure to call expect in supertest to do assertion and use previous get request as example.&lt;/em&gt;
&lt;em&gt;5. Make sure to end supertest call with end function call or the integration test won&amp;rsquo;t finish.&lt;/em&gt;
&lt;em&gt;6. Check statuscode with SuperTest property &lt;a href=&#34;https://visionmedia.github.io/superagent/#response-status&#34; target=&#34;_blank&#34;&gt;Status&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;7. Use assertion methods from Tape &lt;a href=&#34;http://www.node-tap.org/asserts&#34; target=&#34;_blank&#34;&gt;Asserts&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;8. CouchDB api documentation &lt;a href=&#34;https://wiki.apache.org/couchdb/HTTP_Document_API&#34; target=&#34;_blank&#34;&gt;Docs&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;9. CouchDB driver for node.js (nano) that I am using &lt;a href=&#34;https://github.com/dscape/nano&#34; target=&#34;_blank&#34;&gt;Docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;making-rest-call-with-curl-for-post-request&#34;&gt;Making Rest Call with Curl for Post Request&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X POST -H &amp;quot;Accept: application/json&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot; -H &amp;quot;Cache-Control: no-cache&amp;quot; -d &#39;{
	&amp;quot;name&amp;quot;: &amp;quot;some-document&amp;quot;,
	&amp;quot;document&amp;quot;: {
		&amp;quot;values&amp;quot;: {
			&amp;quot;one&amp;quot;: 1
		}
	}
}&#39; &amp;quot;http://localhost:3000/api/v1/couch/insertDocument&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-write-an-integration-test-removing-the-newly-created-document-to-api-v1-couch-deletedocument-name&#34;&gt;3. Write an integration test removing the newly created document to /api/v1/couch/deleteDocument/:name&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The Super Test library api docs and rest methods can be found here &lt;a href=&#34;https://visionmedia.github.io/superagent/#request-basics&#34; target=&#34;_blank&#34;&gt;SuperTest&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;hints-to-complete-the-exercise-1&#34;&gt;Hints to complete the exercise:&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;1. Use appropriate supertest method to remove document.&lt;/em&gt;
&lt;em&gt;2. Make assertion with the returned status code (204) is usual status for DELETE request.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;making-rest-call-with-curl-for-delete-request&#34;&gt;Making Rest Call with Curl for Delete Request&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X DELETE -H &amp;quot;Content-Type: application/json&amp;quot; -d &#39;{
	&amp;quot;name&amp;quot;: &amp;quot;spicegirls&amp;quot;
}&#39; &amp;quot;http://localhost:3000/api/v1/couch/deleteDocument&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-driven-development&#34;&gt;Test-Driven Development&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://marcelbelmont.com/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-tdd-via-wikipedia-test-driven-development-https-en-wikipedia-org-wiki-test-driven-development&#34;&gt;Definition of TDD via Wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34; target=&#34;_blank&#34;&gt;Test-Driven Development&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Each test case fails initially: This ensures that the test really works and can catch an error. Once this is shown, the underlying functionality can be implemented. This has led to the &amp;ldquo;test-driven development mantra&amp;rdquo;, which is &amp;ldquo;red/green/refactor&amp;rdquo;, where red means fail and green means pass. Test-driven development constantly repeats the steps of adding test cases that fail, passing them, and refactoring. Receiving the expected test results at each stage reinforces the developer&amp;rsquo;s mental model of the code, boosts confidence and increases productivity.&lt;/p&gt;

&lt;h4 id=&#34;test-driven-development-cycle&#34;&gt;Test-Driven Development Cycle&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;1. Add a test&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;2. Run all tests and see if the new test fails&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;3. Write the code&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;4. Run tests&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;5. Refactor code.&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;Repeat&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;exercise-instructions&#34;&gt;Exercise Instructions&lt;/h4&gt;

&lt;p&gt;Requirements for First TDD Cycle
Create a function that computes the average of a range of numbers.&lt;/p&gt;

&lt;p&gt;Complete exercises in &lt;a href=&#34;https://marcelbelmont.com/software-testing/tree/master/tdd&#34; target=&#34;_blank&#34;&gt;TDD Folder of Repo&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;test-driven-development-cycle-1-add-a-test-run-tests&#34;&gt;Test-Driven Development Cycle 1 (Add a Test / Run Tests)&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go to file path &lt;code&gt;tdd/tdd-cycle/cycle1/program.test.js&lt;/code&gt; and add a failing test by calling a function that doesn&amp;rsquo;t exist in program.js&lt;/li&gt;
&lt;li&gt;Add a failing test in program.test.js using either Mocha with Chai or with Tape from our previous exercies.&lt;/li&gt;
&lt;li&gt;Run the failing test &lt;code&gt;npm run tdd:cycle1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;test-driven-development-cycle-2-write-the-code-run-tests&#34;&gt;Test-Driven Development Cycle 2 (Write the Code / Run Tests)&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go to file path &lt;code&gt;tdd/tdd-cycle/cycle2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the minimal requirement to make the test pass again.&lt;/li&gt;
&lt;li&gt;(Hint) Add an empty function in &lt;code&gt;program.js&lt;/code&gt; and then call it with the appropriate assertion.&lt;/li&gt;
&lt;li&gt;Run the test with &lt;code&gt;npm run tdd:cycle2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;test-driven-development-cycle-3-refactor-by-adding-implementation-add-a-test-run-all-tests-again&#34;&gt;Test-Driven Development Cycle 3 (Refactor by adding implementation / Add a test / Run all Tests again)&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go to file path &lt;code&gt;tdd/tdd-cycle/cycle3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Implement the average function in program.js.&lt;/li&gt;
&lt;li&gt;Add a unit test for the average function with an array of numbers.&lt;/li&gt;
&lt;li&gt;Use appropriate assertion to unit test the function.&lt;/li&gt;
&lt;li&gt;Run the test with &lt;code&gt;npm run tdd:cycle3&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;test-driven-development-cycle-final-refactor-code-add-a-test-run-all-tests-again&#34;&gt;Test-Driven Development Cycle Final / (Refactor code / Add a test / Run all tests again)&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go to the file path &lt;code&gt;tdd/tdd-cycle/cyclefinal&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Refactor the code again with possible different implementation or quit.&lt;/li&gt;
&lt;li&gt;If refactored with newer function than add new test else add run the same test for original implementation&lt;/li&gt;
&lt;li&gt;Run the test with &lt;code&gt;npm run tdd:cycle:final&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;behavior-driven-development&#34;&gt;Behavior-Driven Development&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://marcelbelmont.com/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;definition-of-bdd-via-wikipedia&#34;&gt;Definition of BDD via Wikipedia&lt;/h2&gt;

&lt;p&gt;BDD (behavior-driven development) combines practices from TDD and from ATDD.[27] It includes the practice of writing tests first, but focuses on tests which describe behavior, rather than tests which test a unit of implementation. Tools such as Mspec and Specflow provide a syntax which allow non-programmers to define the behaviors which developers can then translate into automated tests. Behavior-driven development combines the general techniques and principles of TDD with ideas from domain-driven design and object-oriented analysis and design to provide software development and management teams with shared tools and a shared process to collaborate on software development.&lt;/p&gt;

&lt;h2 id=&#34;another-look-at-what-bdd-is-via-josh-davis-blog-http-joshldavis-com-2013-05-27-difference-between-tdd-and-bdd&#34;&gt;Another Look at what BDD is via Josh Davis &lt;a href=&#34;http://joshldavis.com/2013/05/27/difference-between-tdd-and-bdd/&#34; target=&#34;_blank&#34;&gt;Blog&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The main difference is just the wording. BDD uses a more verbose style so that it can be read almost like a sentence.&lt;/p&gt;

&lt;p&gt;In contrast to TDD, BDD is when we write behavior &amp;amp; specification that then drives our software development.
The ability to read your tests like a sentence is a cognitive shift in how you will think about your tests. The argument is that if you can read your tests fluidly, you will naturally write better and more comprehensive tests.&lt;/p&gt;

&lt;p&gt;Instructions for BDD Exercises:
1. Go to bdd folder &lt;code&gt;cd bdd&lt;/code&gt;
2. Open program.test.js and go to each TODO block.
3. Complete each todo block by adding bdd style unit test.
4. In order to complete the exercises run the script &lt;code&gt;npm run bdd:test&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-unit-test-the-findidx-function&#34;&gt;1. Unit Test the findIdx Function:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;it(&#39;Unit test the Array.prototype.findIdx function&#39;, done =&amp;gt; {
        const numbers = [1,2,3,4,5];
        const expected = 2;
        expect(numbers.findIdx(val =&amp;gt; val === 3)).to.eql(expected);

        const names = [
            {
                name: &#39;Marcel&#39;
            },
            {
                name: &#39;Leo&#39;
            },
            {
                name: &#39;Dave&#39;
            }
        ];
        const IDX = 1;
        // TODO add assertions here:
        done();
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;read-the-chai-assertion-assertions-http-chaijs-com-api-assert&#34;&gt;Read the chai assertion &lt;a href=&#34;http://chaijs.com/api/assert&#34; target=&#34;_blank&#34;&gt;Assertions&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id=&#34;read-the-bdd-styles-for-expect-and-should-styles-http-chaijs-com-guide-styles&#34;&gt;Read the BDD Styles for Expect and Should &lt;a href=&#34;http://chaijs.com/guide/styles&#34; target=&#34;_blank&#34;&gt;Styles&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;For Unit tests I usually create 2 variables one named actual and another named expect but this is strictly up to you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Expect example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;expect(someTest).to.eql(ThisAssertion);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Should example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;foo.should.equal(&#39;bar&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.findIdx&lt;/code&gt; function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[{ name: &#39;Marcel&#39; },{ name: &#39;Leo&#39; },{ name: &#39;Dave&#39; }].findIdx(function(value) {
    return value[&amp;quot;name&amp;quot;] === &amp;quot;Leo&amp;quot;;
});

// outputs =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-unit-test-the-array-prototype-findinput-function&#34;&gt;2. Unit test the Array.prototype.findInput Function&lt;/h3&gt;

&lt;p&gt;Write a BDD Style test using the following structure in program.test.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;it(&#39;Unit test the Array.prototype.findInput function&#39;, function(done) {
    // TODO: Finish the test here.
    done();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.findInput&lt;/code&gt; function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[{ name: &#39;Marcel&#39; },{ name: &#39;Leo&#39; },{ name: &#39;Dave&#39; }].findInput(function(value) {
    return value[&amp;quot;name&amp;quot;] === &amp;quot;Leo&amp;quot;;
});

// outputs =&amp;gt; { name: &#39;Leo&#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-unit-test-the-array-prototype-zip-function&#34;&gt;3. Unit test the Array.prototype.zip Function&lt;/h3&gt;

&lt;p&gt;Write a BDD Style Test in the TODO block in program.test.js&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.zip&lt;/code&gt; function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[
    [1, 2, 3],
    [&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;],
    [true, false, true]
].zip();

// outputs =&amp;gt;
[
    [1, &amp;quot;one&amp;quot;, true],
    [2, &amp;quot;two&amp;quot;, false],
    [3, &amp;quot;three&amp;quot;, true]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;end-to-end-testing&#34;&gt;End-to-End Testing&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://jbelmont.github.io/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-end-to-end-tests-via-infoq-end-to-end-testing-https-www-infoq-com-articles-balancing-unit-and-end-to-end-tests&#34;&gt;Definition of End-to-End Tests via InfoQ &lt;a href=&#34;https://www.infoq.com/articles/balancing-unit-and-end-to-end-tests&#34; target=&#34;_blank&#34;&gt;End-To-End-Testing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;End-to-End Tests simulate user behavior. In a web application, they will start the server, fire up a browser, click around, and assert that certain things happening in the browser give us confidence our feature is working. These tests give great confidence, but they are slow, brittle, and tightly coupled to the user interface.&lt;/p&gt;

&lt;h4 id=&#34;nightwatchjs-end-to-end-testing-library&#34;&gt;Nightwatchjs End to End Testing Library&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Nightwatch.js is a Node.js based End-to-End (E2E) testing solution for browser based apps and websites.&lt;/li&gt;
&lt;li&gt;It uses the powerful W3C WebDriver API to perform commands and assertions on DOM elements.&lt;/li&gt;
&lt;li&gt;Write End-to-End tests in Node.js quickly and effortlessly that run against a Selenium/WebDriver server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;webdriver&#34;&gt;WebDriver&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;WebDriver is a general purpose library for automating web browsers.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It was started as part of the Selenium project, which is a very popular and comprehensive set of tools for browser automation, initially written for Java but now with support for most programming languages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Nightwatch uses the WebDriver API to perform the browser automation related tasks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I.E. opening windows and clicking links for instance.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WebDriver is now a W3C specification, which aims to standardize browser automation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WebDriver is a remote control interface that enables introspection and control of user agents.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It provides a platform and a restful HTTP api as a way for web browsers to be remotely controlled.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/webdriver/&#34; target=&#34;_blank&#34;&gt;WebDriver Spec&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nightwatch works by communicating over a restful HTTP api with a WebDriver server (Selenium server).&lt;/li&gt;
&lt;li&gt;The restful API protocol is defined by the W3C WebDriver API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;nightwatch-operations&#34;&gt;Nightwatch Operations&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Nightwatch needs to send at least 2 requests to the WebDriver server in order to perform a command or assertion

&lt;ul&gt;
&lt;li&gt;The first request to locate an element given a CSS selector (or Xpath expression)&lt;/li&gt;
&lt;li&gt;The second request to perform the actual command/assertion on the given element.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  &#39;Code Craftsmanship Saturdays&#39;: browser =&amp;gt; {
    browser
      .url(&#39;http://localhost:3000&#39;)
        .waitForElementVisible(&#39;.code-craftsmanship-container-label&#39;, 1000)
        .assert.containsText(&#39;.code-craftsmanship-container-label &amp;gt; strong&#39;, &#39;Code Craftsmanship Saturdays&#39;)

    browser
      .click(&#39;.users-container .users-container-trash-bin&#39;)
      .assert.elementNotPresent(&#39;[data-email=&amp;quot;tcox0@dion.ne.jp&amp;quot;]&#39;)

    browser
      .click(&#39;#addSomeUserBtn&#39;)

    setInput(&#39;#emailInput&#39;, &#39;chuck@badass.net&#39;)
    setInput(&#39;#firstNameInput&#39;, &#39;Chuck&#39;)
    setInput(&#39;#lastNameInput&#39;, &#39;Norris&#39;)

    browser
      .click(&#39;#addUserSubmit&#39;)
      .waitForElementVisible(&#39;[data-email=&amp;quot;chuck@badass.net&amp;quot;]&#39;, 1000)
      .end();

    function setInput(input, value) {
      browser.setValue(input, value);
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above is a sample End To End Test for Nightwatch.js&lt;/p&gt;

&lt;p&gt;The string &lt;code&gt;Code Craftsmanship Saturdays&lt;/code&gt; will be what this particular test suite will be called.&lt;/p&gt;

&lt;p&gt;Notice that it lives in an &lt;code&gt;module.exports&lt;/code&gt; object&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;browser&lt;/code&gt; object has the main elements you will need for your test namely &lt;code&gt;click&lt;/code&gt;,  &lt;code&gt;url&lt;/code&gt;, and &lt;code&gt;assertions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since I only put one key there is one step to this test, I could however split this test into two parts like so&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  &#39;Load Default Screen and click trash can&#39;: browser =&amp;gt; {
    browser
      .url(&#39;http://localhost:3000&#39;)
        .waitForElementVisible(&#39;.code-craftsmanship-container-label&#39;, 1000)
        .assert.containsText(&#39;.code-craftsmanship-container-label &amp;gt; strong&#39;, &#39;Code Craftsmanship Saturdays&#39;)

    browser
      .click(&#39;.users-container .users-container-trash-bin&#39;)
      .assert.elementNotPresent(&#39;[data-email=&amp;quot;tcox0@dion.ne.jp&amp;quot;]&#39;)
  },

  &#39;Add a User&#39;: browser =&amp;gt; {
      browser
        .click(&#39;#addSomeUserBtn&#39;)

        setInput(&#39;#emailInput&#39;, &#39;chuck@badass.net&#39;)
        setInput(&#39;#firstNameInput&#39;, &#39;Chuck&#39;)
        setInput(&#39;#lastNameInput&#39;, &#39;Norris&#39;)

        browser
        .click(&#39;#addUserSubmit&#39;)
        .waitForElementVisible(&#39;[data-email=&amp;quot;chuck@badass.net&amp;quot;]&#39;, 1000)
        .end();

        function setInput(input, value) {
            browser.setValue(input, value);
        }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the End to End test has been broken into 2 steps, I could break it up further if I wanted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Nightwatch.js&lt;/code&gt; also has lifecycle methods that you can use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  before : function(browser) {
    console.log(&#39;Setting up...&#39;);
  },

  after : function(browser) {
    console.log(&#39;Closing down...&#39;);
  },

  beforeEach : function(browser) {

  },

  afterEach : function() {

  },

  &#39;step one&#39; : function (browser) {
    browser
     // ...
  },

  &#39;step two&#39; : function (browser) {
    browser
    // ...
      .end();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The goal of End to End tests are to test the behavior of your application&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that you should not be testing edge cases with your end to end tests.&lt;/p&gt;

&lt;p&gt;Some metrics to think about:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You should have many unit tests that test all the possible edge cases for each function/class.&lt;/li&gt;
&lt;li&gt;Your integration tests will consequently test multiple units of work and you should have a good number of them.&lt;/li&gt;
&lt;li&gt;End to End tests should really follow the happy path of a user workflow.

&lt;ol&gt;
&lt;li&gt;These types of tests are more resource intensive and you should think about separating end to end tests to an additional build.&lt;/li&gt;
&lt;li&gt;Keep your first build fast by only incorporating Unit Tests&lt;/li&gt;
&lt;li&gt;Perhaps include a secondary build where you run integration tests and end to end tests.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Instructions for End To End Exercises:
1. Go to end to end tests folder &lt;code&gt;cd end-to-end-tests/nightwatch&lt;/code&gt;
2. Open codeCraftsmanshipSaturdays.js.
3. Complete each todo block by adding the last part of the end to end test.
4. Run the script &lt;code&gt;npm run end:to🔚test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nightwatchjs.org/api&#34; target=&#34;_blank&#34;&gt;NightWatch Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mocking&#34;&gt;Mocking&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://jbelmont.github.io/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-mocks-via-wikipedia-mocks-https-en-wikipedia-org-wiki-mock-object&#34;&gt;Definition of Mocks via Wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Mock_object&#34; target=&#34;_blank&#34;&gt;Mocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In object-oriented programming, mock objects (also can be a unit of work) are simulated objects that mimic the behavior of real objects in controlled ways. A programmer typically creates a mock object to test the behavior of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behavior of a human in vehicle impacts.&lt;/p&gt;

&lt;h4 id=&#34;reasons-to-use-mock-objects&#34;&gt;Reasons to use Mock Objects&lt;/h4&gt;

&lt;p&gt;In a unit test, mock objects can simulate the behavior of complex, real objects and are therefore useful when a real object is impractical or impossible to incorporate into a unit test. If an actual object has any of the following characteristics, it may be useful to use a mock object in its place:
the object supplies non-deterministic results (e.g. the current time or the current temperature);&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Object has states that are difficult to create or reproduce (e.g. a network error);&lt;/strong&gt;
&lt;strong&gt;The Object is slow (e.g. a complete database, which would have to be initialized before the test);&lt;/strong&gt;
&lt;strong&gt;The Object does not yet exist or may change behavior;&lt;/strong&gt;
&lt;strong&gt;The Object would have to include information and methods exclusively for testing purposes (and not for its actual task).&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;sinon-js-mock-via-explanation-sinon-mocks-http-sinonjs-org-docs-mocks&#34;&gt;Sinon.js Mock via explanation &lt;a href=&#34;http://sinonjs.org/docs/#mocks&#34; target=&#34;_blank&#34;&gt;Sinon Mocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Mocks (and mock expectations) are fake methods (like spies) with pre-programmed behavior (like stubs) as well as pre-programmed expectations.
A mock will fail your test if it is not used as expected.&lt;/p&gt;

&lt;p&gt;Sinon Documentation discusses when not to use Mocks.
Mocks come with built-in expectations that may fail your test. Thus, they enforce implementation details.
&lt;strong&gt;The rule of thumb is: if you wouldn’t add an assertion for some specific call, don’t mock it. Use a stub instead.&lt;/strong&gt;
&lt;strong&gt;In general you should never have more than one mock (possibly with several expectations) in a single test.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;sinon-js-stubs-via-explanation-sinon-stubs-http-sinonjs-org-docs-stubs&#34;&gt;Sinon.js Stubs via explanation &lt;a href=&#34;http://sinonjs.org/docs/#stubs&#34; target=&#34;_blank&#34;&gt;Sinon Stubs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Test stubs are functions (spies) with pre-programmed behavior. They support the full test spy API in addition to methods which can be used to alter the stub’s behavior.
This is a key point here as well with stubs you get the full spy api but with Mocks you don&amp;rsquo;t.&lt;/p&gt;

&lt;h4 id=&#34;sinon-js-spies-via-explanation-sinon-spies-http-sinonjs-org-docs-spies&#34;&gt;Sinon.js Spies via explanation &lt;a href=&#34;http://sinonjs.org/docs/#spies&#34; target=&#34;_blank&#34;&gt;Sinon Spies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A test spy is a function that records arguments, return value, the value of this and exception thrown (if any) for all its calls.
Test spies are useful to test both callbacks and how certain functions/methods are used throughout the system under test.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sinon has an assertion api that you can reference here &lt;a href=&#34;http://sinonjs.org/docs/#assertions&#34; target=&#34;_blank&#34;&gt;Sinon Assertions&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;You can use either Mocha or Tape.js here it is your choice which one you feel most comfortable with.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;sinon-has-an-assertion-library-that-you-can-use-but-i-would-recommend-using-either-chai-js-assertion-library-or-should-js&#34;&gt;Sinon has an assertion library that you can use but I would recommend using either chai.js assertion library or should.js&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Chai.js documentation can be found here &lt;a href=&#34;http://chaijs.com/api/assert/&#34; target=&#34;_blank&#34;&gt;Chai.js Assert&lt;/a&gt; // &lt;a href=&#34;http://chaijs.com/api/bdd/&#34; target=&#34;_blank&#34;&gt;Chai.js BDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Should.js Assertion library can be found here &lt;a href=&#34;http://shouldjs.github.io/&#34; target=&#34;_blank&#34;&gt;Should.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Open program.test.js in &lt;code&gt;mocks-stubs-spies&lt;/code&gt; folder&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-stub-the-retrievedocument-function&#34;&gt;1. Stub the &lt;code&gt;retrieveDocument&lt;/code&gt; function&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function retrieveDocument({dbName, name}) {
    const couchDBName = nano.use(dbName);
    return new Promise((resolve, reject) =&amp;gt; {
        couchDBName.get(name, (err, body) =&amp;gt; {
            if (!err) {
                resolve(body);
            }
            reject(err);
        });
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don&amp;rsquo;t need the implementation here but I included it here for your reference.
Using Sinon check that the retrieveDocument stub is called once.
Make an assertion that the payload and the expected response match.&lt;/p&gt;

&lt;h4 id=&#34;2-stub-the-insertdocument-function&#34;&gt;2. Stub the &lt;code&gt;insertDocument&lt;/code&gt; function.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function insertDocument({ dbName = &#39;softwaretesting&#39;, name = &#39;users&#39;, body } = {}) {
    return new Promise((resolve, reject) =&amp;gt; {
        const couchDBName = nano.use(dbName);
        return insertDoc({ dbName: couchDBName, name, body })
            .then(() =&amp;gt; {
                resolve(retrieveDoc({ dbName: couchDBName , name }));
            })
            .catch(err =&amp;gt; {
                reject(err);
            });
    });
}

function insertDoc({dbName, name, body}) {
    return new Promise((resolve, reject) =&amp;gt; {
        dbName.insert(body, name, (err, body, header) =&amp;gt; {
            if (!err) {
                resolve(body);
            } else {
                reject(err);
            }
        });
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Again you don&amp;rsquo;t need the implementation here because you are stubbing it out but I added it in case you are curious.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use sinon to make some assertions about the stubbed out function&lt;/li&gt;
&lt;li&gt;Remember to use the setup function in tape or the before block in mocha to initialize the stub.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-stub-out-the-deletedocument-function&#34;&gt;3. Stub out the &lt;code&gt;deleteDocument&lt;/code&gt; function&lt;/h4&gt;

&lt;h6 id=&#34;implementation-details&#34;&gt;Implementation Details&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function retrieveDoc({dbName, name}) {
    return new Promise((resolve, reject) =&amp;gt; {
        dbName.get(name, (err, body) =&amp;gt; {
            if (!err) {
                resolve(body);
            }
            reject(err);
        });
    });
}

function deleteDocument({dbName, name}) {
    const couchDBName = nano.use(dbName);
    return retrieveDoc({dbName: couchDBName, name})
        .then(body =&amp;gt; {
            if (body) {
                const {
                    _rev
                } = body;
                couchDBName.destroy(name, _rev, (err, body) =&amp;gt; {
                    if (!err) {
                        return body;
                    }
                    throw err;
                });
            }
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Stub out the deleteDocument function by using sinon.&lt;/li&gt;
&lt;li&gt;Use chai assertions or use the should.js assertion library&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-fixtures&#34;&gt;Test Fixtures&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test_fixture&#34; target=&#34;_blank&#34;&gt;Test Fixtures&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;* A test fixture is a fixed state of a set of objects used as a baseline for running tests.&lt;/li&gt;
&lt;li&gt;A test fixture is something used to consistently test some item, device, or piece of software.&lt;/li&gt;
&lt;li&gt;Test fixtures can be found when testing electronics, software and physical devices.&lt;/li&gt;
&lt;li&gt;A software test fixture sets up the system for the testing process by providing the initialization code.

&lt;ul&gt;
&lt;li&gt;In turn satisfying whatever preconditions there may be.
An example could be loading up a database with known parameters from a customer site before running your test.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ruby on Rails web framework uses YAML to initialize a database before running a test.

&lt;ul&gt;
&lt;li&gt;This allows for tests to be repeatable, which is one of the key features of an effective test framework&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages of Test Fixtures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test Fixtures allow for tests to be repeatable since you start with the same setup every time.&lt;/li&gt;
&lt;li&gt;Test Fixtures eases test code design by allowing the developer to separate methods into different functions and reuse each function for other tests.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Preconfigures tests into a known state at start instead of working from a previous test run.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results are repeatable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of Test Fixtures:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Preparation of input data and setup/creation of fake or mock objects&lt;/li&gt;
&lt;li&gt;Loading a database with a specific, known set of data&lt;/li&gt;
&lt;li&gt;Copying a specific known set of files creating a test fixture will create a set of objects initialized to certain states.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open up &lt;code&gt;test-fixtures&lt;/code&gt; directory and add an integration using supertest to retrieve the seeded document&lt;/p&gt;

&lt;h2 id=&#34;property-based-testing&#34;&gt;Property Based Testing&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Dijkstra&#39;s&lt;/code&gt;
&amp;gt; Program testing can at best show the presence of errors, but never their absence&lt;/p&gt;

&lt;p&gt;Author states that
&amp;gt; Thus we can expect testing to be the main form of program verification fora long time to come—it is the only practical technique in most cases&lt;/p&gt;

&lt;p&gt;The point is made that with a CI process in place you can automate testing in your code base but there is still a dilemma on how many test cases to write.&lt;/p&gt;

&lt;p&gt;Do you write one test case or many test cases?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In practice, much time is devoted either to simplifying a failing case by hand, or to debugging and tracing a complex case to understand why it fails. Shrinking failing cases automates the first stage of diagnosis, and makes the step from automated testing to locating a fault very short indeed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;test-case-wisdom&#34;&gt;Test Case Wisdom&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;During regular test case scenarios in unit-testing your follow the happy path or normal path

&lt;ul&gt;
&lt;li&gt;This in turn forms basis for future test cases&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;By generating test cases you can find bugs faster and more accuracy is what I am gleaning from the paper&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It is better to run smaller tests than large tests.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Most errors can be found by a smaller test case.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Developer will jump onto the first failing case&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rerun the test case and start debugging the issue&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test cases generated by hand are time consuming as well&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When new test cases can be generated by hand in seconds it helps reduce developer time on trivial edge cases.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testcheck-js&#34;&gt;TestCheck.js&lt;/h3&gt;

&lt;p&gt;Generative property testing for JavaScript.&lt;/p&gt;

&lt;p&gt;TestCheck.js is a library for generative testing of program properties, ala QuickCheck.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By providing a specification of the JavaScript program in the form of properties&lt;/li&gt;
&lt;li&gt;Properties can be tested to remain true for a large number of randomly generated cases.&lt;/li&gt;
&lt;li&gt;In the case of a test failure, the smallest possible failing test case is found.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const { check, gen, property } = require(&#39;testcheck&#39;);
const test = require(&#39;tape&#39;);

test(&#39;addition is commutative&#39;, check(gen.int, gen.int, (t, numA, numB) =&amp;gt; {
  t.plan(1);
  t.equal(numA + numB, numB + numA)
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Read the &lt;a href=&#34;https://www.marcelbelmont.com/software-testing/&#34; target=&#34;_blank&#34;&gt;Software Testing Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You will be able to copy and paste examples using the Gitbook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you like this post please star &lt;a href=&#34;https://github.com/jbelmont/software-testing&#34; target=&#34;_blank&#34;&gt;Software Testing on Gitub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Growing Object-Oriented Software, Guided by Tests</title>
      <link>https://www.marcelbelmont.com/post/growing-object-oriented-software-guided-by-tests/</link>
      <pubDate>Tue, 22 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/growing-object-oriented-software-guided-by-tests/</guid>
      <description>

&lt;h1 id=&#34;growing-object-oriented-software-guided-by-tests&#34;&gt;Growing Object Oriented Software Guided By Tests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-the-point-of-test-driven-development&#34;&gt;What is the Point of Test-Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-driven-development-with-objects&#34;&gt;Test-Driven Development with Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#an-introduction-to-the-tools&#34;&gt;An Introduction to the Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kick-starting-the-test-driven-cycle&#34;&gt;Kick-Starting the Test-Driven Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#maintaining-the-test-driven-cycle&#34;&gt;Maintaining The Test-Driven Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#object-oriented-style&#34;&gt;Object-Oriented Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;achieving-object-oriented-design&#34; target=&#34;_blank&#34;&gt;Achieving Object-Oriented Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-on-third-party-code&#34;&gt;Building on Third-Party Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commissioning-on-auction-sniper&#34;&gt;Commissioning on Auction Sniper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-walking-skeleton&#34;&gt;The Walking Skeleton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#passing-the-first-test&#34;&gt;Passing the First Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chapters-12-to-18&#34;&gt;Chapters 12 to 18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sniping-for-multiple-items&#34;&gt;Sniping for Multiple Items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#teasing-apart-main&#34;&gt;Teasing apart Main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filling-in-the-details&#34;&gt;Filling in the Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#listening-to-the-tests&#34;&gt;Listening to the Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-readability&#34;&gt;Test Readability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#constructing-complex-test-data&#34;&gt;Constructing Complex Test Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-diagnostics&#34;&gt;Test Diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-flexibility&#34;&gt;Test Flexibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chapters-25-to-27&#34;&gt;Chapters 25 to 27&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-the-point-of-test-driven-development&#34;&gt;What is the Point of Test-Driven Development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Feedback is the most fundamental tool at our disposal&lt;/li&gt;
&lt;li&gt;TDD is a practice that supports change&lt;/li&gt;
&lt;li&gt;You should never write new functionality without a failing test.&lt;/li&gt;
&lt;li&gt;This first chapter basically explains the benefits of TDD&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-driven-development-with-objects&#34;&gt;Test-Driven Development with Objects&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Objects should communicate their intent to other objects

&lt;ul&gt;
&lt;li&gt;Tell Don&amp;rsquo;t Ask principle&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mock Objects when you use &amp;ldquo;Tell Don&amp;rsquo;t Ask&amp;rdquo; principle&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;an-introduction-to-the-tools&#34;&gt;An Introduction to the Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Testing Tools are introduced in the chapter

&lt;ul&gt;
&lt;li&gt;JUnit and JMock are mentioned&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JavaScript Test Runners like &lt;code&gt;ava.js&lt;/code&gt;, &lt;code&gt;mocha.js&lt;/code&gt;, and &lt;code&gt;jest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sinon.js&lt;/code&gt;, and &lt;code&gt;testdouble.js&lt;/code&gt; serve as mocking libraries&lt;/li&gt;
&lt;li&gt;Test Fixtures are mentioned in this chapter as well&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;kick-starting-the-test-driven-cycle&#34;&gt;Kick-Starting the Test-Driven Cycle&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Using Test Fixtures and Mock Objects is mentioned&lt;/li&gt;
&lt;li&gt;Examples are using JUnit and JMock&lt;/li&gt;
&lt;li&gt;A test fixture is the fixed state that exists at the start of a test.&lt;/li&gt;
&lt;li&gt;A test fixture ensures that a test is repeatable

&lt;ul&gt;
&lt;li&gt;Every time a test is run it starts in the same state so it should produce the same results.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A fixture may be set up before the test runs and torn down after it has finished&lt;/li&gt;
&lt;li&gt;Assertion Libraries are talked about but mainly how to write tests using assertions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;maintaining-the-test-driven-cycle&#34;&gt;Maintaining The Test-Driven Cycle&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Start each feature with an acceptance test&lt;/li&gt;
&lt;li&gt;An acceptance test basically is how you test a feature in a UI&lt;/li&gt;
&lt;li&gt;An acceptance test should fail unti the feature is implemented&lt;/li&gt;
&lt;li&gt;Find the simplest success case&lt;/li&gt;
&lt;li&gt;User Acceptance Tests (UATs) should be easy to read&lt;/li&gt;
&lt;li&gt;You should be unit testing behavior and not methods&lt;/li&gt;
&lt;li&gt;Pay attention to trouble areas that are hard to test

&lt;ul&gt;
&lt;li&gt;This indicates a possible area for refactoring&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;object-oriented-style&#34;&gt;Object-Oriented Style&lt;/h2&gt;

&lt;p&gt;Object Oriented Design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have clear &lt;code&gt;separation of concerns&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Behavior should be grouped in logical places&lt;/li&gt;
&lt;li&gt;This helps isolate changes to &lt;code&gt;areas of concern&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Group components into &lt;code&gt;Higher Levels of Abstraction&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t program with variables and control flow in mind but instead with larger abstractions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Encapsulation is a concept where behavior of an object is only affected through its API&lt;/li&gt;
&lt;li&gt;Information Hiding deals with the fact that Objects should hide lower level work in its API from public use&lt;/li&gt;
&lt;li&gt;Every object should have only have responsibility aka &lt;code&gt;Single Responsibility Principle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The Composition of several objects should be simpler than the sum of all the objects&lt;/li&gt;
&lt;li&gt;Objects should have enough &lt;code&gt;context&lt;/code&gt; of their environment&lt;/li&gt;
&lt;li&gt;Whatever information you need should be passed in or to put it another way you can use &lt;code&gt;dependency injection&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;achieving-object-oriented-design&#34;&gt;Achieving Object-Oriented Design&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Writing test first influence the design of a system&lt;/li&gt;
&lt;li&gt;TDD with mock objects expresses intent that you should mock an object&amp;rsquo;s peer dependencies but not the internals of an object&lt;/li&gt;
&lt;li&gt;Value types is mentioned with explicit caveat that they are immmutable while Objects are stateful&lt;/li&gt;
&lt;li&gt;An object should be broken apart if it becomes difficult to test&lt;/li&gt;
&lt;li&gt;Interfaces should be not be fat and with that being said you will need more interfaces&lt;/li&gt;
&lt;li&gt;You will need more interfaces in order to keep your interfaces &lt;code&gt;lean&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This means you should refactor interfaces as well&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;System Behavior should rely on composition and not inheritance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;building-on-third-party-code&#34;&gt;Building on Third-Party Code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You should only mock object that you own&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t mock third party code&lt;/li&gt;
&lt;li&gt;Instead write an Adapter Layer&lt;/li&gt;
&lt;li&gt;Write a Database Adapter Layer so that if you change databases you can easily swap them out&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;commissioning-on-auction-sniper&#34;&gt;Commissioning on Auction Sniper&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A user scenario is described in this chapter detailing the auction process&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-walking-skeleton&#34;&gt;The Walking Skeleton&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In this chapter the first test is described which is an end to end test&lt;/li&gt;
&lt;li&gt;One example library that comes to mind is &lt;code&gt;Nightwatch.js&lt;/code&gt; and &lt;code&gt;Cypress.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;These libraries help you write end to end tests in modern web UIs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;passing-the-first-test&#34;&gt;Passing the First Test&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;TODOLIST&lt;/em&gt; is used in this chapter and the first item is crossed out&lt;/li&gt;
&lt;li&gt;An important concept that I derive is that User Workflows help influence the design and indicate important UI elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;chapters-12-to-18&#34;&gt;Chapters 12 to 18&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;These chapters essential detail iterating through software design&lt;/li&gt;
&lt;li&gt;Small slices of behavior should be tested and implemented iteratively&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t be afraid of changing design of the system while iterating through a User Workflow&lt;/li&gt;
&lt;li&gt;Architecture should be developed incrementally&lt;/li&gt;
&lt;li&gt;Types in a system should be defined with &lt;code&gt;Domain Types&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modelling systems with &lt;code&gt;Domain Types&lt;/code&gt; helps better describe a software system&lt;/li&gt;
&lt;li&gt;Avoid using Magic Numbers or Strings&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;handling-failure&#34;&gt;Handling Failure&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use smaller methods or utility methods that act as helpers for objects&lt;/li&gt;
&lt;li&gt;Logging should be designed as a feature

&lt;ul&gt;
&lt;li&gt;Avoid scattering logging statements all throughout a system&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;listening-to-the-tests&#34;&gt;Listening to the Tests&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An interesting point is made that implicit dependencies are still dependencies&lt;/li&gt;
&lt;li&gt;A good corollary to this can be made with npm dependencies&lt;/li&gt;
&lt;li&gt;Typically npm dependencies have dependencies of their own and if not isolated they carry an implicit dependency of their own&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t mock values or immutable values since you can just create instances but instead mock stateful objects&lt;/li&gt;
&lt;li&gt;Bloated &lt;code&gt;constructors&lt;/code&gt; ones that take many parameters should signal a refactor possibly add a service or a message broker&lt;/li&gt;
&lt;li&gt;Bloated &lt;code&gt;constructors&lt;/code&gt; can also signal that an object has too many responsilities&lt;/li&gt;
&lt;li&gt;You shouldn&amp;rsquo;t have too many test assertions in any given test this probably signals that you should broke apart a test&lt;/li&gt;
&lt;li&gt;A test should have few assertions/expectations&lt;/li&gt;
&lt;li&gt;Knowledge of an object should be as close to the origin

&lt;ul&gt;
&lt;li&gt;Keeping knowledge close helps make pluggable components&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We should explicitly name a behavior to help control the behavior&lt;/li&gt;
&lt;li&gt;Try to add more names in order to extract more domain information&lt;/li&gt;
&lt;li&gt;Pass behavior rather than data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-readability&#34;&gt;Test Readability&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Test Names should describe Features of a system&lt;/li&gt;
&lt;li&gt;Tests should follow a structure like this:

&lt;ul&gt;
&lt;li&gt;Setup&lt;/li&gt;
&lt;li&gt;Execute Actions&lt;/li&gt;
&lt;li&gt;Teardown&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Test structure should help explain behavior and should help share valuable information&lt;/li&gt;
&lt;li&gt;Delegate to subordinate objects&lt;/li&gt;
&lt;li&gt;Assertions/Expectations should communicate the exact behavior of a system&lt;/li&gt;
&lt;li&gt;Avoid magic variables and instead use constants that explicitly show intent&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;constructing-complex-test-data&#34;&gt;Constructing Complex Test Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A builder pattern helps in constructing complex test data&lt;/li&gt;
&lt;li&gt;Builder pattern helps break apart complex test data into some chainable methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-diagnostics&#34;&gt;Test Diagnostics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tests are made to fail&lt;/li&gt;
&lt;li&gt;We want tests to fail or report failures when they occur&lt;/li&gt;
&lt;li&gt;Write small and focused tests that are well named&lt;/li&gt;
&lt;li&gt;Add explanatory statements in test assertion/expections to help find error in a stack trace&lt;/li&gt;
&lt;li&gt;Use test matchers for detailing methods&lt;/li&gt;
&lt;li&gt;Tests should be self describing&lt;/li&gt;
&lt;li&gt;Tracer objects help map where failures occur&lt;/li&gt;
&lt;li&gt;Write a Failing Test ==&amp;gt; Make Diagnostics Clear ==&amp;gt; Make Tests Pass ==&amp;gt; Refactor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-flexibility&#34;&gt;Test Flexibility&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Write precise assertions/expectations or just test the relevant parts of a method&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;chapters-25-to-27&#34;&gt;Chapters 25 to 27&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Persistence or CRUD actions can be tested with fine-grained integration tests&lt;/li&gt;
&lt;li&gt;Unit testing concurrent code can be difficult and it is easy to receive false positives&lt;/li&gt;
&lt;li&gt;Test Asychronous code by testing incremental changes in the UI&lt;/li&gt;
&lt;li&gt;Using timers can deliver false positives on UI changes&lt;/li&gt;
&lt;li&gt;Take snapshots of the UI throughout the lifecycle of the User Workflow&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OWASP and Software Security</title>
      <link>https://www.marcelbelmont.com/post/software-security/</link>
      <pubDate>Fri, 18 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/software-security/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#software-security&#34;&gt;Software Security&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#difference-between-software-security-and-application-security&#34;&gt;Difference between Software Security and Application Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#language-based-security&#34;&gt;Language-Based Security&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#objectives-of-language-based-security&#34;&gt;Objectives of Language Based Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#application-level-security&#34;&gt;Application Level Security&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#definition&#34;&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#terms&#34;&gt;Terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#techniques&#34;&gt;Techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#application-threats-or-attacks&#34;&gt;Application threats or attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp&#34;&gt;OWASP&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#background-on-owasp&#34;&gt;Background on OWASP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-core-values&#34;&gt;OWASP Core Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-principles&#34;&gt;OWASP Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-mailing-lists&#34;&gt;OWASP Mailing Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-chapter&#34;&gt;OWASP Chapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-membership&#34;&gt;OWASP Membership&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-projects&#34;&gt;OWASP Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-github-organization&#34;&gt;OWASP Github Organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-member-portal&#34;&gt;OWASP Member Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-top-10&#34;&gt;OWASP Top 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-top-10-comparison-table-for-2013-vs-2017&#34;&gt;OWASP Top 10 comparsion table for 2013 vs 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#github-repository&#34;&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;software-security&#34;&gt;Software Security&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Software security entails software that continues to function correctly under malicious attack.&lt;/li&gt;
&lt;li&gt;Most engineers acknowledge that security is important but don&amp;rsquo;t know the steps to tackle security&lt;/li&gt;
&lt;li&gt;Software security best practices leverage good software engineering practice

&lt;ul&gt;
&lt;li&gt;Involve thinking about security early in the software lifecycle, knowing and understanding common threats&lt;/li&gt;
&lt;li&gt;Including language-based flaws and pitfalls&lt;/li&gt;
&lt;li&gt;designing for security&lt;/li&gt;
&lt;li&gt;Putting all software components thorough objective risk analyses and testing.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;difference-between-software-security-and-application-security&#34;&gt;Difference between Software Security and Application Security&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.garymcgraw.com/&#34; target=&#34;_blank&#34;&gt;Gary McGraw&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gary McGraw maintains that application security is a reactive approach, taking place once software has been deployed. Software security, on the other hand, involves a proactive approach, taking place within the pre-deployment phase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://www.synopsys.com/blogs/software-security/application-security-vs-software-security/&#34; target=&#34;_blank&#34;&gt;Difference between Software Security and Application Security&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Software security (pre-deployment) activities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Secure software design&lt;/li&gt;
&lt;li&gt;Development of secure coding guidelines for developers to follow&lt;/li&gt;
&lt;li&gt;Development of secure configuration procedures and standards for the deployment phase&lt;/li&gt;
&lt;li&gt;Secure coding that follows established guidelines&lt;/li&gt;
&lt;li&gt;Validation of user input and implementation of a suitable encoding strategy&lt;/li&gt;
&lt;li&gt;User authentication&lt;/li&gt;
&lt;li&gt;User session management&lt;/li&gt;
&lt;li&gt;Function level access control&lt;/li&gt;
&lt;li&gt;Use of strong cryptography to secure data at rest and in transit&lt;/li&gt;
&lt;li&gt;Validation of third-party components&lt;/li&gt;
&lt;li&gt;Arrest of any flaws in software design/architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application security (post-deployment) activities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Post deployment security tests&lt;/li&gt;
&lt;li&gt;Capture of flaws in software environment configuration&lt;/li&gt;
&lt;li&gt;Malicious code detection (implemented by the developer to create backdoor, time bomb)&lt;/li&gt;
&lt;li&gt;Patch/upgrade

&lt;ul&gt;
&lt;li&gt;Meaning that situations like third party software or dependencies needing to be patched&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IP filtering

&lt;ul&gt;
&lt;li&gt;White List Known Good IP addresses instead of leaving a bunch IP addresses open&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lock down executables

&lt;ul&gt;
&lt;li&gt;This in my mind goes more hand in hand with compiled languages but I could be wrong&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Monitoring of programs at runtime to enforce the software use policy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;language-based-security&#34;&gt;Language-Based Security&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Language-based_security&#34; target=&#34;_blank&#34;&gt;Language Based Security&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Language-based security (LBS) is a set of techniques that may be used to strengthen the security of applications on a high level by using the properties of programming languages. LBS is considered to enforce computer security on an application-level, making it possible to prevent vulnerabilities which traditional operating system security is unable to handle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;objectives-of-language-based-security&#34;&gt;Objectives of Language Based Security&lt;/h3&gt;

&lt;p&gt;Objective of Language-based security:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prevent common programming errors such as allowing buffer overflows and illegal information flows to occur&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Provide some proof to the consumer about the security properties of the software&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helps the consumer trust the software without having to check source code for errors.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A compiler, taking source code as input, performs several language specific operations on the code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lexical analysis, preprocessing, parsing, semantic analysis, code generation, and code optimization&lt;/li&gt;
&lt;li&gt;By analyzing the source code and gathering best practices for the language&lt;/li&gt;
&lt;li&gt;The compiler will attempt to correctly translate the high-level code into low-level code

&lt;ul&gt;
&lt;li&gt;Preserving the behavior of the program.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For Dynamic Libraries such as Javasript/Node.js you can use tools such as eslint that help with static analysis and best practices that you should follow&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;application-level-security&#34;&gt;Application Level Security&lt;/h2&gt;

&lt;h3 id=&#34;definition&#34;&gt;Definition&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Encompasses measures taken to improve the security of an application

&lt;ul&gt;
&lt;li&gt;By finding, fixing and preventing security vulnerabilities.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;terms&#34;&gt;Terms&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Asset

&lt;ul&gt;
&lt;li&gt;Data in a database, money in an account, file on the filesystem or any system resource.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Vulnerability

&lt;ul&gt;
&lt;li&gt;A gap in security program that can be exploited by threats to gain unauthorized access to an asset.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Attack

&lt;ul&gt;
&lt;li&gt;An action taken to harm an asset.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Threat

&lt;ul&gt;
&lt;li&gt;Anything that can exploit a vulnerability and obtain, damage, or destroy an asset.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;techniques&#34;&gt;Techniques&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Code review

&lt;ul&gt;
&lt;li&gt;Security engineer who understands the application through manually reviewing the source code notices avenues of exploit.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Blackbox security audit

&lt;ul&gt;
&lt;li&gt;This is testing an application for security vulnerabilities not looking at source code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Design review

&lt;ul&gt;
&lt;li&gt;Thinking about possible threat models before writing code or using a spec that has it detailed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tooling

&lt;ul&gt;
&lt;li&gt;Automated tools that check security vulnerabilities&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;application-threats-or-attacks&#34;&gt;Application threats or attacks&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Category&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Threats / Attacks&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Input Validation&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Buffer overflow; cross-site scripting; SQL injection; canonicalization&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Software Tampering&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Attacker modifies an existing application&amp;rsquo;s runtime behavior to perform unauthorized actions; exploited via binary patching, code substitution, or code extension&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Authentication&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Network eavesdropping ; Brute force attack; dictionary attacks; cookie replay; credential theft&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Authorization&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Elevation of privilege; disclosure of confidential data; data tampering; luring attacks&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Configuration management&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Unauthorized access to administration interfaces; unauthorized access to configuration stores; retrieval of clear text configuration data; lack of individual accountability; over-privileged process and service accounts&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Sensitive information&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Access sensitive code or data in storage; network eavesdropping; code/data tampering&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Session management&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Session hijacking; session replay; man in the middle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Cryptography&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Poor key generation or key management; weak or custom encryption&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Parameter manipulation&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Query string manipulation; form field manipulation; cookie manipulation; HTTP header manipulation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Exception management&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Information disclosure; denial of service&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Auditing and logging&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;User denies performing an operation; attacker exploits an application without trace; attacker covers his or her tracks&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Application_security&#34; target=&#34;_blank&#34;&gt;Application Security&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;owasp&#34;&gt;OWASP&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The Open Web Application Security Project (OWASP)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;background-on-owasp&#34;&gt;Background on OWASP&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Mission is to make software security visible, so that individuals/organizations can make informed decisions.&lt;/li&gt;
&lt;li&gt;Operates as a community of security minded professionals&lt;/li&gt;
&lt;li&gt;OWASP issues software tools and knowledge-based documentation on application security.&lt;/li&gt;
&lt;li&gt;The OWASP Foundation came online on December 1st 2001 it was established as a not-for-profit charitable org&lt;/li&gt;
&lt;li&gt;In the United States on April 21, 2004 to ensure the ongoing availability and support for our work at OWASP.&lt;/li&gt;
&lt;li&gt;OWASP is an international organization and the OWASP Foundation supports OWASP efforts around the world.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;owasp-core-values&#34;&gt;OWASP Core Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;OPEN Everything at OWASP is radically transparent from our finances to our code.&lt;/li&gt;
&lt;li&gt;INNOVATION OWASP encourages and supports innovation and experiments for solutions to software security challenges.&lt;/li&gt;
&lt;li&gt;GLOBAL Anyone around the world is encouraged to participate in the OWASP community.&lt;/li&gt;
&lt;li&gt;INTEGRITY OWASP is an honest and truthful, vendor neutral, global community.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;owasp-principles&#34;&gt;OWASP Principles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Free &amp;amp; Open&lt;/li&gt;
&lt;li&gt;Governed by rough consensus &amp;amp; running code&lt;/li&gt;
&lt;li&gt;Abide by a code of ethics (see ethics)&lt;/li&gt;
&lt;li&gt;Not-for-profit&lt;/li&gt;
&lt;li&gt;Not driven by commercial interests&lt;/li&gt;
&lt;li&gt;Risk based approach&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;owasp-mailing-lists&#34;&gt;OWASP Mailing Lists&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://lists.owasp.org/mailman/listinfo&#34; target=&#34;_blank&#34;&gt;Mailing Lists&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-chapter&#34;&gt;OWASP Chapter&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Triangle&#34; target=&#34;_blank&#34;&gt;Triangle OWASP Chapter&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-membership&#34;&gt;OWASP Membership&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Membership&#34; target=&#34;_blank&#34;&gt;OWASP Members&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-projects&#34;&gt;OWASP Projects&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Project&#34; target=&#34;_blank&#34;&gt;OWASP Projects&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-github-organization&#34;&gt;OWASP Github Organization&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/OWASP&#34; target=&#34;_blank&#34;&gt;OWASP Github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-member-portal&#34;&gt;OWASP Member Portal&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Portal&#34; target=&#34;_blank&#34;&gt;Member Portal&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-top-10&#34;&gt;OWASP Top 10&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project#tab=OWASP_Top_10_for_2017_Release_Candidate&#34; target=&#34;_blank&#34;&gt;Top 10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be reviewing the OWASP top 10 list for this workshop&lt;/p&gt;

&lt;p&gt;OWASP Top 10 Most Critical Web Application Security Risks (in the Release Candidate) are:
* Injection
* Broken Authentication and Session Management
* Cross-Site Scripting (XSS)
* Broken Access Control (As it was in 2004)
* Security Misconfiguration
* Sensitive Data Exposure
* Insufficient Attack Protection (NEW)
* Cross-Site Request Forgery (CSRF)
* Using Components with Known Vulnerabilities
* Underprotected APIs (NEW)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/OWASP/Top10/raw/master/2017/OWASP%20Top%2010%20-%202017%20RC1-English.pdf&#34; target=&#34;_blank&#34;&gt;OWASP Top 10 2017 Release Candidate&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-top-10-comparsion-table-for-2013-vs-2017&#34;&gt;OWASP Top 10 comparsion table for 2013 vs 2017&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;OWASP Top 10 – 2013 (Previous)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;OWASP Top 10 – 2017 (New)&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A1 - Injection&lt;/td&gt;
&lt;td&gt;A1 - Injection&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A2 - Broken Authentication and Session Management&lt;/td&gt;
&lt;td&gt;A2 - Broken Authentication and Session Management&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A3 - Cross-Site Scripting (XSS)&lt;/td&gt;
&lt;td&gt;A3 - Cross-Site Scripting (XSS)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A4 - Insecure Direct Object References - Merged with A7&lt;/td&gt;
&lt;td&gt;A4 - Broken Access Control (Original category in &lt;sup&gt;2003&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2004&lt;/sub&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A5 - Security Misconfiguration&lt;/td&gt;
&lt;td&gt;A5 - Security Misconfiguration&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A6 - Sensitive Data Exposure&lt;/td&gt;
&lt;td&gt;A6 - Sensitive Data Exposure&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A7 - Missing Function Level Access Control - Merged with A4&lt;/td&gt;
&lt;td&gt;A7 – Insufficient Attack Protection (NEW)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A8 – Cross-Site Request Forgery (CSRF)&lt;/td&gt;
&lt;td&gt;A8 – Cross-Site Request Forgery (CSRF)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A9 – Using Components with Known Vulnerabilities&lt;/td&gt;
&lt;td&gt;A9 – Using Components with Known Vulnerabilities&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A10 – Unvalidated Redirects and Forwards -Dropped&lt;/td&gt;
&lt;td&gt;A10 – UnderprotectedAPIs (NEW)Release NotesRN&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Threat Agents&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Attack Vectors&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Weakness Prevalence&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Weakness Detectability&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Technical Impacts&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Business Impacts&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;App Specific&lt;/td&gt;
&lt;td&gt;Easy&lt;/td&gt;
&lt;td&gt;Widespread&lt;/td&gt;
&lt;td&gt;Easy&lt;/td&gt;
&lt;td&gt;Severe&lt;/td&gt;
&lt;td&gt;App/Business Specific&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;App Specific&lt;/td&gt;
&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;Common&lt;/td&gt;
&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;Moderate&lt;/td&gt;
&lt;td&gt;App/Business Specific&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;App Specific&lt;/td&gt;
&lt;td&gt;Difficult&lt;/td&gt;
&lt;td&gt;Uncommon&lt;/td&gt;
&lt;td&gt;Difficult&lt;/td&gt;
&lt;td&gt;Minor&lt;/td&gt;
&lt;td&gt;App/Business Specific&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;github-repository&#34;&gt;Github Repository&lt;/h2&gt;

&lt;p&gt;If you like this information then please star this repository on Github at &lt;a href=&#34;https://github.com/jbelmont/software-security&#34; target=&#34;_blank&#34;&gt;Software Security&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Review of Design Like a Pro</title>
      <link>https://www.marcelbelmont.com/post/a-review-of-design-like-a-pro/</link>
      <pubDate>Wed, 16 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/a-review-of-design-like-a-pro/</guid>
      <description>

&lt;h1 id=&#34;design-like-a-pro-review&#34;&gt;Design Like a Pro Review&lt;/h1&gt;

&lt;p&gt;This is a review of Mark Miller&amp;rsquo;s Course (Design Like a Pro)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#interesting-points-of-the-course&#34;&gt;Interesting Points of the Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-was-surprising&#34;&gt;What was surprising&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-mark-miller-did-well&#34;&gt;What Mark Miller did well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-could-have-been-done-better&#34;&gt;What could have been done better&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#purchase-the-course&#34;&gt;Purchase the Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;interesting-points-of-the-course&#34;&gt;Interesting Points of the Course&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An interesting fact of the course is how much proximity plays a role with UI.&lt;/li&gt;
&lt;li&gt;If elements of a UI are placed in close proximity, users typically assume they are related&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So if you should group related items in a UI in close proximity&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;contrast&#34;&gt;Contrast&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Contrast is also important in UI

&lt;ul&gt;
&lt;li&gt;For example if you hover a button the contrast should be small not large&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;proximity&#34;&gt;Proximity&lt;/h3&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/gas-station-buttons.jpeg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;In this picture notice that the label of the Gas Type is inside the button&lt;/li&gt;
&lt;li&gt;Mark Miller explains that having the element in close proximity to the action is key&lt;/li&gt;
&lt;/ul&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/elevator-buttons.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;Notice that in this picture the proximity and the layout of the buttons in the elevator are confusing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;borders&#34;&gt;Borders&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Another interesting point made is about Borders

&lt;ul&gt;
&lt;li&gt;Borders Contrast should be low and should be thin&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/bad-html-table.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;Notice that in this table borders are rubbing up next to each other&lt;/li&gt;
&lt;li&gt;The lines are more prominent and the actual data is hard to extract&lt;/li&gt;
&lt;/ul&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/nicer-html-table.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;In this table the borders are thin and the table is much easier to read&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;controls&#34;&gt;Controls&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Another point of the course talks about controls&lt;/li&gt;
&lt;li&gt;Users don&amp;rsquo;t read tons of text if you have to present information then consider a tooltip&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;text&#34;&gt;Text&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There was a section detailing how text can confuse dyslexic readers&lt;/li&gt;
&lt;li&gt;This really goes hand and hand with modern web accesibility design&lt;/li&gt;
&lt;li&gt;If you design UIs with users that may have disabilities in mind then general readers benefit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My key takeaways for text:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don&amp;rsquo;t use black and white instead use gray and off-white&lt;/li&gt;
&lt;li&gt;Use concise sentences instead of long paragraphs.&lt;/li&gt;
&lt;li&gt;Increase Padding in between paragraphs.&lt;/li&gt;
&lt;li&gt;Left-justify text&lt;/li&gt;
&lt;li&gt;Use single spaces after sentences and never double space&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;information-dimension&#34;&gt;Information Dimension&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Serial (through time)&lt;/th&gt;
&lt;th&gt;Parallel (in space)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Takes longer to consume&lt;/td&gt;
&lt;td&gt;Evaluated instantly&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Comparisons are hard&lt;/td&gt;
&lt;td&gt;Comparisons are easy&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Burden on recall&lt;/td&gt;
&lt;td&gt;No burden on recall&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Pacing Issues&lt;/td&gt;
&lt;td&gt;Viewer controls Pace&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Harder to Understand&lt;/td&gt;
&lt;td&gt;Easier to Understand&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see from the table above it is easier to present information in parallel over serial to users&lt;/p&gt;

&lt;h3 id=&#34;graphic-language&#34;&gt;Graphic Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Match known physical items to make symbols easier to read&lt;/li&gt;
&lt;li&gt;Graphic Language should be independent of color&lt;/li&gt;
&lt;li&gt;There should be consistency of colors&lt;/li&gt;
&lt;/ul&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/olympic-graphics.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Notice here in both the simplicity of the icons but the clarity in their message&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can clearly tell each sport in each graphic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-was-surprising&#34;&gt;What was surprising&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I was surprised to learn that simplicity of design seems to be the hardest thing to get right&lt;/li&gt;
&lt;li&gt;Fancy effects don&amp;rsquo;t provide as much value as clarity of intent&lt;/li&gt;
&lt;li&gt;Accomodating to users with disabilities improves overall design&lt;/li&gt;
&lt;li&gt;Proximity of elements natural groups elements so you have to get the right proximity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-mark-miller-did-well&#34;&gt;What Mark Miller did well&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mark Miller know how to clearly explain key design principles that help you build great UIs&lt;/li&gt;
&lt;li&gt;The course is rich with imagery and clear examples on what constitutes good UIs&lt;/li&gt;
&lt;li&gt;There is also a great transition from the Science of Great UI course

&lt;ul&gt;
&lt;li&gt;Incremental steps on each course help facilitate key design points&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-could-have-been-done-better&#34;&gt;What could have been done better&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There wasn&amp;rsquo;t any mention of using Sketch app and instead Adobe Creative Cloud was heavily used&lt;/li&gt;
&lt;li&gt;It would be great to mention tools like Sketch and Omnigraffle&lt;/li&gt;
&lt;li&gt;More opinions on using design tools would be nice although it might detract from the course intent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Overall this course is wonderfully crafted, job well done&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;purchase-the-course&#34;&gt;Purchase the Course&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;http://app.deviq.com/courses/design-like-a-pro&#34; target=&#34;_blank&#34;&gt;Design Like a Pro&lt;/a&gt; to purchase and watch this great course.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
