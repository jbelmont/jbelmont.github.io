<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Musings on Software Musings</title>
    <link>https://www.marcelbelmont.com/</link>
    <description>Recent content in Software Musings on Software Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jean-Marcel Belmont</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tips and Tricks With Mongodb Part 2</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb-part2/</link>
      <pubDate>Wed, 20 Feb 2019 18:38:15 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb-part2/</guid>
      <description>

&lt;p&gt;In this second blog post I go over how to loads scripts in the mongo shell and how to automate tasks in mongo shell&lt;/p&gt;

&lt;h2 id=&#34;loading-scripts-in-the-mongo-shell&#34;&gt;Loading scripts in the Mongo Shell&lt;/h2&gt;

&lt;p&gt;You can load scripts in the mongo shell as long as the mongo shell knows the path.&lt;/p&gt;

&lt;p&gt;Let us get mongodb running with the following bash script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

docker run --name jbelmont-mongo-image-4 \
  --rm \
  -v ~/mongod_data.4.0.5:/data/db \
  -p 27017:27017 \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -d jbelmont/mongo-vim:4.0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that this is a custom docker image that I created&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-shell-prompt.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Not let us say that we wanted to write a script that shows all the numbers in the numbers collection and in particular the val field.&lt;/p&gt;

&lt;p&gt;In the mongo shell we could get it like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-script-in-shell.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now let us write a script in a javascript file to do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

db = connect(&amp;quot;localhost:27017/nosql_workshop&amp;quot;);

db.numbers.find({}).forEach(num =&amp;gt; print(num.val));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will put this script in the following path in my computer:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/Users/jean-marcelbelmont/go/src/github.com/jbelmont/nosql-workshop/scripts&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/load-scripts.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;The mongo shell needs to know the path in order to load the script. Notice that we used the native function &lt;code&gt;pwd()&lt;/code&gt; to verify the path and then we passed in the path to our script in the &lt;code&gt;load()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We can set an environment variable in our &lt;em&gt;~/.bashrc,~/.zshrc&lt;/em&gt; for our mongodb scripts like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $MONGO_SCRIPT_PATH
/Users/jean-marcelbelmont/go/src/github.com/FoodLogiQ/playground/scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can call the javascript file outside of the mongo shell like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-script-load.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice how we used the environment variable of $MONGO_SCRIPT_PATH here and then just invoked our script file.&lt;/p&gt;

&lt;p&gt;Some advantages of using the javascript file instead of the mongo shell is that the mongo shell has limits when you copy and paste large BSON objects and can explode at times.&lt;/p&gt;

&lt;p&gt;If you use your javascript file you can use all the power of ESNext JavaScript features to do CRUD Operations in MongoDB.&lt;/p&gt;

&lt;p&gt;Let us create the following script that stores 2 numbers in the numbers collection and then prints out the val field in the first number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

db = connect(&amp;quot;localhost:27017/nosql_workshop&amp;quot;);

let id1 = new ObjectId();
let id2 = new ObjectId();

let numbers = [
    {
        &amp;quot;_id&amp;quot;: id1,
        &amp;quot;val&amp;quot; : 2.1, 
        &amp;quot;description&amp;quot; : &amp;quot;Decimal&amp;quot;
    },
    {
        &amp;quot;_id&amp;quot;: id2,
        &amp;quot;val&amp;quot;: 3.1,
        &amp;quot;description&amp;quot; : &amp;quot;Decimal&amp;quot;
    }
];

db.numbers.insertMany(numbers);

let num1 = db.numbers.find({
    _id: id1
})[0].val;

print(num1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let us run the new script like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/complex-script.js&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now in the mongo shell we can look at our newest documents that we have added:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/new-numbers-in-collection.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;There is a lot more you can do with scripts if you use your imagination :)&lt;/p&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With Bash and Zsh</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-bash/</link>
      <pubDate>Sat, 16 Feb 2019 10:59:02 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-bash/</guid>
      <description>

&lt;p&gt;In this blog post I go over some tips and tricks with bash and cover some of the newer features in bash such as associative arrays which are available in Bash 4.&lt;/p&gt;

&lt;h2 id=&#34;using-bash-history-features&#34;&gt;Using Bash History features&lt;/h2&gt;

&lt;p&gt;A lot of people know about hitting the up and down keys in their keyboard to access history but you can also utilize the &lt;code&gt;!!&lt;/code&gt; operator to access history in bash.&lt;/p&gt;

&lt;p&gt;Say that we run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can run &lt;code&gt;sudo !!&lt;/code&gt; to execute the previous command.&lt;/p&gt;

&lt;p&gt;Here is a shell session of this in action:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/history-bang.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Notice that in the screenshot above the command that was executed was printed first in the terminal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is a more advanced example of the power of history substitution:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/history-substution-advanced.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we created 4 files file1.txt to file4.txt&lt;/p&gt;

&lt;p&gt;We then execute the &lt;code&gt;chmod&lt;/code&gt; command and reuse the 2nd to last command.&lt;/p&gt;

&lt;p&gt;The command: &lt;code&gt;chmod +x !touch$&lt;/code&gt; searches in shell history for the touch command which brings in the latest &lt;em&gt;touch&lt;/em&gt; command and then we use the last arguments in that command in this history substition.&lt;/p&gt;

&lt;p&gt;You can search the shell history by typing in &lt;code&gt;control + r&lt;/code&gt; in your terminal:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/reverse-search.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You can cycle through history individually by pressing &lt;code&gt;control + p&lt;/code&gt; for previous and then press &lt;code&gt;control + n&lt;/code&gt; for the next history item.&lt;/p&gt;

&lt;p&gt;You can also set your CDPATH variable in your .zshrc so that you can just &lt;em&gt;cd&lt;/em&gt; into frequent directories:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cdpath.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Here is an example of jumping into a directory from the CDPATH:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cdpath-example.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice in the screenshot above that we went from the home directory &lt;code&gt;~&lt;/code&gt; or &lt;code&gt;/Users/jean-marcelbelmont&lt;/code&gt; directly into the directory &lt;code&gt;/Users/jean-marcelbelmont/go/src/github.com/jbelmont/nosql-workshop&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;process-substitution&#34;&gt;Process Substitution&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In computing, process substitution is a form of inter-process communication that allows the input or output of a command to appear as a file. The command is substituted in-line, where a file name would normally occur, by the command shell. This allows programs that normally only accept files to directly read from or write to another program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is extremely useful with commands like &lt;em&gt;uniq&lt;/em&gt;, &lt;em&gt;sort&lt;/em&gt; that can take 2 arguments.&lt;/p&gt;

&lt;p&gt;Let us look at an example of this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/command-process-substitution.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in the screenshot above that we created 2 files: file1, file2&lt;/p&gt;

&lt;p&gt;We used command process substitution and ran sort in file1 and file2 and then passed that as standard input into the uniq command which printed out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;four&lt;/li&gt;
&lt;li&gt;one&lt;/li&gt;
&lt;li&gt;three&lt;/li&gt;
&lt;li&gt;two&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in sorted order and removed the duplicates in each file.&lt;/p&gt;

&lt;h2 id=&#34;associative-arrays-in-bash-and-zsh&#34;&gt;Associative arrays in bash and zsh&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Arrays.html&#34; target=&#34;_blank&#34;&gt;Associative arrays in bash&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bash provides one-dimensional indexed and associative array variables. Any variable may be used as an indexed array; the declare builtin will explicitly declare an array. There is no maximum limit on the size of an array, nor any requirement that members be indexed or assigned contiguously. Indexed arrays are referenced using integers (including arithmetic expressions and are zero-based; associative arrays use arbitrary strings. Unless otherwise noted, indexed array indices must be non-negative integers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us look at an example:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/associative-arrays.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice in the screenshot above that we use the declare keyword:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Declare variables and give them attributes.  If no NAMEs are given, display the attributes and values of all variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;-A    to make NAMEs associative arrays (if supported)*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We then access the associative array with the syntax like this:&lt;/p&gt;

&lt;p&gt;echo ${MY_MAP[KEY]} which prints out ONE in our case&lt;/p&gt;

&lt;p&gt;Let us look at a more advanced example of using associative arrays:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;#! /usr/local/bin/zsh

declare -A TEXT_INSIDE_PARENS_LIST

TEXT_INSIDE_PARENS=$(pbpaste | sed &#39;s/ /_/g&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)
TEXT_TITLECASE=$(echo $TEXT_INSIDE_PARENS | gsed &#39;s/.*/\L&amp;amp;/;s/[a-z]*/\u&amp;amp;/g;s/_/ /g&#39;)

COUNTER=0
for brackets in $TEXT_TITLECASE[@]
do
  TEXT_INSIDE_PARENS_LIST[$COUNTER]=$(echo $brackets | sed &#39;s/ /_/g&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39; | tr -d &#39;\n&#39;)
  printf &amp;quot;[%s](%s)\n&amp;quot; $brackets ${TEXT_INSIDE_PARENS_LIST[$COUNTER]}
  COUNTER=$(($COUNTER+1))
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create 2 lists and use an associative arrays that get a key in each loop of this script.&lt;/p&gt;

&lt;p&gt;We can write a more concise solution using IFS which is the internal field separator and using readarray.&lt;/p&gt;

&lt;p&gt;readarray: Read lines from a file into an array variable.&lt;/p&gt;

&lt;p&gt;We can also use here string.&lt;/p&gt;

&lt;p&gt;Here is a more concise example using bash 4:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /usr/local/bin/bash

IFS=$&#39;\n&#39;
WORDS=$(pbpaste)
readarray -t y &amp;lt;&amp;lt;&amp;lt; &amp;quot;$WORDS&amp;quot;

for word in $WORDS
do
  TEXT_INSIDE_PARENS=$(echo $word | sed &#39;s/ /_/g&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)
  printf &amp;quot;[%s](#%s)\n&amp;quot; $word $TEXT_INSIDE_PARENS
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the script above we put the system clipboard contents from pbpaste into the WORDS variable.
We then use the readarray builtin and here strings to create an array bash variable.
We then loop over words and create a running TEXT_INSIDE_PARENS variable and use the printf command.&lt;/p&gt;

&lt;p&gt;If you like this blog post you can read more about unix programming in my free gitbook &lt;a href=&#34;https://www.marcelbelmont.com/unix-programming-and-regular-expressions-workshop/&#34; target=&#34;_blank&#34;&gt;Unix Programming and Regular Expressions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With Mongodb</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb/</link>
      <pubDate>Sat, 12 Jan 2019 16:46:47 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb/</guid>
      <description>

&lt;p&gt;In this blog post I go over some tips and tricks with MongoDB and focus on using the mongodbshell.&lt;/p&gt;

&lt;h1 id=&#34;what-is-mongodb&#34;&gt;What is MongoDB&lt;/h1&gt;

&lt;p&gt;MongoDB is a document database with the scalability and flexibility that you want with the querying and indexing that you need.&lt;/p&gt;

&lt;h2 id=&#34;installing-mongodb&#34;&gt;Installing MongoDB&lt;/h2&gt;

&lt;p&gt;MongoDB is released as two editions: Community and Enterprise.&lt;/p&gt;

&lt;p&gt;Community is the open source release of MongoDB.&lt;/p&gt;

&lt;p&gt;Enterprise provides additional administration, authentication, and monitoring features.&lt;/p&gt;

&lt;p&gt;Installation steps vary depending on the edition; both procedures are outlined in this section.&lt;/p&gt;

&lt;p&gt;Follow the &lt;a href=&#34;https://docs.mongodb.com/manual/installation/&#34; target=&#34;_blank&#34;&gt;Instructions to Download MongoDB per Platform&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;starting-interactive-mongodb-session&#34;&gt;Starting interactive mongodb session&lt;/h4&gt;

&lt;p&gt;Once you have installed mongodb you need to make sure that is running and then you can simply type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then get into an interactive mongo shell session:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-interactive-shell.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;pretty-print-trick-for-mongodb&#34;&gt;Pretty Print trick for mongodb&lt;/h4&gt;

&lt;p&gt;You can set global settings in mongodb interactive shell in the &lt;em&gt;$SHELL/.mongorc.js&lt;/em&gt; configuration file.&lt;/p&gt;

&lt;p&gt;In mongodb shell if you want to pretty print collections you need to use the pretty() function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; db.heroes.find({}).pretty()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we set the following values in our &lt;em&gt;~/.mongorc.js&lt;/em&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-pretty-print.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now with this new setting we can simply query for documents and get pretty printing by default:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/pretty-print-by-default.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we did not specify the &lt;code&gt;.pretty()&lt;/code&gt; function and got pretty print behavior by default.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/using-unpretty-function.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;setting-default-number-of-documents-printed-to-standard-output&#34;&gt;Setting default number of documents printed to standard output&lt;/h4&gt;

&lt;p&gt;You can set the number of documents to show at a time with the following setting in *$HOME/.mongorc.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;DBQuery.shellBatchSize = 25
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;set-the-settings-for-a-mongodb-server-with-the-following-command&#34;&gt;Set the settings for a mongodb server with the following command:&lt;/h4&gt;

&lt;p&gt;You can see the setting for the mongodb server with this command in the interactive shell:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongodb-admin-server-settings.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-interactive-mongodb-session-full-javascript-console&#34;&gt;Using interactive mongodb session full javascript console&lt;/h4&gt;

&lt;p&gt;Remember that the mongodb interactive shell is full blown javascript repl:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongodb-interactive-repl.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongodb-interactive-repl2.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Notice here that we were able to use the map javascript function in the mongodb shell session.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;extending-prototype-functions-in-javascript-available-in-mongo-shell&#34;&gt;Extending prototype functions in JavaScript available in mongo shell&lt;/h4&gt;

&lt;p&gt;You can easily extend the available functions in mongo shell by adding them on &lt;em&gt;~/.mongorc.js&lt;/em&gt; configuration file:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/adding-prototype-functions-mongoshell.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now you can easily use this new function in a new mongo shell session like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/list-proto-length.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-mongostat&#34;&gt;Using mongostat&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.mongodb.com/manual/reference/program/mongostat/&#34; target=&#34;_blank&#34;&gt;mongostat docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The mongostat utility provides a quick overview of the status of a currently running mongod or mongos instance.&lt;/p&gt;

&lt;p&gt;mongostat is functionally similar to the UNIX/Linux file system utility vmstat, but provides data regarding mongod and mongos instances.&lt;/p&gt;

&lt;h4 id=&#34;finding-the-timestamp-for-when-a-particular-document-was-added&#34;&gt;Finding the timestamp for when a particular document was added&lt;/h4&gt;

&lt;p&gt;You can run the &lt;code&gt;ObjectId(&amp;quot;&amp;quot;).getTimestamp()&lt;/code&gt; to get the timestamp for the added mongo document&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-shell-timestamp-function.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-esnext-features-in-mongo-shell-session&#34;&gt;Using ESNext features in mongo shell session&lt;/h4&gt;

&lt;p&gt;You can use all the esnext features in JavaScript in the MongoShell session like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-shell-esnext-js.png&#34;/&gt; 
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Introduction to Reverse Engineering</title>
      <link>https://www.marcelbelmont.com/post/introduction-to-reverse-engineering/</link>
      <pubDate>Wed, 19 Dec 2018 20:37:56 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/introduction-to-reverse-engineering/</guid>
      <description>

&lt;h1 id=&#34;reverse-engineering&#34;&gt;Reverse Engineering&lt;/h1&gt;

&lt;p&gt;What is Reverse Engineering?&lt;/p&gt;

&lt;p&gt;According to Wikipedia Reverse Engineering is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;is the process by which a man-made object is deconstructed to reveal its designs, architecture, or to extract knowledge from the object; similar to scientific research, the only difference being that scientific research is about a natural phenomenon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the c2Wiki Reverse Engineering is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;is about presenting a piece of software at a higher level of abstraction. It can be based on sources or on binaries:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;why-embark-on-reverse-engineering-at-all&#34;&gt;Why embark on Reverse Engineering at all?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/Introduction_to_Software_Engineering/Reengineering/Reverse_Engineering&#34; target=&#34;_blank&#34;&gt;Reverse Engineering Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reasons for reverse engineering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Interoperability.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lost documentation: Reverse engineering often is done because the documentation of a particular device has been lost (or was never written), and the person who built it is no longer available.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integrated circuits often seem to have been designed on obsolete, proprietary systems, which means that the only way to incorporate the functionality into new technology is to reverse-engineer the existing chip and then re-design it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Product analysis. To examine how a product works, what components it consists of, estimate costs, and identify potential patent infringement.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Digital update/correction. To update the digital version (e.g. CAD model) of an object to match an &amp;ldquo;as-built&amp;rdquo; condition.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Security auditing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Acquiring sensitive data by disassembling and analysing the design of a system component.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Military or commercial espionage. Learning about an enemy&amp;rsquo;s or competitor&amp;rsquo;s latest research by stealing or capturing a prototype and dismantling it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Removal of copy protection, circumvention of access restrictions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Creation of unlicensed/unapproved duplicates.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Materials harvesting, sorting, or scrapping.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Academic/learning purposes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curiosity.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Competitive technical intelligence (understand what your competitor is actually doing versus what they say they are doing).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Learning: learn from others&amp;rsquo; mistakes. Do not make the same mistakes that others have already made and subsequently corrected.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;As you can see some of the reasons of reverse engineering can be nefarious but my intent for this blog post is for my personal curiosity and learning only&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;list-of-reverse-engineering-tools&#34;&gt;List of Reverse Engineering Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ibotpeaches.github.io/Apktool/&#34; target=&#34;_blank&#34;&gt;Apktool&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild them after making some modifications. It also makes working with an app easier because of the project like file structure and automation of some repetitive tasks like building apk, etc.&lt;/li&gt;
&lt;li&gt;It is NOT intended for piracy and other non-legal uses. It could be used for localizing, adding some features or support for custom platforms, analyzing applications and much more.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/pxb1988/dex2jar&#34; target=&#34;_blank&#34;&gt;dex2jar&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dex2jar is a tool for converting Android&amp;rsquo;s .dex format to Java&amp;rsquo;s .class format. just one binary format to another binary format, not to source.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://clang.llvm.org/&#34; target=&#34;_blank&#34;&gt;Clang LLVM Compiler&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Clang project provides a language front-end and tooling infrastructure for languages in the C language family (C, C++, Objective C/C++, OpenCL, CUDA, and RenderScript) for the LLVM project. Both a GCC-compatible compiler driver (clang) and an MSVC-compatible compiler driver (clang-cl.exe are provided.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eteran/edb-debugger&#34; target=&#34;_blank&#34;&gt;edb (evans debugger)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;edb is a cross platform AArch32/x86/x86-64 debugger. It was inspired by Ollydbg, but aims to function on AArch32, x86, and x86-64 as well as multiple OS&amp;rsquo;s. Linux is the only officially supported platform at the moment, but FreeBSD, OpenBSD, OSX and Windows ports are underway with varying degrees of functionality.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/gdabah/distorm/&#34; target=&#34;_blank&#34;&gt;distorm3&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;diStorm3 is really a decomposer, which means it takes an instruction and returns a binary structure which describes it rather than static text, which is great for advanced binary code analysis.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://flasm.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;flasm&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flasm disassembles your entire SWF including all the timelines and events. Looking at disassembly, you learn how the Flash compiler works, which improves your ActionScript skills. You can also do some optimizations on the disassembled code by hand or adjust the code as you wish. Flasm then applies your changes to the original SWF, replacing original actions.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.javadecompilers.com/jad&#34; target=&#34;_blank&#34;&gt;jad decompiler&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jad is a command line program that decompiles java code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tools.kali.org/reverse-engineering/javasnoop&#34; target=&#34;_blank&#34;&gt;javasnoop&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;javasnoop is a tool created by aspect security that allows you to attach to an existing process (like a debugger) and instantly begin tampering with method calls, run custom code, or just watch what’s happening on the system.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ollydbg.de/&#34; target=&#34;_blank&#34;&gt;ollydbg&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OllyDbg is a 32-bit assembler level analysing debugger for Microsoft Windows. Emphasis on binary code analysis makes it particularly useful in cases where source is unavailable. OllyDbg is a shareware, but you can download and use it for free.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.nasm.us/xdoc/2.14/html/nasmdoc1.html&#34; target=&#34;_blank&#34;&gt;nasm&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Netwide Assembler, NASM, is an 80x86 and x86-64 assembler designed for portability and modularity. It supports a range of object file formats, including Linux and *BSD a.out, ELF, COFF, Mach-O, 16-bit and 32-bit OBJ (OMF) format, Win32 and Win64. It will also output plain binary files, Intel hex and Motorola S-Record formats. Its syntax is designed to be simple and easy to understand, similar to the syntax in the Intel Software Developer Manual with minimal complexity. It supports all currently known x86 architectural extensions, and has strong support for macros.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.valgrind.org/&#34; target=&#34;_blank&#34;&gt;Valgrind&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Valgrind is an instrumentation framework for building dynamic analysis tools. There are Valgrind tools that can automatically detect many memory management and threading bugs, and profile your programs in detail. You can also use Valgrind to build new tools.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/radare/radare2&#34; target=&#34;_blank&#34;&gt;radare2&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Radare2 (also known as r2) is a complete framework for reverse-engineering and analyzing binaries; composed of a set of small utilities that can be used together or independently from the command line. Built around a disassembler for computer software which generates assembly language source code from machine-executable code, it supports a variety of executable formats for different processors and operating systems.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;basic-unix-tools-to-inspect-binary-executables&#34;&gt;Basic Unix Tools to inspect binary executables&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;strings - print the strings of printable characters in files.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is mainly used to look at printable characters in a binary executable&lt;/p&gt;

&lt;p&gt;Let us say that we have the following hello world file written in c&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(){
	printf(&amp;quot;Hello, world!\n&amp;quot;);

	exit(0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let us say that we generate a binary executable with gcc like this: &lt;code&gt;gcc -o hello.c hello&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We could use the strings command to print out the contents of it&lt;/p&gt;

&lt;p&gt;In the screenshot below we print out the contents of the binary executable with strings&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/strings.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can use the &lt;em&gt;objdump&lt;/em&gt; command to explore: &lt;em&gt;objdump - display information from object files.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;objdump displays information about one or more object files.&lt;/p&gt;

&lt;p&gt;The options control what particular information to display.&lt;/p&gt;

&lt;p&gt;This information is mostly useful to programmers who are working on the compilation tools, as opposed to programmers who just want their program to compile and work.&lt;/p&gt;

&lt;p&gt;Notice in this screenshot we got an object dump using intel and we are looking for the main method here&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/objdump.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Next we can use the &lt;em&gt;xxd&lt;/em&gt; command to look at that particular address printed in the screen:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;xxd - make a hexdump or do the reverse.&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/xxd.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In this screenshot we got the hexdump of the address space that corresponds with the objdump information from the previous screenshot.&lt;/p&gt;

&lt;h2 id=&#34;kali-linux-tools-for-reverse-engineering-penetration-testing-and-more&#34;&gt;Kali Linux Tools for Reverse Engineering, Penetration Testing and More&lt;/h2&gt;

&lt;p&gt;You can use many of the tools I listed earlier in the blog post in the Kali Linux Operating System.&lt;/p&gt;

&lt;p&gt;Kali Linux is a Debian-derived Linux distribution designed for digital forensics and penetration testing.&lt;/p&gt;

&lt;p&gt;You can download &lt;a href=&#34;https://www.kali.org/downloads/&#34; target=&#34;_blank&#34;&gt;Kali Linux Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-quick-look-at-radare-for-reverse-engineering&#34;&gt;A quick look at Radare for reverse engineering&lt;/h2&gt;

&lt;p&gt;Now recall that earlier we had compiled a simple hello world program written and c and compiled it using the gcc compiler.&lt;/p&gt;

&lt;p&gt;Using [radare2] we can look at the compiled executable and look at the opcodes and assembly code.&lt;/p&gt;

&lt;p&gt;We can look at the main function using radare.&lt;/p&gt;

&lt;p&gt;In a terminal session let us look at which teletype (tty) to help radare hook into the proper shell session.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/tty.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Next let us keep the tty session a long time by using the sleep command like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/sleep.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can create a target script with a &lt;code&gt;.rr2&lt;/code&gt; file extension which will run in radare2 at startup time&lt;/p&gt;

&lt;p&gt;&lt;em&gt;hello.rr2&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/usr/bin/env radare2
program=hello
stdio=/dev/pts/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have a configuration setup let us start using radare2. The actual command is &lt;code&gt;r2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot below we start the hello world binary executable:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/r2-initate.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can enter &lt;code&gt;aaa&lt;/code&gt; into the radare2 session to have radare2 analyze the binary executable.&lt;/p&gt;

&lt;p&gt;Here is the information printed by radare2:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/aaa.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now radare also has a lot of Vim mappings so if you enter the &lt;em&gt;V&lt;/em&gt; command and press enter you get into Visual Mode which looks like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-r2.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now this mode can be confusing so enter the command &lt;code&gt;?&lt;/code&gt; to see all the available commands while in visual mode:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-help.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You can change how the visual mode show information by cycling through with the p command which can have the following modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hex&lt;/li&gt;
&lt;li&gt;disasm&lt;/li&gt;
&lt;li&gt;debug&lt;/li&gt;
&lt;li&gt;words&lt;/li&gt;
&lt;li&gt;buf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like the debug mode in radare which looks like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-debug.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now in order to enter a command in visual mode press &lt;code&gt;:&lt;/code&gt; key in your keyboard&lt;/p&gt;

&lt;p&gt;You should see a screen like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-main.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now notice that we hit a breakpoint in radare&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/visual-mode-breakpoint.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;There are many more feature and options in Radare which you can read at in the official &lt;a href=&#34;https://radare.gitbooks.io/radare2book/&#34; target=&#34;_blank&#34;&gt;Radare2 Gitbook&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-find-me&#34;&gt;How to find me&lt;/h2&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started With Latex</title>
      <link>https://www.marcelbelmont.com/post/getting-started-with-latex/</link>
      <pubDate>Sun, 11 Nov 2018 21:26:43 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/getting-started-with-latex/</guid>
      <description>

&lt;p&gt;LaTex is a Typesetting system which was designed by &lt;a href=&#34;https://en.wikipedia.org/wiki/Leslie_Lamport&#34; target=&#34;_blank&#34;&gt;Leslie Lamport&lt;/a&gt; and derives much of its power from &lt;a href=&#34;https://en.wikipedia.org/wiki/TeX&#34; target=&#34;_blank&#34;&gt;Tex&lt;/a&gt;. It can be argued that LaTex is a set of macros.&lt;/p&gt;

&lt;h2 id=&#34;difference-between-tex-and-latex&#34;&gt;Difference between Tex and LaTex&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;TeX is about formatting with document/template designers in mind while LaTeX is all about  the content for document writers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Please read this &lt;a href=&#34;https://tex.stackexchange.com/questions/49/what-is-the-difference-between-tex-and-latex&#34; target=&#34;_blank&#34;&gt;stackexchange post for more details&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-is-latex-useful&#34;&gt;Why is LaTex useful?&lt;/h2&gt;

&lt;p&gt;You can more fine grain control of the quality of your document by using LaTex.&lt;/p&gt;

&lt;p&gt;Particularly if you are writing documents heavy in Mathematics, Science and Research Papers.&lt;/p&gt;

&lt;p&gt;Also LaTex lets you separate out the content of your writing from the layout of your document.&lt;/p&gt;

&lt;p&gt;LaTex lets you focus on the &amp;ldquo;what&amp;rdquo; of what you are writing and not &amp;ldquo;how&amp;rdquo; the final document will look.&lt;/p&gt;

&lt;h2 id=&#34;installing-latex-in-mac-os-x&#34;&gt;Installing LaTex in Mac OS X&lt;/h2&gt;

&lt;p&gt;You can install LaTex in Mac OS X easily by going to &lt;a href=&#34;http://www.tug.org/mactex/&#34; target=&#34;_blank&#34;&gt;MacTex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will get all the LaTex macros, compilers, editors and more in this full blown LaTex working environment.&lt;/p&gt;

&lt;h2 id=&#34;installing-latext-in-windows&#34;&gt;Installing LaText in Windows&lt;/h2&gt;

&lt;p&gt;You can install LaTex in Windows by going to &lt;a href=&#34;https://miktex.org/download&#34; target=&#34;_blank&#34;&gt;MikTex&lt;/a&gt; and to &lt;a href=&#34;http://www.tug.org/texlive/acquire-netinstall.html&#34; target=&#34;_blank&#34;&gt;Tex Live&lt;/a&gt;. It is best to install the full LaTex distribution.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax-of-a-latex-document&#34;&gt;Basic syntax of a LaTex Document&lt;/h2&gt;

&lt;p&gt;Here is a simple LaTex Document:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;helloWorld.tex&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{article}

\begin{document}
Hello world!
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You begin a LaTex document with &lt;code&gt;\documentclass&lt;/code&gt; command and then you use &lt;code&gt;\begin{document}&lt;/code&gt; command to start.&lt;/p&gt;

&lt;p&gt;Notice that here we placed &lt;em&gt;Hello, world!&lt;/em&gt; in between &lt;code&gt;\begin{document}&lt;/code&gt; and &lt;code&gt;\end{document}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;compile-latex-documents-with-latexmk-command&#34;&gt;Compile LaTex Documents with latexmk command&lt;/h2&gt;

&lt;p&gt;We can compile our latex document with this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;latexmk -pdf helloWorld.tex&lt;/code&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/latex-helloworld.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Here is the generated pdf with this command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/latex-helloworld-pdf.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;compile-latex-documents-with-latex-command&#34;&gt;Compile LaTex Documents with latex command&lt;/h2&gt;

&lt;p&gt;Let us look at another Tex document with tables now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{article} 
\usepackage[english]{babel}

\begin{document}

Without specifying width for last column:
\begin{center}
    \begin{tabular}{| l | l | l | l |}
    \hline
    Day &amp;amp; Min Temp &amp;amp; Max Temp &amp;amp; Summary \\ \hline
    Monday &amp;amp; 11C &amp;amp; 22C &amp;amp; A clear day with lots of sunshine.
    However, the strong breeze will bring down the temperatures. \\ \hline
    Tuesday &amp;amp; 9C &amp;amp; 19C &amp;amp; Cloudy with rain, across many northern regions. Clear spells 
    across most of Scotland and Northern Ireland, 
    but rain reaching the far northwest. \\ \hline
    Wednesday &amp;amp; 10C &amp;amp; 21C &amp;amp; Rain will still linger for the morning. 
    Conditions will improve by early afternoon and continue 
    throughout the evening. \\
    \hline
    \end{tabular}
\end{center}

With width specified:
\begin{center}
    \begin{tabular}{ | l | l | l | p{5cm} |}
    \hline
    Day &amp;amp; Min Temp &amp;amp; Max Temp &amp;amp; Summary \\ \hline
    Monday &amp;amp; 11C &amp;amp; 22C &amp;amp; A clear day with lots of sunshine.  
    However, the strong breeze will bring down the temperatures. \\ \hline
    Tuesday &amp;amp; 9C &amp;amp; 19C &amp;amp; Cloudy with rain, across many northern regions. Clear spells 
    across most of Scotland and Northern Ireland, 
    but rain reaching the far northwest. \\ \hline
    Wednesday &amp;amp; 10C &amp;amp; 21C &amp;amp; Rain will still linger for the morning. 
    Conditions will improve by early afternoon and continue 
    throughout the evening. \\
    \hline
    \end{tabular}
\end{center}

\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can compile this document with the the &lt;em&gt;latex&lt;/em&gt; command now and then use &lt;code&gt;dvipdfm&lt;/code&gt; to convert from dvi to pdf:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/convert-dvi-to-pdf.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;compile-latex-documents-with-pdflatex-command&#34;&gt;Compile LaTex documents with pdflatex command&lt;/h2&gt;

&lt;p&gt;We can compile directly into pdf with the &lt;em&gt;pdflatex&lt;/em&gt; command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/pdflatex-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;global-structure-of-latex-document&#34;&gt;Global Structure of LaTex Document&lt;/h2&gt;

&lt;p&gt;Every file should have this structure but there are exceptions to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{...}

\begin{document}
...
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The area between \documentclass{&amp;hellip;} and \begin{document} is called the preamble.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It normally contains commands that affect the entire document.&lt;/p&gt;

&lt;h4 id=&#34;document-classes&#34;&gt;Document Classes&lt;/h4&gt;

&lt;p&gt;This table has a complete list of all LaTex Document Classes:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Document Class&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;article&lt;/td&gt;
&lt;td&gt;For articles in scientific journals, presentations, short reports, program documentation, invitations, &amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IEEEtran&lt;/td&gt;
&lt;td&gt;For articles with the IEEE Transactions format.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;proc&lt;/td&gt;
&lt;td&gt;A class for proceedings based on the article class.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;report&lt;/td&gt;
&lt;td&gt;For longer reports containing several chapters, small books, thesis, &amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;book&lt;/td&gt;
&lt;td&gt;For real books.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;slides&lt;/td&gt;
&lt;td&gt;For slides. The class uses big sans serif letters.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;memoir&lt;/td&gt;
&lt;td&gt;For changing sensibly the output of the document. It is based on the book class, but you can create any kind of document with it&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;letter&lt;/td&gt;
&lt;td&gt;For writing letters.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;beamer&lt;/td&gt;
&lt;td&gt;For writing presentations (see LaTeX/Presentations).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;using-packages-in-latex&#34;&gt;Using Packages in LaTex&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Document_Structure#Packages&#34; target=&#34;_blank&#34;&gt;Packages Wiki&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While writing your document, you will probably find that there are some areas where basic LaTeX cannot solve your problem.&lt;/p&gt;

&lt;p&gt;If you want to include graphics, colored text or source code from a file into your document, you need to enhance the capabilities of LaTeX.&lt;/p&gt;

&lt;p&gt;Such enhancements are called packages. Some packages come with the LaTeX base distribution. Others are provided separately. Modern TeX distributions come with a large number of packages pre-installed. The command to use a package is pretty simple: \usepackage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is an example usage for importing packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using-sections-in-latex&#34;&gt;Using Sections in LaTex&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The commands for inserting sections are fairly intuitive. Of course, certain commands are appropriate to different document classes. For example, a book has chapters but an article doesn&amp;rsquo;t.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\chapter{Introduction}
This chapter&#39;s content...

\section{Structure}
This section&#39;s content...

\subsection{Top Matter}
This subsection&#39;s content...

\subsubsection{Article Information}
This subsubsection&#39;s content...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-started-with-travis-ci&#34;&gt;Getting started with Travis CI&lt;/h2&gt;

&lt;p&gt;If you want to get setup with Travis CI please read this blog post:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://harshjv.com/blog/setup-latex-pdf-build-using-travis-ci/&#34; target=&#34;_blank&#34;&gt;https://harshjv.com/blog/setup-latex-pdf-build-using-travis-ci/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-overall-advice-on-latex&#34;&gt;Getting overall advice on LaTex&lt;/h2&gt;

&lt;p&gt;Please read this very informative Github Repo on &lt;a href=&#34;https://github.com/dspinellis/latex-advice&#34; target=&#34;_blank&#34;&gt;LaTex&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;different-types-of-file-types-in-latex&#34;&gt;Different Types of File Types in LaTex&lt;/h2&gt;

&lt;p&gt;There are a myriad of different file types that LaTex can work with:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FileType&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.aux&lt;/td&gt;
&lt;td&gt;A file that transports information from one compiler run to the next. Among other things, the .aux file is used to store information associated with cross-references.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.bbl&lt;/td&gt;
&lt;td&gt;Bibliography file output by BiBTeX and used by LaTeX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.bib&lt;/td&gt;
&lt;td&gt;Bibliography database file. (where you can store a list of full bibliographic citations)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.blg&lt;/td&gt;
&lt;td&gt;BiBTeX log file. (errors are logged here)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.bst&lt;/td&gt;
&lt;td&gt;BiBTeX style file.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.cls&lt;/td&gt;
&lt;td&gt;Class files define what your document looks like. They are selected with the \documentclass command.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.dtx&lt;/td&gt;
&lt;td&gt;Documented TeX. This is the main distribution format for LaTeX style files. If you process a .dtx file you get documented macro code of the LaTeX package contained in the .dtx file.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.ins&lt;/td&gt;
&lt;td&gt;The installer for the files contained in the matching .dtx file. If you download a LaTeX package from the net, you will normally get a .dtx and a .ins file. Run LaTeX on the .ins file to unpack the .dtx file.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.fd&lt;/td&gt;
&lt;td&gt;Font description file telling LaTeX about new fonts.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.dvi&lt;/td&gt;
&lt;td&gt;Device Independent File. This is the main result of a LaTeX compile run with latex. You can look at its content with a DVI previewer program or you can send it to a printer with dvips or a similar application.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.pdf&lt;/td&gt;
&lt;td&gt;Portable Document Format. This is the main result of a LaTeX compile run with pdflatex. You can look at its content or print it with any PDF viewer.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.log&lt;/td&gt;
&lt;td&gt;Gives a detailed account of what happened during the last compiler run.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.toc&lt;/td&gt;
&lt;td&gt;Stores all your section headers. It gets read in for the next compiler run and is used to produce the table of contents.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.lof&lt;/td&gt;
&lt;td&gt;This is like .toc but for the list of figures.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.lot&lt;/td&gt;
&lt;td&gt;And again the same for the list of tables.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.idx&lt;/td&gt;
&lt;td&gt;If your document contains an index. LaTeX stores all the words that go into the index in this file. Process this file with makeindex.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.ind&lt;/td&gt;
&lt;td&gt;The processed .idx file, ready for inclusion into your document on the next compile cycle.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.ilg&lt;/td&gt;
&lt;td&gt;Logfile telling what makeindex did.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.sty&lt;/td&gt;
&lt;td&gt;LaTeX Macro package. This is a file you can load into your LaTeX document using the \usepackage command.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.tex&lt;/td&gt;
&lt;td&gt;LaTeX or TeX input file. It can be compiled with latex.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.out&lt;/td&gt;
&lt;td&gt;hyperref package file, just one for the master file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;read-online-latex-book&#34;&gt;Read Online LaTex Book&lt;/h2&gt;

&lt;p&gt;Please read the following &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX&#34; target=&#34;_blank&#34;&gt;LaTex Wiki Book&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;latex-workshop&#34;&gt;LaTex Workshop&lt;/h2&gt;

&lt;p&gt;I will be building a LaTex workshop that you can follow if you wish &lt;a href=&#34;https://github.com/jbelmont/latex-workshop&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-find-me&#34;&gt;How to find me&lt;/h2&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Rust Commandline Applications</title>
      <link>https://www.marcelbelmont.com/talk/building-commandline-applications-in-rust/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/talk/building-commandline-applications-in-rust/</guid>
      <description>&lt;p&gt;An All Things Open Conference Presentation on building commandline applications in Rust and Golang.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;😀Learning to build &lt;a href=&#34;https://twitter.com/hashtag/rustlang?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rustlang&lt;/a&gt; CLI applications with &lt;a href=&#34;https://twitter.com/jbelmont80?ref_src=twsrc%5Etfw&#34;&gt;@jbelmont80&lt;/a&gt; &lt;a href=&#34;https://twitter.com/AllThingsOpen?ref_src=twsrc%5Etfw&#34;&gt;@AllThingsOpen&lt;/a&gt; !! 🧠 &lt;a href=&#34;https://t.co/Nw0AIHjlPK&#34;&gt;pic.twitter.com/Nw0AIHjlPK&lt;/a&gt;&lt;/p&gt;&amp;mdash; 乃ﾑ尺刀ﾑ乃ﾑ丂 乃uﾚｱ乇ｲｲ (@_bulpett) &lt;a href=&#34;https://twitter.com/_bulpett/status/1054830077870071813?ref_src=twsrc%5Etfw&#34;&gt;October 23, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>A review of Hands On Continuous Integration and Delivery Book</title>
      <link>https://www.marcelbelmont.com/post/ci-cd-book/</link>
      <pubDate>Wed, 17 Oct 2018 19:22:45 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/ci-cd-book/</guid>
      <description>

&lt;h1 id=&#34;hands-on-continuous-integration-and-delivery&#34;&gt;Hands-On Continuous Integration and Delivery&lt;/h1&gt;

&lt;p&gt;There are several terms that are important when trying to learn about Continuous Integration and Continuous Delivery:&lt;/p&gt;

&lt;h2 id=&#34;definition-of-automation&#34;&gt;Definition of Automation&lt;/h2&gt;

&lt;p&gt;Automation is essentially any task that is completed without human interaction.
Let us say that you manually test a UI feature, if you write a script instead of manually test it than it can be said that you have automated the task.&lt;/p&gt;

&lt;h2 id=&#34;definition-of-continuous-integration&#34;&gt;Definition of Continuous Integration&lt;/h2&gt;

&lt;p&gt;Continuous Integration can be viewed as a software engineering task where source code is merged and tested in a version controlled project such as Git.&lt;/p&gt;

&lt;p&gt;Usually a Continuous Integration Build is triggered via source control management, meaning a developer pushes a commit to a version control system such as git.&lt;/p&gt;

&lt;p&gt;A Continuous Integration Build is more than just a compilation step.
It can consist of a compilation step, a testing phase, a code inspection phase, and a deployment phase.&lt;/p&gt;

&lt;p&gt;A Continuous Integration Build can act as a kind of verification step that checks that your software is working as a cohesive unit.&lt;/p&gt;

&lt;h2 id=&#34;definition-of-continuous-delivery&#34;&gt;Definition of Continuous Delivery&lt;/h2&gt;

&lt;p&gt;Continuous Delivery (CD) is the point at which you deliver a software product to your end users.&lt;/p&gt;

&lt;p&gt;A product is only useful if your intended users can actually use the product.&lt;/p&gt;

&lt;h2 id=&#34;business-impact-of-ci-cd-and-automation&#34;&gt;Business Impact of CI/CD and automation&lt;/h2&gt;

&lt;p&gt;Good CI/CD practices can fundamentally change the way an organization runs.&lt;/p&gt;

&lt;p&gt;If automation practices are effectively added on a CI/CD pipeline the quality of the software product will improve drastically.&lt;/p&gt;

&lt;p&gt;It is important to have a good set of unit tests in the first build of a CI/CD pipeline.&lt;/p&gt;

&lt;p&gt;We may add additional CI builds that serve as a full regression test suite for our software product.&lt;/p&gt;

&lt;p&gt;Later builds may incorporate Load Tests and Smoke Tests.&lt;/p&gt;

&lt;h2 id=&#34;using-jenkins-for-ci-cd&#34;&gt;Using Jenkins for CI/CD&lt;/h2&gt;

&lt;p&gt;You can use freestyle scripting in Jenkins and the new Jenkins 2.0 Pipeline Syntax along with Docker to create a more declarative CI Build System.&lt;/p&gt;

&lt;p&gt;Here is an example of a Jenkins Pipeline File:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipeline {
  agent {
    docker {
      image &#39;node:10-alpine&#39;
      args &#39;-v /Users/jean-marcelbelmont/jenkins_data&#39;
    }

  }
  stages {
    stage(&#39;Build&#39;) {
      steps {
        sh &#39;npm install&#39;
      }
    }
    stage(&#39;Cucumber Tests&#39;) {
      steps {
        sh &#39;npm run acceptance:tests&#39;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create a series of stages with the first stage creating a docker image to setup our environment.&lt;/p&gt;

&lt;p&gt;Notice that the docker block has &lt;em&gt;image&lt;/em&gt; for the docker image and &lt;em&gt;args&lt;/em&gt; for the arguments which in this case specify the location of the data mount.&lt;/p&gt;

&lt;p&gt;In the next stage of the pipeline we get our environment ready to build by issuing the command &lt;em&gt;npm install&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the last stage we run an acceptance test suite.&lt;/p&gt;

&lt;p&gt;Here is a screenshot of the Jenkins Pipeline:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/ci-cd-jenkins-pipeline.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;using-travis-ci-for-ci-cd&#34;&gt;Using Travis CI for CI/CD&lt;/h2&gt;

&lt;p&gt;Travis CI is a hosted and automated solution for CI Builds.&lt;/p&gt;

&lt;p&gt;The main difference between Travis CI and Jenkins is that Jenkins is a self managed automation solution for CI/CD. You can configure Jenkins in a fully customized manner whereas Travis CI is generally used in open source software projects.&lt;/p&gt;

&lt;p&gt;Here is a &lt;em&gt;.travis.yml&lt;/em&gt; script to show a possible CI/CD setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;language: go
services:
  - docker
go:
  - 1.9.x
os:
  - linux
sudo: false
env:
  matrix:
    - PORT=8080 ENVIRONMENT_NAME=travis
  global:
    secure: AvDa6vD77eIF3JifNegQ0cat2SS0vZpa9ami7E8LqYcnl4iJ3D47RHpR1eSkRrSwT6hJIsSG93y8Yi3WRSI3N8UkAuPs/tbr6mpaFwAHpZ0A+gxOf0Xt/SdV7xc2JEOuBjlwAoK23EXvvNyJwJxzAmg+ye5OzTv57LZu7tbWDoCT5Y1D8WD4IkDoFJUSDoG6SLwY0MWgd8YblhnpSIdWxn7H8cadJsjqhvnTkdyslx7s0rtpLsslNmBOgKu9yHdxAtxHXgBZnLHC9xLv41MDKJ1YNU6PqI/JUK4zHgWEHzXd4ZEATdDiq29WKtMIyJvcoVV8Kr8Tcm41ZuyFH6ZtzQGZOj1lyCmrI+qenMEhr7CvsPFOHpx0zZFQkjPYN9qDQAexzs5zEODMA9qjwpaaBXYm3xC7GHxLYUlXB+LpgB8bgmGIy0jax8Eyqlw8VRsmqyLBuPr5VU4W2ZV7GNYladNCLsNk/0VKWb6qdwzt4nXvCUZwbLeG8+TPIvceItxPA9MBxqdydVyfmwUB4aZSs76KJiALTxn0RcthgN+PE4RP6rcHlmsksd3/uup/LBASaK3yZH+DfFRh5VdzHGSqsYwP1Y2vxmnnWNltUfZMBW3WgPEO2sN29aMplcSFAVK8O2RNbBC2PDPRbmLzT7vrVZYKwCDQi6ywCVeS0xuv7js=
    # This creates the following global variable `COVERALLS_TOKEN`
before_install:
  - export PATH=$PATH:$HOME/gopath/bin
install:
  - make travis-install
before_script:
  - echo -e &amp;quot;Host github.com\n\tHostName github.com\n\tIdentityFile ~/.ssh/id_rsa\n&amp;quot; &amp;gt;&amp;gt; ~/.ssh/config
script:
  - make travis-script
after_success:
  - if [ -n &amp;quot;$TRAVIS_TAG&amp;quot; ]; then rm -rf ./bin; fi
  - if [ -n &amp;quot;$TRAVIS_TAG&amp;quot; ]; then curl -sL https://git.io/goreleaser | bash; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a breakdown of the travis yml script:&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;language&lt;/em&gt; field we specify the programming language which is &lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34;&gt;Golang&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;services&lt;/em&gt; field we specify the services we expect the Travis Virtual Machine to start on each CI build for us.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;go&lt;/em&gt; field we specify the go version we want to use&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;os&lt;/em&gt; field we specify the operating system we expect to use which can be mac or linux which you can read more about in &lt;a href=&#34;https://docs.travis-ci.com/user/reference/osx/&#34; target=&#34;_blank&#34;&gt;Travis Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;sudo&lt;/em&gt; field you specify the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;required

&lt;ul&gt;
&lt;li&gt;You will get a fully virtualized environment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;false

&lt;ul&gt;
&lt;li&gt;You will get a container based environment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;em&gt;env&lt;/em&gt; field we specify environment variables to be set for our CI build, which in this case consist of a &lt;em&gt;matrix&lt;/em&gt; field which has the environment variables of &lt;strong&gt;PORT&lt;/strong&gt; and &lt;strong&gt;ENVIRONMENT&lt;/strong&gt;. The &lt;em&gt;global&lt;/em&gt; field has an encrypted variable that we created with the travis cli.&lt;/p&gt;

&lt;p&gt;There are several lifecycle events that we can use in travis ci:&lt;/p&gt;

&lt;h4 id=&#34;before-install-lifecycle-event&#34;&gt;before_install lifecycle event&lt;/h4&gt;

&lt;p&gt;This event is useful when you want to set some values and/or install some dependencies before the actual default &lt;em&gt;install&lt;/em&gt; lifecycle event&lt;/p&gt;

&lt;h4 id=&#34;install-lifecycle-event&#34;&gt;install lifecycle event&lt;/h4&gt;

&lt;p&gt;This event is done on every build and essentially gets the environment ready for use to run your tests, lint code and more.&lt;/p&gt;

&lt;h4 id=&#34;before-script-lifecycle-event&#34;&gt;before_script lifecycle event&lt;/h4&gt;

&lt;p&gt;This event is useful when you want to run some actions before the actual &lt;em&gt;script&lt;/em&gt; lifecycle event.&lt;/p&gt;

&lt;h4 id=&#34;script-lifecycle-event&#34;&gt;script lifecycle event&lt;/h4&gt;

&lt;p&gt;This event will comprise the bulk of the actions you will do in your CI build&lt;/p&gt;

&lt;h4 id=&#34;after-success-lifecycle-event&#34;&gt;after_success lifecycle event&lt;/h4&gt;

&lt;p&gt;This event is used when you want to do some actions on a successful CI build.&lt;/p&gt;

&lt;p&gt;Notice that we are using Makefile tasks in the script section.&lt;/p&gt;

&lt;h2 id=&#34;makefile-contents&#34;&gt;Makefile Contents&lt;/h2&gt;

&lt;p&gt;Here are the contents of the makefile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;travis-install:
								go get -u github.com/mattn/goveralls
								go get -u github.com/philwinder/gocoverage
								go get -u github.com/alecthomas/gometalinter
								go get -u github.com/golang/dep/cmd/dep
								go get -u golang.org/x/tools/cmd/cover
								dep ensure

travis-script:
								set -e
								CGO_ENABLED=0 go build -i -o ${BIN_DIR} ${APID_MAIN}
								gometalinter --install
								gometalinter ./cmd/... ./internal/...
								go test ./... -cover
								gocoverage
								goveralls -coverprofile=profile.cov -repotoken=${COVERALLS_TOKEN}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;em&gt;travis-install&lt;/em&gt; makefile task we install all the golang library dependencies required for a CI build.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;travis-script&lt;/em&gt; makefile task we run a lint task, run tests, and push a code coverage report.&lt;/p&gt;

&lt;h2 id=&#34;using-circle-ci-for-ci-cd&#34;&gt;Using Circle CI for CI/CD&lt;/h2&gt;

&lt;p&gt;Circle CI like Travis CI is a hosted and managed automation solution.&lt;/p&gt;

&lt;p&gt;Circle CI uses a yaml syntax like Travis CI but has a very nice dashboard for viewing CI Builds.&lt;/p&gt;

&lt;p&gt;Here is a sample yml file with CI/CD tasks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: 2
jobs:
  build:
    working_directory: /go/src/github.com/packtci/go-template-example-with-circle-ci
    docker:
      - image: circleci/golang:1.9
    steps:
      - checkout
      - run:
          name: &amp;quot;Print go version&amp;quot;
          command: go version
      - run:
          name: &amp;quot;Run Unit Tests&amp;quot;
          command: go test
  integration:
    docker:
      - image: cypress/base:8
        environment:
          ## this enables colors in the output
          TERM: xterm
    steps:
      - checkout
      # special step to restore the dependency cache
      - restore_cache:
          key: v2-{{ checksum &amp;quot;package.json&amp;quot; }}
      - run: npm install
      # special step to save the dependency cache
      - save_cache:
          key: v2-{{ checksum &amp;quot;package.json&amp;quot; }}
          paths:
            - ~/.npm
            - ~/.cache
      - run: 
          name: &amp;quot;Run Integration Tests&amp;quot;
          command: npm test
  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
workflows:
  version: 2
  build_integration_and_deploy:
    jobs:
      - build
      - integration:
          requires:
            - build
      - deploy:
          requires:
            - integration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that here we create several steps for the CI/CD build.&lt;/p&gt;

&lt;p&gt;This is using a yaml syntax like Travis CI with different fields obviously.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;version&lt;/em&gt; field is where we specify the particular version of Circle CI syntax.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;jobs&lt;/em&gt; field is where we specify each job we want to run for Circle CI.&lt;/p&gt;

&lt;p&gt;Using the &lt;em&gt;docker&lt;/em&gt; field we can specify the particular docker images we need for our CI builds.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;workflows&lt;/em&gt; field is where we can schedule the jobs to run.&lt;/p&gt;

&lt;p&gt;Here is a screenshot of the Circle CI build steps:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/ci-cd-circle-ci.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;hands-on-continuous-integration-and-delivery-1&#34;&gt;Hands On Continuous Integration and Delivery&lt;/h2&gt;

&lt;p&gt;You can read more about Continuous Integration and Delivery by reading my books:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/virtualization-and-cloud/hands-continuous-integration-and-delivery&#34; target=&#34;_blank&#34;&gt;Hands On Continuous Integration and Delivery&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With VS Code</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-vscode-and-chrome/</link>
      <pubDate>Sun, 23 Sep 2018 19:09:59 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-vscode-and-chrome/</guid>
      <description>

&lt;h1 id=&#34;editor-tips-and-tricks-with-vs-code&#34;&gt;Editor Tips and Tricks with VS Code&lt;/h1&gt;

&lt;p&gt;Here are some suggested plugins by programming language.&lt;/p&gt;

&lt;h2 id=&#34;golang-extensions&#34;&gt;Golang Extensions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go&#34; target=&#34;_blank&#34;&gt;Go for Visual Studio Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;&amp;quot;go.useLanguageServer&amp;quot;: true&lt;/code&gt; in  &lt;em&gt;settings.json&lt;/em&gt; to use the Go language server from Sourcegraph for features like Hover, Definition, Find All References, Signature Help, Go to Symbol in File and Workspace.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; target=&#34;_blank&#34;&gt;GO Language Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will see Analysis Tools Missing in the bottom right, clicking this will offer to install all of the dependent Go tools. You can also run the command Go: Install/Update tools to install/update the same.&lt;/p&gt;

&lt;h2 id=&#34;rust-extensions&#34;&gt;Rust Extensions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=rust-lang.rust&#34; target=&#34;_blank&#34;&gt;Rust support for Visual Studio Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rust support is powered by the Rust Language Server (RLS). If you don&amp;rsquo;t have it installed, the extension will install it for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to find any other extensions just search in the Marketplace for them as there are tons of extensions available for languages and for certain configurations.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;editor-workflow-tips&#34;&gt;Editor Workflow Tips&lt;/h2&gt;

&lt;p&gt;Enter &lt;em&gt;F1&lt;/em&gt; in your keyboard to open the command window.&lt;/p&gt;

&lt;p&gt;Press &lt;em&gt;command p&lt;/em&gt; to open any files in the VS Code Workspace/Window&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vscode-command-prompt.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;file-navigation-tips&#34;&gt;File Navigation Tips&lt;/h4&gt;

&lt;p&gt;Press &lt;em&gt;command shift o&lt;/em&gt; to open the Symbols Menu to find symbols such as functions and more&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vscode-command-prompt.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Press &lt;em&gt;shift f12&lt;/em&gt; in order to find all usages of a function&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vscode-command-prompt.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Find the appropriate usage by hitting the up/down key and then press enter&lt;/p&gt;

&lt;h4 id=&#34;change-language-with-command-prompt&#34;&gt;Change Language with command prompt&lt;/h4&gt;

&lt;p&gt;Press &lt;em&gt;F1&lt;/em&gt; in your keyboard and then enter &lt;em&gt;change language mode&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/change-language-mode.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;install-bookmark-extension&#34;&gt;Install Bookmark Extension&lt;/h4&gt;

&lt;p&gt;Install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks&#34; target=&#34;_blank&#34;&gt;bookmark extension&lt;/a&gt; so that you can bookmark your source code&lt;/p&gt;

&lt;p&gt;Press &lt;em&gt;command alt k&lt;/em&gt; to set a bookmark&lt;/p&gt;

&lt;p&gt;Press &lt;em&gt;command alt j&lt;/em&gt; to go to previous set bookmark&lt;/p&gt;

&lt;p&gt;Press &lt;em&gt;command alt l&lt;/em&gt; to go jump to next bookmark&lt;/p&gt;

&lt;h4 id=&#34;code-folding-in-vs-code&#34;&gt;Code folding in VS Code&lt;/h4&gt;

&lt;p&gt;You can code fold by pressing &lt;em&gt;F1 and type fold all&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can unfold all by pressing &lt;em&gt;F1 and unfold all&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;format-file-types&#34;&gt;Format file types&lt;/h4&gt;

&lt;p&gt;You can easily format a json blog&lt;/p&gt;

&lt;p&gt;Here is a set of screenshots with a large json blog:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/large-json-blog.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/change-language-mode.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/format-document.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/json-entry.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/formatted-doc.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;code-diff-with-vs-code&#34;&gt;Code diff with VS Code&lt;/h4&gt;

&lt;p&gt;You can do code diffing with vs code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;code --diff file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;open-integrated-terminal&#34;&gt;Open Integrated Terminal&lt;/h4&gt;

&lt;p&gt;You can open the VS Code Integrated Terminal with &lt;em&gt;control `&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;install-programming-font-ligatures-in-vs-code&#34;&gt;Install Programming Font Ligatures in VS Code&lt;/h4&gt;

&lt;p&gt;You can use professional ligatures such as &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34; target=&#34;_blank&#34;&gt;FiraCode&lt;/a&gt; in VS Code&lt;/p&gt;

&lt;p&gt;Just follow the instructions in the &lt;a href=&#34;https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions&#34; target=&#34;_blank&#34;&gt;FiraCode Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can click the &lt;a href=&#34;https://github.com/tonsky/FiraCode/releases/download/1.205/FiraCode_1.205.zip&#34; target=&#34;_blank&#34;&gt;Download v1.205 button&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then open the zip file which should look like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/fira-zip-file.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;And when you open up all the ttf files you will see the following Font Book application&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/font-book.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Click install font button and then you will have the FiraCode fonts now.&lt;/p&gt;

&lt;p&gt;Next add an entry like this to your settings.json file in VS Code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    // Enables/Disables font ligatures.
    &amp;quot;editor.fontFamily&amp;quot;: &amp;quot;Fira Code&amp;quot;,
    &amp;quot;editor.fontLigatures&amp;quot;: true,
    &amp;quot;editor.fontWeight&amp;quot;: &amp;quot;300&amp;quot;,
    &amp;quot;editor.fontSize&amp;quot;: 13,
    &amp;quot;editor.cursorWidth&amp;quot;: 0,
    &amp;quot;editor.cursorStyle&amp;quot;: &amp;quot;block&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;change-editor-color-theme&#34;&gt;Change Editor Color Theme&lt;/h4&gt;

&lt;p&gt;You can change the color theme in VS Code by pressing &lt;em&gt;F1 and entering color theme&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can install many different themes in the VS Code Marketplace.&lt;/p&gt;

&lt;p&gt;Here are all of my Editor Themes:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vscode-color-themes.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or follow me at &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont at Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave a comment if you like this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hands-On Continuous Integration and Delivery</title>
      <link>https://www.marcelbelmont.com/publication/ci_cd_book/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/publication/ci_cd_book/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting started with Rustlang</title>
      <link>https://www.marcelbelmont.com/post/getting_started_with_rustlang/</link>
      <pubDate>Sun, 26 Aug 2018 20:30:37 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/getting_started_with_rustlang/</guid>
      <description>

&lt;h1 id=&#34;in-this-blog-post-i-go-over-getting-started-with-rustlang&#34;&gt;In this Blog Post I go over getting started with Rustlang&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;installing-rust-in-mac-os-x-linux&#34;&gt;Installing Rust in Mac OS X / Linux&lt;/h2&gt;

&lt;p&gt;To install Rust in Linux and Mac OS X run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://sh.rustup.rs -sSf | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For other installation methods please read the following &lt;a href=&#34;https://www.rust-lang.org/en-US/other-installers.html&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the cargo binaries to your path by adding the following entry in &lt;em&gt;~/.profile&lt;/em&gt;, &lt;em&gt;~/.bash_profile&lt;/em&gt; &lt;em&gt;~/.bashrc&lt;/em&gt;, &lt;em&gt;~/.zshrc&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;export PATH=&amp;quot;$HOME/.cargo/bin:$PATH&amp;quot;&amp;quot; &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note here that I appended this using &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to &lt;em&gt;~/.zshrc&lt;/em&gt; but you may choose &lt;em&gt;~/.bashrc&lt;/em&gt; or another file.&lt;/p&gt;

&lt;h4 id=&#34;installing-rust-in-windows&#34;&gt;Installing Rust in Windows&lt;/h4&gt;

&lt;p&gt;On Windows, go to &lt;a href=&#34;https://www.rust-lang.org/install.html&#34; target=&#34;_blank&#34;&gt;install&lt;/a&gt; and follow the instructions for installing Rust.&lt;/p&gt;

&lt;p&gt;You will need to install C++ build tools for Visual Studio 2013 or later here but it is best to just install &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017&#34; target=&#34;_blank&#34;&gt;Visual Studio Build Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tools are in the Other Tools and Frameworks section which looks like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/vs-build-tools.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;check-rust-installation&#34;&gt;Check Rust Installation&lt;/h4&gt;

&lt;p&gt;If Rust is installed then you should be able to run the following command in your terminal windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustc --version
rustc 1.26.2 (594fb253c 2018-06-01)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-rustlang&#34;&gt;Updating Rustlang&lt;/h2&gt;

&lt;p&gt;In order to update the rust binaries you need to run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run the &lt;code&gt;--version&lt;/code&gt; options with rustc a new version should be reported if the update found a new version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustc --version
rustc 1.28.0 (9634041f0 2018-07-30)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;viewing-local-documentation&#34;&gt;Viewing Local Documentation&lt;/h2&gt;

&lt;p&gt;In order to see local documentation you can run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup doc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cargo-package-manager&#34;&gt;Cargo Package Manager&lt;/h2&gt;

&lt;p&gt;Rust comes with a powerful package manager called &lt;strong&gt;cargo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can create new rust packages by using the cargo package manager.&lt;/p&gt;

&lt;p&gt;The command you use is: &lt;code&gt;cargo new&lt;/code&gt; with options and provide a name&lt;/p&gt;

&lt;h4 id=&#34;create-a-new-binary-template-package&#34;&gt;Create a new binary template package&lt;/h4&gt;

&lt;p&gt;If you want to create a new rust binary template application then run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo new PACKAGE_NAME --bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;create-a-new-library-template-package&#34;&gt;Create a new library template package&lt;/h4&gt;

&lt;p&gt;If you want to create a new rust library template application then run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo new PACKAGE_NAME --lib
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-contents-of-a-new-binary-template-package&#34;&gt;The contents of a new binary template package&lt;/h4&gt;

&lt;p&gt;When you create a new binary application cargo will create the following files:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/new_rust_package_contents.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that the following files were created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cargo.lock

&lt;ul&gt;
&lt;li&gt;This file locks your dependencies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cargo.toml

&lt;ul&gt;
&lt;li&gt;This file will have basic metadata for the rust package and dependencies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;src directory

&lt;ul&gt;
&lt;li&gt;main.rs

&lt;ul&gt;
&lt;li&gt;This will be main program for the application&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contents of &lt;em&gt;Cargo.toml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[package]
name = &amp;quot;hello-world&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
authors = [&amp;quot;Jean-Marcel Belmont &amp;lt;marcelbelmont@gmail.com&amp;gt;&amp;quot;]

[dependencies]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Contents of &lt;em&gt;src/main.rs&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    println!(&amp;quot;Hello, world!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;build-rust-package&#34;&gt;Build Rust package&lt;/h4&gt;

&lt;p&gt;In order to build the rust package you can run the following command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cargo-build.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;This command generates the &lt;em&gt;target&lt;/em&gt; directory with the following content:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/target-directory.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;running-rust-package&#34;&gt;Running Rust package&lt;/h4&gt;

&lt;p&gt;You could run rust packages by issuing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will build and run the rust package.&lt;/p&gt;

&lt;h4 id=&#34;check-the-rust-package-for-build-issues&#34;&gt;Check the Rust package for build issues&lt;/h4&gt;

&lt;p&gt;You can use the &lt;code&gt;cargo check&lt;/code&gt; command to see if your package will build but it will not create an executable.&lt;/p&gt;

&lt;h4 id=&#34;running-tests-with-cargo&#34;&gt;Running tests with Cargo&lt;/h4&gt;

&lt;p&gt;You can easily run tests by using the &lt;code&gt;cargo test&lt;/code&gt; command in the root of your project.&lt;/p&gt;

&lt;p&gt;Whenever you create a new library it will stub out a test for you in &lt;em&gt;src/lib.rs&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Notice here that there is an annotation of &lt;code&gt;#[cfg(test)]&lt;/code&gt; for the tests module and &lt;code&gt;#[test]&lt;/code&gt; for the test case.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources-to-learn-rustlang&#34;&gt;Resources to learn Rustlang&lt;/h2&gt;

&lt;p&gt;Arguably the best resource to learn Rust is the &lt;a href=&#34;https://doc.rust-lang.org/book/2018-edition/index.html&#34; target=&#34;_blank&#34;&gt;Official Rust Book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Rust Book will walk you through each and every aspect of the Rust Language so please read it!&lt;/p&gt;

&lt;h4 id=&#34;read-the-standard-library&#34;&gt;Read the Standard Library&lt;/h4&gt;

&lt;p&gt;Another way to learn Rust well is to read the Standard Library &lt;a href=&#34;https://doc.rust-lang.org/std/index.html&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should also read &lt;a href=&#34;https://doc.rust-lang.org/std/index.html#a-tour-of-the-rust-standard-library&#34; target=&#34;_blank&#34;&gt;A tour of the standard library&lt;/a&gt; which will list all the primitive types, modules, and macros in Rust.&lt;/p&gt;

&lt;h4 id=&#34;using-the-rust-playground&#34;&gt;Using the Rust Playground&lt;/h4&gt;

&lt;p&gt;Much like Golang has a playground so does Rust.&lt;/p&gt;

&lt;p&gt;Here is a link to the Rust Playground that uses Rust nightly and has debugging mode enabled &lt;a href=&#34;https://play.rust-lang.org/?version=nightly&amp;amp;mode=debug&amp;amp;edition=2018&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;community-links&#34;&gt;Community Links&lt;/h2&gt;

&lt;p&gt;Check out all the community related information &lt;a href=&#34;https://www.rust-lang.org/en-US/community.html&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this Blog Post please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With Curl and Jq</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-curl-and-jq/</link>
      <pubDate>Sun, 22 Jul 2018 09:13:27 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-curl-and-jq/</guid>
      <description>

&lt;h1 id=&#34;tips-and-tricks-with-curl-and-jq&#34;&gt;Tips and Tricks With Curl and Jq&lt;/h1&gt;

&lt;p&gt;In this blog post we will work with Restful APIs and use jq, which is a command line processor for json. We will use curl to make Rest calls and then use jq to parse the json response into more useful information. By using jq we can do many useful transformation with json such as aggregating data like averages from a json response payload and extracting only the fields that we are interested in working with instead of an entire payload and much more.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites-for-the-blog-post&#34;&gt;Prerequisites for the Blog Post&lt;/h2&gt;

&lt;h4 id=&#34;jq-installation&#34;&gt;jq installation&lt;/h4&gt;

&lt;p&gt;To install jq please read the instructions in the &lt;a href=&#34;https://stedolan.github.io/jq/download/&#34; target=&#34;_blank&#34;&gt;jq installation documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mac OS X users can use &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;homebrew&lt;/a&gt; to install &lt;a href=&#34;https://stedolan.github.io/jq/&#34; target=&#34;_blank&#34;&gt;jq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run this command to install jq with homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;curl-installation&#34;&gt;curl installation&lt;/h4&gt;

&lt;p&gt;To install curl please read the instructions in the &lt;a href=&#34;https://curl.haxx.se/download.html&#34; target=&#34;_blank&#34;&gt;curl installation documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mac OS X users already have curl installed by default but can also use &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;homebrew&lt;/a&gt; to install &lt;a href=&#34;https://curl.haxx.se/&#34; target=&#34;_blank&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run this command to install curl with homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install curl
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-of-public-apis&#34;&gt;List of Public APIs&lt;/h2&gt;

&lt;p&gt;You can get a list of public apis in &lt;a href=&#34;https://github.com/toddmotto/public-apis&#34; target=&#34;_blank&#34;&gt;Todd Motto&amp;rsquo;s github repo&lt;/a&gt;.
We will use some of the public apis listed in this repo.&lt;/p&gt;

&lt;h2 id=&#34;using-curl-to-make-restful-api-calls&#34;&gt;Using curl to make restful api calls&lt;/h2&gt;

&lt;h4 id=&#34;brief-description-of-curl&#34;&gt;Brief description of curl&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://curl.haxx.se/&#34; target=&#34;_blank&#34;&gt;curl&lt;/a&gt; is used in command line applications or scripts to transfer data. It is used in a broad range of applications ranging from cars, tvs to audio equipment. We will be using curl to work with HTTP APIs but curl can work with many other protocols besides HTTP.&lt;/p&gt;

&lt;h4 id=&#34;making-a-restful-api-call-with-curl&#34;&gt;Making a restful api call with curl&lt;/h4&gt;

&lt;p&gt;Let us work with the &lt;a href=&#34;https://www.goodreads.com/&#34; target=&#34;_blank&#34;&gt;goodreads&lt;/a&gt; api to list some good book recommendations and first we need to authorize the &lt;a href=&#34;https://www.goodreads.com/api&#34; target=&#34;_blank&#34;&gt;goodreads api&lt;/a&gt; by creating an account with goodreads or by authorizing twitter or facebook as an oauth application with the goodreads application. You will need to go the &lt;a href=&#34;https://www.goodreads.com/api/keys&#34; target=&#34;_blank&#34;&gt;API Key page in good reads&lt;/a&gt; to register your oauth application with good reads.&lt;/p&gt;

&lt;h6 id=&#34;rest-call-to-get-the-reviews-for-a-book-given-a-title-string&#34;&gt;Rest call to get the reviews for a book given a title string&lt;/h6&gt;

&lt;p&gt;We will make a rest call to the following endpoint with the goodreads api:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET https://www.goodreads.com/book/title.json??author=Erich+Gamma&amp;amp;key=hTDxFOV2GPZTzvzp4FZDlw&amp;amp;title=Design Patterns&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;em&gt;format&lt;/em&gt; can be either json or xml as the data-interchange format and isbn is the the ISBN of the book to lookup.&lt;/p&gt;

&lt;p&gt;Now we will use curl in the command line to make a GET request to the goodreads api by running the following command in a command prompt or terminal application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl &#39;https://www.goodreads.com/book/title.json?author=Arthur+Conan+Doyle&amp;amp;key=hTDxFOV2GPZTzvzp4FZDlw&amp;amp;title=Hound+of+the+Baskervilles&#39; -H &#39;Accept: application/json&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is json that we get back from the API:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;reviews_widget&amp;quot;:&amp;quot;\u003cstyle\u003e\n  #goodreads-widget {\n    font-family: georgia, serif;\n    padding: 18px 0;\n    width:565px;\n  }\n  #goodreads-widget h1 {\n    font-weight:normal;\n    font-size: 16px;\n    border-bottom: 1px solid #BBB596;\n    margin-bottom: 0;\n  }\n  #goodreads-widget a {\n    text-decoration: none;\n    color:#660;\n  }\n  iframe{\n    background-color: #fff;\n  }\n  #goodreads-widget a:hover { text-decoration: underline; }\n  #goodreads-widget a:active {\n    color:#660;\n  }\n  #gr_footer {\n    width: 100%;\n    border-top: 1px solid #BBB596;\n    text-align: right;\n  }\n  #goodreads-widget .gr_branding{\n    color: #382110;\n    font-size: 11px;\n    text-decoration: none;\n    font-family: \&amp;quot;Helvetica Neue\&amp;quot;, Helvetica, Arial, sans-serif;\n  }\n\u003c/style\u003e\n\u003cdiv id=\&amp;quot;goodreads-widget\&amp;quot;\u003e\n  \u003cdiv id=\&amp;quot;gr_header\&amp;quot;\u003e\u003ch1\u003e\u003ca rel=\&amp;quot;nofollow\&amp;quot; href=\&amp;quot;https://www.goodreads.com/book/show/8921.The_Hound_of_the_Baskervilles\&amp;quot;\u003eThe Hound of the Baskervilles Reviews\u003c/a\u003e\u003c/h1\u003e\u003c/div\u003e\n  \u003ciframe id=\&amp;quot;the_iframe\&amp;quot; src=\&amp;quot;https://www.goodreads.com/api/reviews_widget_iframe?did=DEVELOPER_ID\u0026amp;format=html\u0026amp;isbn=0451528018\u0026amp;links=660\u0026amp;review_back=fff\u0026amp;stars=000\u0026amp;text=000\&amp;quot; width=\&amp;quot;565\&amp;quot; height=\&amp;quot;400\&amp;quot; frameborder=\&amp;quot;0\&amp;quot;\u003e\u003c/iframe\u003e\n  \u003cdiv id=\&amp;quot;gr_footer\&amp;quot;\u003e\n    \u003ca class=\&amp;quot;gr_branding\&amp;quot; target=\&amp;quot;_blank\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; href=\&amp;quot;https://www.goodreads.com/book/show/8921.The_Hound_of_the_Baskervilles?utm_medium=api\u0026amp;utm_source=reviews_widget\&amp;quot;\u003eReviews from Goodreads.com\u003c/a\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notice here that the json output is not very pretty let us now use the jq command line processor to pretty print our json.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will now use a Unix Pipe to pipe the output of our rest call into jq which will pretty print our json by default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl &#39;https://www.goodreads.com/book/title.json?author=Arthur+Conan+Doyle&amp;amp;key=hTDxFOV2GPZTzvzp4FZDlw&amp;amp;title=Hound+of+the+Baskervilles&#39; -H &#39;Pragma: no-cache&#39; -H &#39;Accept: application/json&#39; | jq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the output of the json using jq:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;reviews_widget&amp;quot;: &amp;quot;&amp;lt;style&amp;gt;\n  #goodreads-widget {\n    font-family: georgia, serif;\n    padding: 18px 0;\n    width:565px;\n  }\n  #goodreads-widget h1 {\n    font-weight:normal;\n    font-size: 16px;\n    border-bottom: 1px solid #BBB596;\n    margin-bottom: 0;\n  }\n  #goodreads-widget a {\n    text-decoration: none;\n    color:#660;\n  }\n  iframe{\n    background-color: #fff;\n  }\n  #goodreads-widget a:hover { text-decoration: underline; }\n  #goodreads-widget a:active {\n    color:#660;\n  }\n  #gr_footer {\n    width: 100%;\n    border-top: 1px solid #BBB596;\n    text-align: right;\n  }\n  #goodreads-widget .gr_branding{\n    color: #382110;\n    font-size: 11px;\n    text-decoration: none;\n    font-family: \&amp;quot;Helvetica Neue\&amp;quot;, Helvetica, Arial, sans-serif;\n  }\n&amp;lt;/style&amp;gt;\n&amp;lt;div id=\&amp;quot;goodreads-widget\&amp;quot;&amp;gt;\n  &amp;lt;div id=\&amp;quot;gr_header\&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;a rel=\&amp;quot;nofollow\&amp;quot; href=\&amp;quot;https://www.goodreads.com/book/show/8921.The_Hound_of_the_Baskervilles\&amp;quot;&amp;gt;The Hound of the Baskervilles Reviews&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;\n  &amp;lt;iframe id=\&amp;quot;the_iframe\&amp;quot; src=\&amp;quot;https://www.goodreads.com/api/reviews_widget_iframe?did=DEVELOPER_ID&amp;amp;amp;format=html&amp;amp;amp;isbn=0451528018&amp;amp;amp;links=660&amp;amp;amp;review_back=fff&amp;amp;amp;stars=000&amp;amp;amp;text=000\&amp;quot; width=\&amp;quot;565\&amp;quot; height=\&amp;quot;400\&amp;quot; frameborder=\&amp;quot;0\&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;\n  &amp;lt;div id=\&amp;quot;gr_footer\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;gr_branding\&amp;quot; target=\&amp;quot;_blank\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; href=\&amp;quot;https://www.goodreads.com/book/show/8921.The_Hound_of_the_Baskervilles?utm_medium=api&amp;amp;amp;utm_source=reviews_widget\&amp;quot;&amp;gt;Reviews from Goodreads.com&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;post-request-with-curl&#34;&gt;POST Request with curl&lt;/h4&gt;

&lt;p&gt;Curl has many command line options for dealing with HTTP APIs and we will have a section for each option.&lt;/p&gt;

&lt;h6 id=&#34;http-request-option-for-curl&#34;&gt;HTTP Request Option for curl&lt;/h6&gt;

&lt;p&gt;The command line option for http requests is either &lt;code&gt;-X&lt;/code&gt; or &lt;code&gt;--request&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can find all the HTTP Verbs documented in the HTTP 1.1 specification:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRACE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONNECT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;PATCH&lt;/code&gt; HTTP Verb came later and is documented in &lt;a href=&#34;https://tools.ietf.org/html/rfc5789#section-1&#34; target=&#34;_blank&#34;&gt;RFC 5789&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read more about this in &lt;a href=&#34;https://tools.ietf.org/html/rfc2616#section-9&#34; target=&#34;_blank&#34;&gt;RFC 2616 Section 9&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;example-post-request-to-circle-ci-api&#34;&gt;Example POST Request to CIRCLE CI API&lt;/h6&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/api/v1-reference/&#34; target=&#34;_blank&#34;&gt;CIRCLE CI API V1 Reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will make a POST request to Circle CI to test out a local configuration script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --user ${CIRCLECI_API_TOKEN_GITHUB}: \
    --request POST \
    --form revision=7d7c87e2c35df34f74f5b0cdfc47244f296c5fed \
    --form config=@config.yml \
    --form notify=false \
    https://circleci.com/api/v1.1/project/github/packtci/go-template-example-with-circle-ci/tree/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are providing the option &amp;ndash;user which takes &lt;code&gt;USER[:PASSWORD]  Server user and password&lt;/code&gt;
The &lt;code&gt;--form&lt;/code&gt; which takes &lt;code&gt;CONTENT  Specify HTTP multipart POST data (H)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-curl-and-jq-to-parse-out-response-payloads&#34;&gt;Using curl and jq to parse out response payloads&lt;/h2&gt;

&lt;h4 id=&#34;extract-top-level-attribute-in-json-payload&#34;&gt;Extract top level attribute in JSON Payload&lt;/h4&gt;

&lt;p&gt;We will now make a GET Request to the CIRCLE CI API to get information about the user and extract an attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET \
    --header &amp;quot;Accept: application/json&amp;quot; \
    &amp;quot;https://circleci.com/api/v1.1/me?circle-token=$CIRCLECI_PERSONAL_API_TOKEN&amp;quot; \
    | jq &#39;.name&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we use the &lt;a href=&#34;https://stedolan.github.io/jq/manual/#Basicfilters&#34; target=&#34;_blank&#34;&gt;jq&lt;/a&gt; utility to pluck out the name attribute which is a top level attribute in the response payload for the &lt;code&gt;GET&lt;/code&gt; request.&lt;/p&gt;

&lt;h4 id=&#34;parse-out-nested-attribute-in-big-response-payload&#34;&gt;Parse out nested attribute in big response payload&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET \
    --header &amp;quot;Accept: application/json&amp;quot; \
    &amp;quot;https://circleci.com/api/v1.1/recent-builds?circle-token=$CIRCLECI_PERSONAL_API_TOKEN&amp;amp;limit=20&amp;amp;offset=5&amp;quot; \
    | jq &#39;.[] | .subject&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we iterate through all the elements of the array and then parse out the nested subject attribute from the response&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/jq-parse.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-jq-play-to-interactively-experiment&#34;&gt;Using jq play to interactively experiment&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://jqplay.org/&#34; target=&#34;_blank&#34;&gt;jq play&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can craft more complicated jq queries with ease if you use the jq playground.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/jq-play.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice in this screenshot above that we used a combination of builtin functions in jq such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions&#34; target=&#34;_blank&#34;&gt;select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions&#34; target=&#34;_blank&#34;&gt;map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions&#34; target=&#34;_blank&#34;&gt;length&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that we were able to use the JavaScript equivalence operator of &lt;code&gt;==&lt;/code&gt; to check our condition&lt;/p&gt;

&lt;h6 id=&#34;add-the-jq-query-to-our-curl-command&#34;&gt;Add the jq query to our curl command&lt;/h6&gt;

&lt;p&gt;Let use add the jq query in the bottom of the screenshot to an existing curl command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

curl -X GET \
    --header &amp;quot;Accept: application/json&amp;quot; \
    &amp;quot;https://circleci.com/api/v1.1/recent-builds?circle-token=$CIRCLECI_PERSONAL_API_TOKEN&amp;amp;limit=20&amp;amp;offset=5&amp;quot; \
    | jq &#39;map(select(.ssh_disabled == false)) | length&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how useful the jq playground editor is in crafting jq queries&lt;/p&gt;

&lt;h6 id=&#34;compute-average-build-times-with-jq&#34;&gt;Compute average build times with jq&lt;/h6&gt;

&lt;p&gt;Now let us compute the average build time in Circle CI using jq.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

curl -X GET \
    --header &amp;quot;Accept: application/json&amp;quot; \
    &amp;quot;https://circleci.com/api/v1.1/recent-builds?circle-token=$CIRCLECI_PERSONAL_API_TOKEN&amp;amp;limit=20&amp;amp;offset=5&amp;quot; \
    | jq &#39;(reduce .[].build_time_millis as $build_time (0; . + $build_time) ) / length&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/manual/&#34; target=&#34;_blank&#34;&gt;jq manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jqplay.org/&#34; target=&#34;_blank&#34;&gt;jq playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ec.haxx.se/&#34; target=&#34;_blank&#34;&gt;curl book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jbelmont/tips-and-tricks-with-curl-and-jq&#34; target=&#34;_blank&#34;&gt;Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Browser Automation</title>
      <link>https://www.marcelbelmont.com/post/browser-automation/</link>
      <pubDate>Sun, 24 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/browser-automation/</guid>
      <description>

&lt;p&gt;In this blog post we will look at cypress.io and puppeteer as viable replacements to Selenium WebDriver. Selenium WebDriver is still a good option for writing End to End Tests but over the years some newer libraries have spawned that use Chrome DevTools Protocol or to be more specific use Chrome to UI Tests.&lt;/p&gt;

&lt;h2 id=&#34;selenium-webdriver&#34;&gt;Selenium WebDriver&lt;/h2&gt;

&lt;p&gt;Selenium WebDriver has been in use for a long while and Selenium WebDriver drives the browser by utilizing an Object Oriented API that is built in Java. Selenium has client apis in Java, C#, Ruby, Python, and JavaScript.&lt;/p&gt;

&lt;h4 id=&#34;some-drawbacks-to-selenium&#34;&gt;Some Drawbacks to Selenium&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;End to End tests written in Selenium tend to be brittle&lt;/li&gt;
&lt;li&gt;Setup can be very complicated&lt;/li&gt;
&lt;li&gt;Tests can be really slow as each tests spins up a browser instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;options-to-selenium&#34;&gt;Options to Selenium&lt;/h2&gt;

&lt;p&gt;There are other options instead of Selenium now and in this blog post we will examine &lt;a href=&#34;https://pptr.dev/#?product=Puppeteer&amp;amp;version=v1.5.0&amp;amp;show=api-overview&#34; target=&#34;_blank&#34;&gt;Puppeteer&lt;/a&gt; and &lt;a href=&#34;https://docs.cypress.io/guides/overview/why-cypress.html&#34; target=&#34;_blank&#34;&gt;Cypress.io&lt;/a&gt; in detail.&lt;/p&gt;

&lt;h2 id=&#34;puppeteer&#34;&gt;Puppeteer&lt;/h2&gt;

&lt;p&gt;Puppeteer is a Node library which provides a high-level API to control Chromium or Chrome over the DevTools Protocol. Puppeteer is relatively new as it was released in 2017 as an open source project by a Googler. Puppeteer is a good option to replace &lt;a href=&#34;http://phantomjs.org/&#34; target=&#34;_blank&#34;&gt;Phantomjs&lt;/a&gt; which has been suspended from further development.&lt;/p&gt;

&lt;h4 id=&#34;advantages-of-puppeteer&#34;&gt;Advantages of Puppeteer&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Puppeteer has support for parallelization for running tests in a CI Build&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Spawn multiple browser sessions to help simulate load that a particular service may encounter with multiple clients&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Record snapshots of tests while they run&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;setup-puppeteer&#34;&gt;Setup Puppeteer&lt;/h4&gt;

&lt;p&gt;Installing &lt;a href=&#34;https://pptr.dev/&#34; target=&#34;_blank&#34;&gt;Puppeteer&lt;/a&gt; is easy as you can just use npm to install it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install --save-dev puppeteer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After you have installed puppeteer onto your project the next thing to do is to require puppeteer and to use the puppeteer api to launch a Chrome browser and run your tests.&lt;/p&gt;

&lt;h4 id=&#34;puppeteer-usage-requirements&#34;&gt;Puppeteer Usage Requirements&lt;/h4&gt;

&lt;p&gt;Puppeteer can work with Node v6.4.0 or greater but most of the examples in Puppeteer use async and await which is only supported in Node v7.6.0 or greater. So consider adding this to your package.json.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;engines&amp;quot;: {
  &amp;quot;node&amp;quot;: &amp;quot;&amp;gt;=7.6.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;This will ensure that only node version 7.6.0 or greater is used&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;puppeteer-example&#34;&gt;Puppeteer Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const puppeteer = require(&#39;puppeteer&#39;);

(async () =&amp;gt; {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto(&#39;https://marcelbelmont.com&#39;);
  await page.screenshot({path: &#39;blog.png&#39;});

  await browser.close();
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that in the code snippet above we are using async and await in node.js. Take note that async and await are a way to deal with asynchronous action in JavaScript. It is a nicer way to work with asynchronous code over callbacks and promises.&lt;/p&gt;

&lt;h4 id=&#34;adding-a-web-scraping-test-with-jest&#34;&gt;Adding a Web Scraping Test with Jest&lt;/h4&gt;

&lt;p&gt;We will be writing a test with the &lt;a href=&#34;https://facebook.github.io/jest/&#34; target=&#34;_blank&#34;&gt;Jest Testing Library&lt;/a&gt; by Facebook and using Puppeteer.&lt;/p&gt;

&lt;p&gt;In order to install jest run &lt;code&gt;npm install --save-dev jest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Jest has mocha like syntax and can be used with many different types of FrontEnd Libraries.&lt;/p&gt;

&lt;p&gt;For the purposes of this blog post we will simply be using to write node.js code.&lt;/p&gt;

&lt;h6 id=&#34;code-snippet-with-blog-test&#34;&gt;Code Snippet with Blog Test&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

const puppeteer = require(&amp;quot;puppeteer&amp;quot;);

let page;
let browser;
const webpage = &amp;quot;https://github.com/GoogleChrome/puppeteer&amp;quot;;
const width = 1440;
const height = 900;
const myBlog = &amp;quot;blog.png&amp;quot;

describe(&amp;quot;Scrape the Puppeteer github repository&amp;quot;, () =&amp;gt; {

  beforeAll(async () =&amp;gt; {
    browser = await puppeteer.launch({
      headless: true,
      args: [&amp;quot;--no-sandbox&amp;quot;, &amp;quot;--disable-setuid-sandbox&amp;quot;]
    });
    page = await browser.newPage();
    await page.setViewport({ width, height });
  });

  afterAll(async () =&amp;gt; {
    await page.screenshot({path: myBlog});
    browser.close();
  });

  it(&amp;quot;Should have a list of uls for features in Puppeteer&amp;quot;, async () =&amp;gt; {
    await page.goto(webpage);
    const textContent = await page.evaluate(() =&amp;gt; document.querySelector(&#39;.markdown-body.entry-content blockquote p&#39;).textContent);
    expect(textContent).toEqual(&amp;quot;Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.&amp;quot;);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that in this code snippet we are writing a test that launches puppeteer and then uses the Puppeteer api to navigate to Puppeteer github repository and web scrape the offical quote for Puppeteer.&lt;/p&gt;

&lt;p&gt;The Puppeteer api is very intuitive to use as the code is almost self documenting.&lt;/p&gt;

&lt;p&gt;Using async and await features makes writing this test very nice!!&lt;/p&gt;

&lt;h6 id=&#34;output-of-running-test&#34;&gt;Output of running test&lt;/h6&gt;

&lt;p&gt;In the scripts section of your package.json file and the following entry:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;test&amp;quot;: &amp;quot;jest&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all you have to do is run &lt;code&gt;npm test&lt;/code&gt; and the test will run and you will get output in your Terminal and or Command Shell in Windows.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/puppeteer-console-log.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;cypress-io&#34;&gt;Cypress.io&lt;/h2&gt;

&lt;p&gt;Next we will look at the &lt;a href=&#34;https://docs.cypress.io/guides/overview/why-cypress.html#&#34; target=&#34;_blank&#34;&gt;Cypress.io Testing Library&lt;/a&gt; which is a newer testing tool that has some exciting features.&lt;/p&gt;

&lt;p&gt;Cypress also uses node.js and can be installed with npm&lt;/p&gt;

&lt;h4 id=&#34;advantages-of-cypress-io&#34;&gt;Advantages of Cypress.io&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.cypress.io/guides/overview/key-differences.html#Architecture&#34; target=&#34;_blank&#34;&gt;Key Differences in Cypress.io&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Most testing tools (like Selenium) operate by running outside of the browser and executing remote commands across the network. Cypress is the exact opposite. Cypress is executed in the same run loop as your application.&lt;/p&gt;

&lt;p&gt;Behind Cypress is a Node.js server process. Cypress and the Node.js process constantly communicate, synchronize, and perform tasks on behalf of each other. Having access to both parts (front and back) gives us the ability to respond to your application’s events in real time, while at the same time work outside of the browser for tasks that require a higher privilege.&lt;/p&gt;

&lt;p&gt;Cypress also operates at the network layer by reading and altering web traffic on the fly. This enables Cypress to not only modify everything coming in and out of the browser, but also to change code that may interfere with its ability to automate the browser.&lt;/p&gt;

&lt;p&gt;Cypress ultimately controls the entire automation process from top to bottom, which puts it in the unique position of being able to understand everything happening in and outside of the browser. This means Cypress is capable of delivering more consistent results than any other testing tool.&lt;/p&gt;

&lt;p&gt;Because Cypress is installed locally on your machine, it can additionally tap into the operating system for automation tasks. This makes performing tasks such as taking screenshots, recording videos, general file system operations and network operations possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;setup-cypress-io&#34;&gt;Setup Cypress.io&lt;/h4&gt;

&lt;p&gt;Installing &lt;a href=&#34;https://docs.cypress.io/guides/getting-started/installing-cypress.html&#34; target=&#34;_blank&#34;&gt;Cypress.io&lt;/a&gt; is easy as all you have to do is run &lt;code&gt;npm install --save-dev cypress&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have installed Cypress.io all you have to do is require it and then start writing your tests.&lt;/p&gt;

&lt;h4 id=&#34;cypress-io-usage-requirements&#34;&gt;Cypress.io Usage Requirements&lt;/h4&gt;

&lt;p&gt;Cypress is a desktop application that is installed on your computer.&lt;/p&gt;

&lt;p&gt;The desktop application supports these operating systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mac OS 10.9+ (Mavericks+), only 64bit binaries are provided for macOS.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux Ubuntu 12.04+, Fedora 21, Debian 8&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Windows 7+, only 32bit binaries are provided for Windows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;cypress-io-example&#34;&gt;Cypress.io Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe(&#39;My First Test&#39;, function() {
  it(&#39;Does not do much!&#39;, function() {
    expect(true).to.equal(true)
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code snippet above has a mocha like syntax and running it is very easy&lt;/p&gt;

&lt;h6 id=&#34;running-cypress-tests&#34;&gt;Running Cypress Tests&lt;/h6&gt;

&lt;p&gt;Add the following entry into the scripts section of your package.json file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;cypress:open&amp;quot;: &amp;quot;cypress open&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all you have to do to run the test file is to execute the command like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run cypress:open&lt;/code&gt; and this will open desktop application and run any of your tests&lt;/p&gt;

&lt;h4 id=&#34;writing-a-test-that-will-web-scrape-my-github-repository&#34;&gt;Writing a Test that will Web Scrape my github repository&lt;/h4&gt;

&lt;p&gt;Let us now write a test in Cypress.io that will Web Scrape my github repository called browser automation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

const url = &amp;quot;https://github.com/jbelmont/browser-automation&amp;quot;

describe(&amp;quot;Web Scraping&amp;quot;, function() {
    it(&amp;quot;Visits the browser-automation repository&amp;quot;, function() {
        cy.visit(url);

        cy
        .get(&amp;quot;.markdown-body.entry-content h1&amp;quot;)
        .should(&amp;quot;contain&amp;quot;, &amp;quot;browser-automation&amp;quot;);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the conciseness in the syntax for Cypress you say you want to visit provided url and then use get to get the dom node and make your assertion.&lt;/p&gt;

&lt;p&gt;The DOM Manipulation code that you have to write is abstracted away for you with the nice Cypress.io api.&lt;/p&gt;

&lt;h6 id=&#34;output-of-running-desktop-application-for-cypress&#34;&gt;Output of Running Desktop Application for Cypress&lt;/h6&gt;

&lt;p&gt;In the screenshot below we have a running Desktop application for Cypress.io which opened after we gave command &lt;code&gt;npm run cypress:open&lt;/code&gt; in the terminal.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cypress-desktop-running.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in the screenshot we have blog_spec.js at the top.&lt;/p&gt;

&lt;p&gt;In order for your tests to run in Cypress.io you will need to add them into &lt;code&gt;cypress/integration&lt;/code&gt; folder which is automatically created with examples when you first open Cypress.&lt;/p&gt;

&lt;p&gt;While the desktop client is running it will watch for file changes and update in real time.&lt;/p&gt;

&lt;p&gt;If we click the the entry &lt;em&gt;blog_spec.js&lt;/em&gt; it will start running our tests in Cypress.io&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cypress-test-running.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that the Cypress Desktop Application has our test results and visually shows us the web page that we are visiting.&lt;/p&gt;

&lt;h4 id=&#34;thoughts-on-cypress-io-and-puppeteer&#34;&gt;Thoughts on Cypress.io and Puppeteer&lt;/h4&gt;

&lt;p&gt;I believe that both Cypress.io and Puppeteer are great options to using Selenium. I would say that Cypress.io has many compelling features and the Desktop Client is a joy to use.&lt;/p&gt;

&lt;p&gt;If you would like to look at the &lt;a href=&#34;https://github.com/jbelmont/browser-automation&#34; target=&#34;_blank&#34;&gt;browser-automation repository go here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Acceptance Testing</title>
      <link>https://www.marcelbelmont.com/post/acceptance-testing/</link>
      <pubDate>Sun, 20 May 2018 15:48:12 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/acceptance-testing/</guid>
      <description>

&lt;p&gt;In this blog post we will define acceptance testing, explain why acceptance testing is important, utilize a library to write acceptance tests in and go over a method called Given When Then in Acceptance Testing, and incorporate acceptance testing into a CI/CD pipeline,.&lt;/p&gt;

&lt;h2 id=&#34;define-acceptance-testing&#34;&gt;Define Acceptance Testing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.agilealliance.org/glossary/acceptance/&#34; target=&#34;_blank&#34;&gt;Acceptance Testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An acceptance test is a formal description of the behavior of a software product, generally expressed as an example or a usage scenario. A number of different notations and approaches have been proposed for such examples or scenarios. In many cases the aim is that it should be possible to automate the execution of such tests by a software tool, either ad-hoc to the development team or off the shelf.&lt;/p&gt;

&lt;p&gt;An Acceptance Test Suite helps to veriy that an application is delivering the business value that your customers expect. Additionally an acceptance test suite helps guard agains regressions or defect that break preexisting functionality in your application.&lt;/p&gt;

&lt;h2 id=&#34;why-is-acceptance-testing-important&#34;&gt;Why is Acceptance Testing Important&lt;/h2&gt;

&lt;p&gt;So besides functioning as a Regression Test Suite as we stated above, an acceptance test suit help to test the business facing side of your application. It is common to have both Unit and Integration Tests for your code but acceptance tests help to prove that your application does what the customer thinks it should do not what a developer intends it to do.&lt;/p&gt;

&lt;p&gt;Many companies already invest in a large battery of Manual Acceptance Testing. Some companies are already spending an exhorbitant amount of money on manual acceptance testing. It may be that for each release a contracting company is hired to conduct manual testing of the entire application.&lt;/p&gt;

&lt;p&gt;Automated Acceptance Testing helps to protect your application when large refactorings occur in a codebase. If developers are making large scale changes to an application, an automated acceptance test suite can help protect and catch regressions that can occur with such changes.&lt;/p&gt;

&lt;h2 id=&#34;acceptance-criteria&#34;&gt;Acceptance Criteria&lt;/h2&gt;

&lt;p&gt;Acceptance Criteria are conditions in which a software application needs to satisfy in order to be accepted by a customer. Acceptance Criteria is a set of statements which mentions the result that will either pass or fail for both functional and non-functional requirements for the software project at the current stage. These functional and non-functional requirements are the conditions which can be acceptance.&lt;/p&gt;

&lt;p&gt;Acceptance Criteria should always be written before development commences so that it can successfully capture the customer intent rather than iterate functionalities in relation to the development reality. Acceptance Criteria should be written clearly in a simple language that the customer and product owners can understand.&lt;/p&gt;

&lt;h2 id=&#34;given-when-then&#34;&gt;Given When Then&lt;/h2&gt;

&lt;p&gt;Given When Then is a style of writing tests and was invented by Dan North and is a part of &lt;a href=&#34;https://dannorth.net/introducing-bdd/&#34; target=&#34;_blank&#34;&gt;Behavior-Driven Development (BDD)&lt;/a&gt;. The idea is that you should break down a user story/test into 3 main sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;given&lt;/em&gt; part helps describes the state that you are specifying in the user scenario.

&lt;ul&gt;
&lt;li&gt;This can also be thought of as a type of precondition before the test starts.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;when&lt;/em&gt; section is the actual behavior that you are trying to specify.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;then&lt;/em&gt; section helps describe the changes you expect due to the specified behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;feature-specification-example&#34;&gt;Feature Specification Example&lt;/h4&gt;

&lt;p&gt;Let us discuss a possible user story that a product owner specified albeit a trivial example.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;simple_addition.feature&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: Simple Addition of Numbers
  In order to do simple math as a developer I want to add numbers
  
  Scenario: Easy Math Problem
    Given a list of numbers set to []
    When I add the numbers together by []
    Then I get a larger result that is the sum of the numbers
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;writing-tests-using-cucumber&#34;&gt;Writing tests using Cucumber&lt;/h2&gt;

&lt;p&gt;Earlier we mentioned that given when then syntax is a style of testing that is a part of BDD. &lt;a href=&#34;http://docs.cucumber.io/guides/overview/&#34; target=&#34;_blank&#34;&gt;Cucumber&lt;/a&gt; is a tool that supports Behavior-Driven Development. Cucumber supports a multitude of languages and we will be using &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34; target=&#34;_blank&#34;&gt;cucumber-js&lt;/a&gt; in the tutorial.&lt;/p&gt;

&lt;p&gt;You can install cucumber-js by running the following command: &lt;code&gt;npm install --save-dev cucumber&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Requirements is node 6 or higher.&lt;/p&gt;

&lt;h4 id=&#34;cucumber-js-example&#34;&gt;Cucumber-js example&lt;/h4&gt;

&lt;p&gt;Run the following command to create a suitable folder structure:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir -p features/support&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a feature specification file that uses the &lt;a href=&#34;http://docs.cucumber.io/gherkin/reference/&#34; target=&#34;_blank&#34;&gt;Gherkin Syntax&lt;/a&gt; by running &lt;code&gt;touch features/simple_addition.feature&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now copy and paste the sample specification we wrote called simple_addition.feature and paste it into the file we just created.&lt;/p&gt;

&lt;p&gt;Inside the root of the directory then run &lt;code&gt;./node_modules/.bin/cucumber-js&lt;/code&gt; and you will see the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Warnings:

1) Scenario: Easy Math Problem # features/simple_addition.feature:3
   ? Given a list of numbers set to []
       Undefined. Implement with the following snippet:
         Given(&#39;a list of numbers set to []&#39;, function () {
           // Write code here that turns the phrase above into concrete actions
           return &#39;pending&#39;;
         });

   ? When I add the numbers together by []
       Undefined. Implement with the following snippet:
         When(&#39;I add the numbers together by []&#39;, function () {
           // Write code here that turns the phrase above into concrete actions
           return &#39;pending&#39;;
         });

   ? Then I get a larger result that is the sum of the numbers
       Undefined. Implement with the following snippet:
         Then(&#39;I get a larger result that is the sum of the numbers&#39;, function () {
           // Write code here that turns the phrase above into concrete actions
           return &#39;pending&#39;;
         });


1 scenario (1 undefined)
3 steps (3 undefined)
0m00.000s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can copy and paste the snippet that cucumber gave us into a file called steps.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { Given, When, Then } = require(&#39;cucumber&#39;)
const { expect } = require(&#39;chai&#39;)

Given(&#39;a list of numbers set to []&#39;, function () {
  // Write code here that turns the phrase above into concrete actions
  return &#39;pending&#39;;
});

When(&#39;I add the numbers together by []&#39;, function () {
  // Write code here that turns the phrase above into concrete actions
  return &#39;pending&#39;;
});

Then(&#39;I get a larger result that is the sum of the numbers&#39;, function () {
  // Write code here that turns the phrase above into concrete actions
  return &#39;pending&#39;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the command: &lt;code&gt;touch features/support/steps.js&lt;/code&gt; and paste these contents.&lt;/p&gt;

&lt;p&gt;This will not pass yet as we need to implement our functionality.&lt;/p&gt;

&lt;p&gt;Let us create a file called &lt;code&gt;addition.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;addition.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { setWorldConstructor } = require(&#39;cucumber&#39;)

class Addition {
  constructor() {
    this.summation = 0
  }

  setTo(numbers) {
    this.numbers = numbers
  }

  addBy() {
    this.summation = this.numbers.reduce((prev, curr) =&amp;gt; prev + curr, 0);
  }
}

setWorldConstructor(Addition)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let us rewrite a steps.js to this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;steps.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { Given, When, Then } = require(&#39;cucumber&#39;)
const { expect } = require(&#39;chai&#39;)

Given(&#39;a list of numbers set to []&#39;, function () {
    this.setTo([1, 2, 3, 4, 5])
});

When(&#39;I add the numbers together by []&#39;, function () {
    this.addBy();
});

Then(&#39;I get a larger result that is the sum of the numbers&#39;, function () {
    expect(this.summation).to.eql(15)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run our tests we see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run acceptance:tests

&amp;gt; cucumber-examples@1.0.0 acceptance:tests /Users/jean-marcelbelmont/dev/cucumber-examples
&amp;gt; cucumber-js

...

1 scenario (1 passed)
3 steps (3 passed)
0m00.001s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the npm script &lt;code&gt;acceptance:tests&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;cucumber-examples&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;A repo exploring Behavior Driven Development with Cucumber&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;acceptance:tests&amp;quot;: &amp;quot;cucumber-js&amp;quot;
  },
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;git+https://github.com/jbelmont/cucumber-examples.git&amp;quot;
  },
  &amp;quot;keywords&amp;quot;: [],
  &amp;quot;author&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;bugs&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;https://github.com/jbelmont/cucumber-examples/issues&amp;quot;
  },
  &amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/jbelmont/cucumber-examples#readme&amp;quot;,
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;chai&amp;quot;: &amp;quot;^4.1.2&amp;quot;,
    &amp;quot;cucumber&amp;quot;: &amp;quot;^4.2.1&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the scripts block is where the script is run.&lt;/p&gt;

&lt;h2 id=&#34;incorporate-tests-into-a-ci-cd-pipeline&#34;&gt;Incorporate Tests into a CI/CD Pipeline&lt;/h2&gt;

&lt;p&gt;In order to incorporate cucumber into a CI/CD pipeline you will need to choose a CI/CD tool. For the purposes of this blog post we will use Travis CI.&lt;/p&gt;

&lt;p&gt;Travis CI uses a yaml script file and is really easy to incorporate to a Github Project. First create a file called &lt;code&gt;.travis.yml&lt;/code&gt; and then make sure that sign up for &lt;code&gt;https://travis-ci.org&lt;/code&gt; account. You will then need to sync your current Github repos and then toggle on the repo of your choose. Next push up changes to source control and go to the CI build which in my case happens to be &lt;code&gt;https://travis-ci.org/jbelmont/cucumber-examples&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code&gt;.travis.yml&lt;/code&gt; script that the blog post uses:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dist: trusty
sudo: required
language: node_js
node_js:
  - 10
script:
  - npm run acceptance:tests
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the script part is &lt;code&gt;npm run acceptance:tests&lt;/code&gt; it is defined in the package.json file at the root of the directory.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;This example while trivial is a good illustration on why using a tool like cucumber is really useful to test your Acceptance Requirements in a programmatic way.&lt;/p&gt;

&lt;p&gt;If you would like to look at the &lt;a href=&#34;https://github.com/jbelmont/cucumber-examples&#34; target=&#34;_blank&#34;&gt;Cucumber Examples Repo Go Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks with Golang</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-golang/</link>
      <pubDate>Sat, 28 Apr 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-golang/</guid>
      <description>

&lt;h1 id=&#34;in-this-blog-post-i-go-over-tips-and-tricks-with-golang&#34;&gt;In this Blog Post I go over Tips and Tricks with Golang&lt;/h1&gt;

&lt;p&gt;Make sure to have &lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34;&gt;Golang Installed&lt;/a&gt; and you have the &lt;code&gt;GOPATH&lt;/code&gt; variable set.&lt;/p&gt;

&lt;p&gt;Set your &lt;code&gt;GOPATH&lt;/code&gt; variable in Mac OS X by setting it in &lt;code&gt;~/.bashrc, ~/.zshrc&lt;/code&gt; etc&lt;/p&gt;

&lt;p&gt;Add the following entry to your &lt;code&gt;.zshrc&lt;/code&gt;: &lt;code&gt;export GOPATH=$HOME/go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;source ~/.zshrc&lt;/code&gt; to get the environment variable set in your current shell process.&lt;/p&gt;

&lt;p&gt;Once golang is installed run the following command to see what is set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go env
GOARCH=&amp;quot;amd64&amp;quot;
GOBIN=&amp;quot;&amp;quot;
GOCACHE=&amp;quot;/Users/jean-marcelbelmont/Library/Caches/go-build&amp;quot;
GOEXE=&amp;quot;&amp;quot;
GOHOSTARCH=&amp;quot;amd64&amp;quot;
GOHOSTOS=&amp;quot;darwin&amp;quot;
GOOS=&amp;quot;darwin&amp;quot;
GOPATH=&amp;quot;/Users/jean-marcelbelmont/go&amp;quot;
GORACE=&amp;quot;&amp;quot;
GOROOT=&amp;quot;/usr/local/Cellar/go/1.10/libexec&amp;quot;
GOTMPDIR=&amp;quot;&amp;quot;
GOTOOLDIR=&amp;quot;/usr/local/Cellar/go/1.10/libexec/pkg/tool/darwin_amd64&amp;quot;
GCCGO=&amp;quot;gccgo&amp;quot;
CC=&amp;quot;clang&amp;quot;
CXX=&amp;quot;clang++&amp;quot;
CGO_ENABLED=&amp;quot;1&amp;quot;
CGO_CFLAGS=&amp;quot;-g -O2&amp;quot;
CGO_CPPFLAGS=&amp;quot;&amp;quot;
CGO_CXXFLAGS=&amp;quot;-g -O2&amp;quot;
CGO_FFLAGS=&amp;quot;-g -O2&amp;quot;
CGO_LDFLAGS=&amp;quot;-g -O2&amp;quot;
PKG_CONFIG=&amp;quot;pkg-config&amp;quot;
GOGCCFLAGS=&amp;quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/g6/jldtb40j5vvfxtjmg0f5nt4h0000gp/T/go-build176900775=/tmp/go-build -gno-record-gcc-switches -fno-common&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice I have set my &lt;code&gt;GOPATH&lt;/code&gt; but there is some other defaults that are set.&lt;/p&gt;

&lt;h2 id=&#34;using-go-docs&#34;&gt;Using Go Docs&lt;/h2&gt;

&lt;p&gt;You can easily go into docs for any GO package by doing the following:&lt;/p&gt;

&lt;p&gt;One trick that I do is that I copy the import statement in my editor like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/goimport.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Once you have that copied you just do the following:&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;godoc.org/&lt;/code&gt; into a browser window and paste the package into the URL:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/gourl.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now this takes straight you straight to the documentation for this package.&lt;/p&gt;

&lt;p&gt;Now for a protip type &lt;code&gt;?&lt;/code&gt; in the documentation page and get a help context menu like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/gohelpmenu.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Assuming that you know what functions/methods you can easily jump to them by pressing &lt;code&gt;f&lt;/code&gt; in your keyboard:&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;f&lt;/code&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/gofindmenu.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In this example just type &lt;code&gt;WithStack&lt;/code&gt; and you can jump straight to the &lt;code&gt;WithStack&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;You can also go into your terminal and see the documentation by doing the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go doc fmt.Printf&lt;/code&gt; ==&amp;gt; This command gives you the docs for &lt;code&gt;fmt.Printf&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;sharing-go-code&#34;&gt;Sharing Go Code&lt;/h2&gt;

&lt;p&gt;You can easily share your go code with others by going to either the &lt;a href=&#34;https://play.golang.org/&#34; target=&#34;_blank&#34;&gt;Go Playground&lt;/a&gt; or &lt;a href=&#34;https://goplay.space/&#34; target=&#34;_blank&#34;&gt;Go Play&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-own-custom-assert-test-function&#34;&gt;Create your own custom assert test function&lt;/h2&gt;

&lt;p&gt;Here is a sample test file from my &lt;a href=&#34;https://github.com/jbelmont/api-workshop/blob/master/internal/hero/hero_test.go&#34; target=&#34;_blank&#34;&gt;api-workshop&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...
// TestCreateInsertsProperly validates users can be created in the database.
func TestCreateInsertHero(t *testing.T) {
	// Insert User
	heroInfo := heroInfo()
	// Translate CreateProduct to Product in order to assert result.
	cuBytes, _ := json.Marshal(heroInfo.hero)
	var exH hero.Hero
	json.Unmarshal(cuBytes, &amp;amp;exH)
	h, err := hero.Create(ctx, masterDB, &amp;amp;heroInfo.hero)
	if err != nil {
		t.Fatalf(&amp;quot;Should be able to create a hero : %s.&amp;quot;, err)
	}
	if !h.ID.Valid() {
		t.Errorf(&amp;quot;Should generate valid Hero ID, got: %s&amp;quot;, h.ID)
	}
	assertEqualUsers(&amp;amp;exH, h, t)

	// Test the user context value
	ctxValues := ctx.Value(apiContext.KeyValues).(*apiContext.Values)
	HeroID := bson.ObjectIdHex(ctxValues.ID).Hex()
	if *h.CreatedByID != HeroID {
		t.Errorf(&amp;quot;Should create a user by userID: %s, got: %s&amp;quot;, HeroID, *h.CreatedByID)
	}
}

func assertEqualUsers(actual *hero.Hero, expected *hero.Hero, t *testing.T) {
	if actual.Name != expected.Name {
		t.Errorf(&amp;quot;Should create hero Name: %s, but got: %s&amp;quot;, expected.Name, actual.Name)
	}
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you familiar with XUnit style assertions you can just write your own using a function in Golang.&lt;/p&gt;

&lt;h2 id=&#34;go-tooling&#34;&gt;Go Tooling&lt;/h2&gt;

&lt;p&gt;You can easily discover the go tooling by typing &lt;code&gt;go help&lt;/code&gt; in your terminal&lt;/p&gt;

&lt;p&gt;If you like this Blog Post please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont at Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A quick look at the Elastic Stack</title>
      <link>https://www.marcelbelmont.com/post/elk-stack-getting-started/</link>
      <pubDate>Sun, 18 Mar 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/elk-stack-getting-started/</guid>
      <description>

&lt;h1 id=&#34;elastic-search-logstash-and-kibana&#34;&gt;Elastic Search, Logstash and Kibana&lt;/h1&gt;

&lt;p&gt;This quick post will get you up and running with the elk stack.&lt;/p&gt;

&lt;p&gt;Please clone my github repository where the scripts I created live and so that you can follow along with the post.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://github.com/jbelmont/elkstack-practice&#34; target=&#34;_blank&#34;&gt;Elkstack Practice&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to generate movies.json then do the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go run main.go &amp;gt; movies.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to generate tags.json then do the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd tags; go run main.go &amp;gt; tag.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install elasticsearch via homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install kibana via homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install logstash via homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install logstash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure that all the services are up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start kibana
brew services start elasticsearch
brew services start logstash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see all the services up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure that the elastic stack is up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X GET 127.0.0.1:9200
{
  &amp;quot;name&amp;quot; : &amp;quot;M43AiJz&amp;quot;,
  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch_jean-marcelbelmont&amp;quot;,
  &amp;quot;cluster_uuid&amp;quot; : &amp;quot;8dHbumffQ3iAOUU32Sx1Jw&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;6.2.2&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;10b1edd&amp;quot;,
    &amp;quot;build_date&amp;quot; : &amp;quot;2018-02-16T19:01:30.685723Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;7.2.1&amp;quot;,
    &amp;quot;minimum_wire_compatibility_version&amp;quot; : &amp;quot;5.6.0&amp;quot;,
    &amp;quot;minimum_index_compatibility_version&amp;quot; : &amp;quot;5.0.0&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see all the indices available with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X GET 127.0.0.1:9200/_cat/indices?v
health status index                           uuid                   pri rep docs.count docs.deleted store.size pri.store.size
yellow open   logstash-2017.05.04             hfY9yL1vTt-IQGE8G591VQ   5   1      16762            0      7.1mb          7.1mb
green  open   .monitoring-es-6-2018.03.18     FWPFXqVBTWmt84HfT4-_Pw   1   0       9903            0      5.7mb          5.7mb
yellow open   logstash-2017.05.02             T6DtDxYJQEm_rwaXg_YLfA   5   1      16278            0        7mb            7mb
green  open   .monitoring-kibana-6-2018.03.18 -tr0EU_0T16tskWdvbGBmg   1   0        314            0    197.5kb        197.5kb
green  open   .triggered_watches              zcs8Nqi2SQ6sUVI2TsBTUg   1   0          0            0     16.2kb         16.2kb
yellow open   app                             oRwQ4n5aSOqFZ_sWPg_iuA   5   1          1            0      5.4kb          5.4kb
yellow open   tags                            CY18aLQuQt-VsLZDce2kZw   5   1       1296            0    342.4kb        342.4kb
yellow open   movies                          141JB-VbTxylwb6IFP6JKA   5   1       9125            0      1.3mb          1.3mb
yellow open   logstash-2017.04.30             TH83PAHZTL6utR_wgxXU9A   5   1      14166            0      6.3mb          6.3mb
yellow open   ratings                         4QXKvkNsTmGVayapswxwcA   5   1     100004            0     13.4mb         13.4mb
green  open   .watches                        XMyhvohjTiSj1sG-ek97nw   1   0          6            0     33.3kb         33.3kb
yellow open   logstash-2017.05.01             8Cs8mEyXSuW_jTQXdUXubg   5   1      15948            0      6.9mb          6.9mb
yellow open   logs                            lXA5H-V_QSOrySGg6r6R1Q   5   1          1            0      5.8kb          5.8kb
yellow open   logstash-2017.05.05             e1hwj1ddQDK69ZmKaRFi5A   5   1      18646            0      7.7mb          7.7mb
yellow open   testindex                       RaI2XDStSBqDEz-jgl-5RQ   3   1          0            0       783b           783b
green  open   .watcher-history-7-2018.03.18   mfe3zaV3Qvib5XLPBA1W0A   1   0        502            0    730.4kb        730.4kb
green  open   .monitoring-alerts-6            IdSXd-D9RNqlGYXcWThGiA   1   0          1            0      6.1kb          6.1kb
yellow open   shakespeare                     EjHjJW8WTpCe4ZyeOhAJXA   5   1     111396            0     21.6mb         21.6mb
green  open   .kibana                         aZ2Fhv-PSsOf5BUTlDdhkw   1   0        143            1    142.5kb        142.5kb
yellow open   logstash-2017.05.03             nklpkzxxSRCWOL990fD2Qg   5   1      21172            0      9.3mb          9.3mb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can tell there is a list of indices here&lt;/p&gt;

&lt;p&gt;We will add some movies via the go script I created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X PUT -H &amp;quot;Content-Type: application/json&amp;quot; 127.0.0.1:9200/_bulk?pretty --data-binary @movies.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This imports movies json file into elastic&lt;/p&gt;

&lt;p&gt;Here we will create a new movie entry to movie index:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; 127.0.0.1:9200/movies/movie/180895/_update -d &#39;
{
  &amp;quot;doc&amp;quot; : {
    &amp;quot;title&amp;quot;: &amp;quot;BoneHead Man&amp;quot;
  }
}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example of using filters in elastic search:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X GET -H &#39;Content-Type: application/json&#39; &#39;127.0.0.1:9200/logstash-2017.05.04/_search?size=0&amp;amp;pretty&#39; -d &#39;
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;match&amp;quot;: {
    &amp;quot;agent&amp;quot;: &amp;quot;Googlebot&amp;quot;
   }
},
  &amp;quot;aggs&amp;quot;: {
    &amp;quot;timestamp&amp;quot;: {
      &amp;quot;date_histogram&amp;quot;: {
        &amp;quot;field&amp;quot;: &amp;quot;@timestamp&amp;quot;, &amp;quot;interval&amp;quot;: &amp;quot;minute&amp;quot;
      }
    }
  }
}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query will query and match via a user agent of &lt;code&gt;Googlebot&lt;/code&gt; and will do an aggregation based on timestamp and use an interval of a minute&lt;/p&gt;

&lt;p&gt;Instead of using &lt;code&gt;curl&lt;/code&gt; you can use the Kibana Dashboard to help you do both queries and create indices and list indices and much more&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/kibana-dev-tools.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that I clicked on the &lt;code&gt;Dev Tools&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;You get autocomplete functionality in the Dev tools and many other features.&lt;/p&gt;

&lt;p&gt;You can add more functionality to elastic search by installing the x-pack and you can do the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elasticsearch-plugin install x-pack&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here are some more recommended plugins to install:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elasticsearch-plugin install ingest-user-agent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elasticsearch-plugin install ingest-geoip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is a copy of my &lt;code&gt;elasticsearch.yml&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# ======================== Elasticsearch Configuration =========================
#
# NOTE: Elasticsearch comes with reasonable defaults for most settings.
#       Before you set out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please consult the documentation for further information on configuration options:
# https://www.elastic.co/guide/en/elasticsearch/reference/index.html
#
# ---------------------------------- Cluster -----------------------------------
#
# Use a descriptive name for your cluster:
#
cluster.name: elasticsearch_jean-marcelbelmont
#
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
node.name: node-1
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# ----------------------------------- Paths ------------------------------------
#
# Path to directory where to store the data (separate multiple locations by comma):
#
path.data: /usr/local/var/lib/elasticsearch/
#
# Path to log files:
#
path.logs: /usr/local/var/log/elasticsearch/
#
# ----------------------------------- Memory -----------------------------------
#
# Lock the memory on startup:
#
#bootstrap.memory_lock: true
#
# Make sure that the heap size is set to about half the memory available
# on the system and that the owner of the process is allowed to use this
# limit.
#
# Elasticsearch performs poorly when the system is swapping the memory.
#
# ---------------------------------- Network -----------------------------------
#
# Set the bind address to a specific IP (IPv4 or IPv6):
#
#network.host: 192.168.0.1
#
# Set a custom port for HTTP:
#
#http.port: 9200
#
# For more information, consult the network module documentation.
#
# --------------------------------- Discovery ----------------------------------
#
# Pass an initial list of hosts to perform discovery when new node is started:
# The default list of hosts is [&amp;quot;127.0.0.1&amp;quot;, &amp;quot;[::1]&amp;quot;]
#
#discovery.zen.ping.unicast.hosts: [&amp;quot;host1&amp;quot;, &amp;quot;host2&amp;quot;]
#
# Prevent the &amp;quot;split brain&amp;quot; by configuring the majority of nodes (total number of master-eligible nodes / 2 + 1):
#
#discovery.zen.minimum_master_nodes: 
#
# For more information, consult the zen discovery module documentation.
#
# ---------------------------------- Gateway -----------------------------------
#
# Block initial recovery after a full cluster restart until N nodes are started:
#
#gateway.recover_after_nodes: 3
#
# For more information, consult the gateway module documentation.
#
# ---------------------------------- Various -----------------------------------
#
# Require explicit names when deleting indices:
#
#action.destructive_requires_name: true

xpack.security.enabled: false

node.max_local_storage_nodes: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should also consider adding filebeat to the elastic search and you can add it with the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install filebeat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is my configuration file for &lt;code&gt;filebeat.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;###################### Filebeat Configuration Example #########################

# This file is an example configuration file highlighting only the most common
# options. The filebeat.reference.yml file from the same directory contains all the
# supported options with more comments. You can use it as a reference.
#
# You can find the full configuration reference here:
# https://www.elastic.co/guide/en/beats/filebeat/index.html

# For more available modules and options, please see the filebeat.reference.yml sample
# configuration file.

#=========================== Filebeat prospectors =============================

filebeat.prospectors:

# Each - is a prospector. Most options can be set at the prospector level, so
# you can use different prospectors for various configurations.
# Below are the prospector specific configurations.

- type: log

  # Change to true to enable this prospector configuration.
  enabled: false

  # Paths that should be crawled and fetched. Glob based paths.
  paths:
    - /var/log/*.log
    #- c:\programdata\elasticsearch\logs\*

  # Exclude lines. A list of regular expressions to match. It drops the lines that are
  # matching any regular expression from the list.
  #exclude_lines: [&#39;^DBG&#39;]

  # Include lines. A list of regular expressions to match. It exports the lines that are
  # matching any regular expression from the list.
  #include_lines: [&#39;^ERR&#39;, &#39;^WARN&#39;]

  # Exclude files. A list of regular expressions to match. Filebeat drops the files that
  # are matching any regular expression from the list. By default, no files are dropped.
  #exclude_files: [&#39;.gz$&#39;]

  # Optional additional fields. These fields can be freely picked
  # to add additional information to the crawled log files for filtering
  #fields:
  #  level: debug
  #  review: 1

  ### Multiline options

  # Mutiline can be used for log messages spanning multiple lines. This is common
  # for Java Stack Traces or C-Line Continuation

  # The regexp Pattern that has to be matched. The example pattern matches all lines starting with [
  #multiline.pattern: ^\[

  # Defines if the pattern set under pattern should be negated or not. Default is false.
  #multiline.negate: false

  # Match can be set to &amp;quot;after&amp;quot; or &amp;quot;before&amp;quot;. It is used to define if lines should be append to a pattern
  # that was (not) matched before or after or as long as a pattern is not matched based on negate.
  # Note: After is the equivalent to previous and before is the equivalent to to next in Logstash
  #multiline.match: after


#============================= Filebeat modules ===============================

filebeat.config.modules:
  # Glob pattern for configuration loading
  path: ${path.config}/modules.d/*.yml

  # Set to true to enable config reloading
  reload.enabled: false

  # Period on which files under path should be checked for changes
  #reload.period: 10s

#==================== Elasticsearch template setting ==========================

setup.template.settings:
  index.number_of_shards: 3
  #index.codec: best_compression
  #_source.enabled: false

#================================ General =====================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
#name:

# The tags of the shipper are included in their own field with each
# transaction published.
#tags: [&amp;quot;service-X&amp;quot;, &amp;quot;web-tier&amp;quot;]

# Optional fields that you can specify to add additional information to the
# output.
#fields:
#  env: staging


#============================== Dashboards =====================================
# These settings control loading the sample dashboards to the Kibana index. Loading
# the dashboards is disabled by default and can be enabled either by setting the
# options here, or by using the `-setup` CLI flag or the `setup` command.
#setup.dashboards.enabled: false

# The URL from where to download the dashboards archive. By default this URL
# has a value which is computed based on the Beat name and version. For released
# versions, this URL points to the dashboard archive on the artifacts.elastic.co
# website.
#setup.dashboards.url:

#============================== Kibana =====================================

# Starting with Beats version 6.0.0, the dashboards are loaded via the Kibana API.
# This requires a Kibana endpoint configuration.
setup.kibana:

  # Kibana Host
  # Scheme and port can be left out and will be set to the default (http and 5601)
  # In case you specify and additional path, the scheme is required: http://localhost:5601/path
  # IPv6 addresses should always be defined as: https://[2001:db8::1]:5601
  host: &amp;quot;localhost:5601&amp;quot;

#============================= Elastic Cloud ==================================

# These settings simplify using filebeat with the Elastic Cloud (https://cloud.elastic.co/).

# The cloud.id setting overwrites the `output.elasticsearch.hosts` and
# `setup.kibana.host` options.
# You can find the `cloud.id` in the Elastic Cloud web UI.
#cloud.id:

# The cloud.auth setting overwrites the `output.elasticsearch.username` and
# `output.elasticsearch.password` settings. The format is `&amp;lt;user&amp;gt;:&amp;lt;pass&amp;gt;`.
#cloud.auth:

#================================ Outputs =====================================

# Configure what output to use when sending the data collected by the beat.

#-------------------------- Elasticsearch output ------------------------------
output.elasticsearch:
  # Array of hosts to connect to.
  hosts: [&amp;quot;localhost:9200&amp;quot;]

  # Optional protocol and basic auth credentials.
  #protocol: &amp;quot;https&amp;quot;
  #username: &amp;quot;elastic&amp;quot;
  #password: &amp;quot;changeme&amp;quot;

#----------------------------- Logstash output --------------------------------
#output.logstash:
  # The Logstash hosts
  #hosts: [&amp;quot;localhost:5044&amp;quot;]

  # Optional SSL. By default is off.
  # List of root certificates for HTTPS server verifications
  #ssl.certificate_authorities: [&amp;quot;/etc/pki/root/ca.pem&amp;quot;]

  # Certificate for SSL client authentication
  #ssl.certificate: &amp;quot;/etc/pki/client/cert.pem&amp;quot;

  # Client Certificate Key
  #ssl.key: &amp;quot;/etc/pki/client/cert.key&amp;quot;

#================================ Logging =====================================

# Sets log level. The default log level is info.
# Available log levels are: error, warning, info, debug
#logging.level: debug

# At debug level, you can selectively enable logging only for some components.
# To enable all selectors use [&amp;quot;*&amp;quot;]. Examples of other selectors are &amp;quot;beat&amp;quot;,
# &amp;quot;publish&amp;quot;, &amp;quot;service&amp;quot;.
#logging.selectors: [&amp;quot;*&amp;quot;]

#============================== Xpack Monitoring ===============================
# filebeat can export internal metrics to a central Elasticsearch monitoring
# cluster.  This requires xpack monitoring to be enabled in Elasticsearch.  The
# reporting is disabled by default.

# Set to true to enable the monitoring reporter.
#xpack.monitoring.enabled: false

# Uncomment to send the metrics to Elasticsearch. Most settings from the
# Elasticsearch output are accepted here as well. Any setting that is not set is
# automatically inherited from the Elasticsearch output configuration, so if you
# have the Elasticsearch output configured, you can simply uncomment the
# following line.
#xpack.monitoring.elasticsearch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will also need to configure &lt;code&gt;logstash.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here is my configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;input {
	file {
		path =&amp;gt; &amp;quot;/Users/jean-marcelbelmont/elk/access_log&amp;quot;
		start_position =&amp;gt; &amp;quot;beginning&amp;quot;
		ignore_older =&amp;gt; 0
	}
}

filter {
	grok {
		match =&amp;gt; { &amp;quot;message&amp;quot; =&amp;gt; &amp;quot;%{COMBINEDAPACHELOG}&amp;quot; }
	}
	date {
		match =&amp;gt; [ &amp;quot;timestamp&amp;quot;, &amp;quot;dd/MMM/yyyy:HH:mm:ss Z&amp;quot; ]
	}
}

output {
	elasticsearch {
		hosts =&amp;gt; [ &amp;quot;localhost:9200&amp;quot; ]
	}
	stdout {
		codec =&amp;gt; rubydebug
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I spin up logstash with my configuration file: &lt;code&gt;sudo logstash -f /etc/logstash/conf.d/logstash.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I would highly suggest you check out &lt;a href=&#34;https://www.udemy.com/elasticsearch-6-and-elastic-stack-in-depth-and-hands-on&#34; target=&#34;_blank&#34;&gt;Frank Kanes Udemy Course on the Elastic Stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
