<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Musings on Software Musings</title>
    <link>https://www.marcelbelmont.com/</link>
    <description>Recent content in Software Musings on Software Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jean-Marcel Belmont</copyright>
    <lastBuildDate>Mon, 13 Jul 2020 10:49:02 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Intro to Haskell</title>
      <link>https://www.marcelbelmont.com/post/intro-to-haskell/</link>
      <pubDate>Mon, 13 Jul 2020 10:49:02 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/intro-to-haskell/</guid>
      <description>

&lt;h1 id=&#34;haskell-programming-language&#34;&gt;Haskell Programming Language&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Haskell_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;Haskell Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Haskell is a general-purpose, statically typed, purely functional programming language with type inference and lazy evaluation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Haskell is a powerful programming language although many developers avoid it since it isn&amp;rsquo;t like other mainstream languages.&lt;/p&gt;

&lt;p&gt;Most universities teach procedural like languages such as Java and C++ and so most developers start learning programming from this perspective.&lt;/p&gt;

&lt;p&gt;Since Haskell is a purely functional programming languages you don&amp;rsquo;t rely on mutation and side effects.&lt;/p&gt;

&lt;p&gt;Also due to the fact that it is a statically typed language and affords stronger compile time guarantees.&lt;/p&gt;

&lt;h2 id=&#34;stack&#34;&gt;Stack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/GUIDE/&#34; target=&#34;_blank&#34;&gt;Stack&lt;/a&gt; is a build tool built for Haskell code.&lt;/p&gt;

&lt;p&gt;We will use stack in order to create a Haskell project that we can both build and test.&lt;/p&gt;

&lt;p&gt;We will also use the GHCI Repl with stack in order to do some introspection.&lt;/p&gt;

&lt;h4 id=&#34;scafolding-new-haskell-project&#34;&gt;Scafolding new Haskell Project&lt;/h4&gt;

&lt;p&gt;We can use stack to generate a new haskell project.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/stack-templates-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we can use the &lt;code&gt;stack templates&lt;/code&gt; to find available templates.&lt;/p&gt;

&lt;p&gt;In this case we just want to use the default template so we will just not provide a template name.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;stack new helloworld&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The command above will generate a new haskell project with the following files:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ls helloworld
ChangeLog.md     README.md        app              package.yaml     stack.yaml
LICENSE          Setup.hs         helloworld.cabal src              test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;building-haskell-project&#34;&gt;Building Haskell Project&lt;/h4&gt;

&lt;p&gt;Know that we have created our Haskell project let us build it.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/stack-build-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that the &lt;code&gt;stack build&lt;/code&gt; command must be run from the project folder that got generated called helloworld.&lt;/p&gt;

&lt;h4 id=&#34;running-the-newly-built-haskell-project&#34;&gt;Running the newly built Haskell project&lt;/h4&gt;

&lt;p&gt;You can run the Haskell project in 2 ways:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/stack-exec-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Here we used the &lt;code&gt;stack exec &amp;lt;name_of_binary&amp;gt;&lt;/code&gt; and we also run the binary executable from the root of our project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.stack-work/dist/x86_64-osx/Cabal-3.0.1.0/build/helloworld-exe/helloworld-exe
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;updating-our-haskell-source-code&#34;&gt;Updating our Haskell Source Code&lt;/h4&gt;

&lt;p&gt;Let us actually make a change to the string printed out and rebuild our project.&lt;/p&gt;

&lt;p&gt;We will go inside of of &lt;code&gt;src/Lib.hs&lt;/code&gt; and edit the &lt;code&gt;putStrLn&lt;/code&gt; action with a new string.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Lib
    ( &lt;span style=&#34;color:#a6e22e&#34;&gt;someFunc&lt;/span&gt;
    ) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;someFunc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;someFunc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; putStrLn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello New Haskellers!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we updated to the string to &amp;lsquo;Hello New Haskellers!&amp;rsquo;&lt;/p&gt;

&lt;h4 id=&#34;let-us-rebuild-the-haskell-project-and-see-our-new-i-o-action&#34;&gt;Let us rebuild the Haskell project and see our new I/O  Action&lt;/h4&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/stack-build-and-exec.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that our change was picked up after reran &lt;code&gt;stack build&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;testing-our-haskell-code&#34;&gt;Testing our Haskell Code&lt;/h4&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/stack-test-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in this command execution that &lt;code&gt;stack&lt;/code&gt; run our defined tests.&lt;/p&gt;

&lt;p&gt;Here is the test code that &lt;code&gt;stack&lt;/code&gt; stubbed out for us:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; putStrLn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test suite not yet implemented&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case our test simply does an I/O Action that prints out:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Test suite not yet implemented&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we are ready to actually write our application these stack commands will help us greatly!&lt;/p&gt;

&lt;h4 id=&#34;invoking-ghci-with-stack&#34;&gt;Invoking GHCI with Stack&lt;/h4&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/stack-ghci-sample.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that here we can call the Main routine by simply executing &lt;code&gt;main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can also call Prelude Actions such as &lt;em&gt;putStrLn&lt;/em&gt; directly inside of the GHCI Repl.&lt;/p&gt;

&lt;h2 id=&#34;how-to-find-me&#34;&gt;How to find me&lt;/h2&gt;

&lt;p&gt;If you like this blog post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transcending from mere mortals to MongoDB Titans</title>
      <link>https://www.marcelbelmont.com/talk/mongodb-live-conf/</link>
      <pubDate>Tue, 09 Jun 2020 16:51:40 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/talk/mongodb-live-conf/</guid>
      <description>&lt;p&gt;Operating MongoDB effectively as a SaaS without a DBA takes discipline. Its schema-less design makes it perfect for fast-paced development teams; but that lower adoption cost can lull teams into believing that once they set-it; they can forget-it.&lt;/p&gt;

&lt;p&gt;In our talk, we&amp;rsquo;ll discuss some of the pitfalls that we experienced and how we, together with our MongoDB partners, were able to create a plan for remediation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to sqlite and SQL</title>
      <link>https://www.marcelbelmont.com/post/sqlite/</link>
      <pubDate>Mon, 13 Apr 2020 16:08:28 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/sqlite/</guid>
      <description>

&lt;h1 id=&#34;sqlite&#34;&gt;SQLite&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;SQLite is a C-language library that implements a small, fast, self-contained, high-reliability, full-featured, SQL database engine. SQLite is the most used database engine in the world. SQLite is built into all mobile phones and most computers and comes bundled inside countless other applications that people use every day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are over 1 trillion sqlite databases in use in the world today and it is the most deployed SQL Database in the world&lt;/p&gt;

&lt;h2 id=&#34;additional-information-on-sqlite&#34;&gt;Additional Information on SQLite&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.sqlite.org/about.html&#34; target=&#34;_blank&#34;&gt;About SQLite&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SQLite is an in-process library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine. The code for SQLite is in the public domain and is thus free for use for any purpose, commercial or private. SQLite is the most widely deployed database in the world with more applications than we can count, including several high-profile projects.&lt;/p&gt;

&lt;p&gt;SQLite is an embedded SQL database engine. Unlike most other SQL databases, SQLite does not have a separate server process. SQLite reads and writes directly to ordinary disk files. A complete SQL database with multiple tables, indices, triggers, and views, is contained in a single disk file. The database file format is cross-platform - you can freely copy a database between 32-bit and 64-bit systems or between big-endian and little-endian architectures. These features make SQLite a popular choice as an Application File Format. SQLite database files are a recommended storage format by the US Library of Congress. Think of SQLite not as a replacement for Oracle but as a replacement for fopen()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;sqlite-uses&#34;&gt;SQLite Uses&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Embedded devices and the internet of things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Client/server database engines are designed to live inside a lovingly-attended datacenter at the core of the network. SQLite works there too, but SQLite also thrives at the edge of the network, fending for itself while providing fast and reliable data services to applications that would otherwise have dodgy connectivity.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Application file format&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Websites&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data analysis&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cache for enterprise data&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Server-side database&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please read about more uses on the &lt;a href=&#34;https://www.sqlite.org/whentouse.html&#34; target=&#34;_blank&#34;&gt;When To Use Document&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;sqlite-command-line-shell&#34;&gt;SQLite Command Line Shell&lt;/h2&gt;

&lt;p&gt;If you have Mac OS X then sqlite is already installed in your system.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/sqlite3-shell.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;sqlite-help&#34;&gt;SQLite Help&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite&amp;gt; .help
.archive ...             Manage SQL archives
.auth ON|OFF             Show authorizer callbacks
.backup ?DB? FILE        Backup DB (default &amp;quot;main&amp;quot;) to FILE
.bail on|off             Stop after hitting an error.  Default OFF
.binary on|off           Turn binary output on or off.  Default OFF
.cd DIRECTORY            Change the working directory to DIRECTORY
.changes on|off          Show number of rows changed by SQL
.check GLOB              Fail if output since .testcase does not match
.clone NEWDB             Clone data into NEWDB from the existing database
.databases               List names and files of attached databases
.dbconfig ?op? ?val?     List or change sqlite3_db_config() options
.dbinfo ?DB?             Show status information about the database
.dump ?TABLE? ...        Render all database content as SQL
.echo on|off             Turn command echo on or off
.eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN
.excel                   Display the output of next command in a spreadsheet
.exit ?CODE?             Exit this program with return-code CODE
.expert                  EXPERIMENTAL. Suggest indexes for specified queries
.filectrl CMD ...        Run various sqlite3_file_control() operations
.fullschema ?--indent?   Show schema and the content of sqlite_stat tables
.headers on|off          Turn display of headers on or off
.help ?-all? ?PATTERN?   Show help text for PATTERN
.import FILE TABLE       Import data from FILE into TABLE
.imposter INDEX TABLE    Create imposter table TABLE on index INDEX
.indexes ?TABLE?         Show names of indexes
.limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT
.lint OPTIONS            Report potential schema issues.
.load FILE ?ENTRY?       Load an extension library
.log FILE|off            Turn logging on or off.  FILE can be stderr/stdout
.mode MODE ?TABLE?       Set output mode
.nullvalue STRING        Use STRING in place of NULL values
.once (-e|-x|FILE)       Output for the next SQL command only to FILE
.open ?OPTIONS? ?FILE?   Close existing database and reopen FILE
.output ?FILE?           Send output to FILE or stdout if FILE is omitted
.parameter CMD ...       Manage SQL parameter bindings
.print STRING...         Print literal STRING
.progress N              Invoke progress handler after every N opcodes
.prompt MAIN CONTINUE    Replace the standard prompts
.quit                    Exit this program
.read FILE               Read input from FILE
.recover                 Recover as much data as possible from corrupt db.
.restore ?DB? FILE       Restore content of DB (default &amp;quot;main&amp;quot;) from FILE
.save FILE               Write in-memory database into FILE
.scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off
.schema ?PATTERN?        Show the CREATE statements matching PATTERN
.selftest ?OPTIONS?      Run tests defined in the SELFTEST table
.separator COL ?ROW?     Change the column and row separators
.sha3sum ...             Compute a SHA3 hash of database content
.shell CMD ARGS...       Run CMD ARGS... in a system shell
.show                    Show the current values for various settings
.stats ?on|off?          Show stats or turn stats on or off
.system CMD ARGS...      Run CMD ARGS... in a system shell
.tables ?TABLE?          List names of tables matching LIKE pattern TABLE
.testcase NAME           Begin redirecting output to &#39;testcase-out.txt&#39;
.testctrl CMD ...        Run various sqlite3_test_control() operations
.timeout MS              Try opening locked tables for MS milliseconds
.timer on|off            Turn SQL timer on or off
.trace ?OPTIONS?         Output each SQL statement as it is run
.vfsinfo ?AUX?           Information about the top-level VFS
.vfslist                 List all available VFSes
.vfsname ?AUX?           Print the name of the VFS stack
.width NUM1 NUM2 ...     Set column widths for &amp;quot;column&amp;quot; mode
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;show-all-the-databases-in-sqlite-in-current-session&#34;&gt;Show all the databases in sqlite in current session&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite&amp;gt; .databases
main:
sqlite&amp;gt; .tables
sqlite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that I have no databases in this current session.&lt;/p&gt;

&lt;p&gt;Let us do something more useful by loading up current Web Cookies in Chrome&lt;/p&gt;

&lt;h4 id=&#34;load-current-cookies-for-chrome-browser&#34;&gt;Load current cookies for Chrome Browser&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd Library/Application\ Support/Google/Chrome/Default/

Google/Chrome/Default on ☁️  us-east-1
&amp;gt; sqlite3 Cookies
SQLite version 3.29.0 2019-07-10 17:32:03
Enter &amp;quot;.help&amp;quot; for usage hints.
sqlite&amp;gt; .databases
main: /Users/jean-marcelbelmont/Library/Application Support/Google/Chrome/Default/Cookies
sqlite&amp;gt; .tables
cookies  meta
sqlite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notice that here we load up the Cookies Database which also has a cookies table.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;query-all-fields-from-cookies-table&#34;&gt;Query all fields from cookies table&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite&amp;gt; SELECT * FROM cookies;
&amp;lt;number&amp;gt;|.github.com|_octo||/|&amp;lt;...&amp;gt;|0|0|&amp;lt;...&amp;gt;|1|1|1|v107P)&amp;lt;digits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sql-syntax&#34;&gt;SQL Syntax&lt;/h4&gt;

&lt;p&gt;You can query things using the following sql keywords&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT =&amp;gt; Fields to return
FROM =&amp;gt; TABLE 
WHERE =&amp;gt; Condition to reduce the dataset
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;show-help-on-particular-sqlite-command-and-show-table-schema&#34;&gt;Show help on particular sqlite command and show table schema&lt;/h4&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/sqlite-help-schema.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in this screenshot we get helpful information on the &lt;code&gt;.schema&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;We then call &lt;code&gt;.schema --indent cookies&lt;/code&gt; which shows all the available fields that we can use in our SELECT Query&lt;/p&gt;

&lt;h4 id=&#34;select-from-where-query-in-cookies-table&#34;&gt;SELECT FROM WHERE Query in cookies table&lt;/h4&gt;

&lt;p&gt;Let us now craft a query that matches on a specific condition and only show certain fields instead of all fields.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite&amp;gt; SELECT host_key, name, value FROM cookies WHERE host_key like &#39;%mongo%&#39;;
.mongodb.com|_rtfl_s_unique_visitor_session|
.mongodb.com|__gads|
..........................................
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that in this query we project the &lt;em&gt;host_key, name, value&lt;/em&gt; fields and match on the host_key and use the like operator:&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;like&lt;/em&gt; operator takes a wildcard like the &lt;code&gt;%&lt;/code&gt; and it matches any host_key that has mongo text before and after&lt;/p&gt;

&lt;h4 id=&#34;read-sqlite-language-guide&#34;&gt;Read SQLite Language Guide&lt;/h4&gt;

&lt;p&gt;Please read the &lt;a href=&#34;https://www.sqlite.org/lang.html&#34; target=&#34;_blank&#34;&gt;SQLite Language guide&lt;/a&gt; for more information on using sqlite.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can use the Chrome Developer Tools to see cookies but with sqlite you can see all of the cookies that websites use.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;twitter-github-account&#34;&gt;Twitter &amp;amp; Github Account&lt;/h2&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internet Relay Chat (IRC) with Screen Multiplexer</title>
      <link>https://www.marcelbelmont.com/post/irc/</link>
      <pubDate>Sun, 26 Jan 2020 12:17:38 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/irc/</guid>
      <description>

&lt;h1 id=&#34;internet-relay-chat-and-screen&#34;&gt;Internet Relay Chat and Screen&lt;/h1&gt;

&lt;p&gt;Internet Relay Chat (IRC) hs been around since 1988 and was created by &lt;a href=&#34;https://en.wikipedia.org/wiki/Jarkko_Oikarinen&#34; target=&#34;_blank&#34;&gt;Jarkko Oikarinen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;IRC was borne out of the need to have a real time communication system while using an operating system to communicate with other users.&lt;/p&gt;

&lt;p&gt;IRC is an open protocol that uses Transmission Control Protocol (TCP).&lt;/p&gt;

&lt;p&gt;You can read more about IRC in the official &lt;a href=&#34;https://tools.ietf.org/html/rfc1459&#34; target=&#34;_blank&#34;&gt;Internet Relay Chat Protocol RFC 1459&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During an IRC session, client will send 1 line messages to a server.&lt;/p&gt;

&lt;p&gt;I am mostly a terminal user so my ideal irc client would be terminal based.&lt;/p&gt;

&lt;h2 id=&#34;irssi&#34;&gt;IRSSI&lt;/h2&gt;

&lt;p&gt;IRSSI is an IRC client that you can use in Linux, Mac and Windows.&lt;/p&gt;

&lt;p&gt;Since I primarily work in Mac OS X I will show how I setup IRSSI on the Mac but you can find you particular install and setup directions at &lt;a href=&#34;https://irssi.org/download/&#34; target=&#34;_blank&#34;&gt;irssi.org/download&lt;/a&gt; official website.&lt;/p&gt;

&lt;h4 id=&#34;irssi-mac-setup&#34;&gt;IRSSI Mac Setup&lt;/h4&gt;

&lt;p&gt;Now with that let us get irssi up and running in a terminal environment.&lt;/p&gt;

&lt;p&gt;If you have &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt; installed you can install irssi in one command like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install irssi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I already have irssi installed in my Macbook Pro as you can tell:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/homebrew-irssi.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;starting-an-irssi-session&#34;&gt;Starting an IRSSI session&lt;/h2&gt;

&lt;p&gt;You can simply type &lt;code&gt;irssi&lt;/code&gt; in a terminal session after installing irssi and you will see a screen like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/irssi-basic-session.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that we are being prompted for a &lt;code&gt;status&lt;/code&gt; since we haven&amp;rsquo;t really connected to anything yet.&lt;/p&gt;

&lt;h4 id=&#34;starting-a-screen-session&#34;&gt;Starting a screen session&lt;/h4&gt;

&lt;p&gt;Instead of simply typing in &lt;code&gt;irssi&lt;/code&gt; in a terminal let us first start a screen session.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Screen&lt;/code&gt; is a terminal multiplexer that has been around for a long time like over 30 years and has many possible uses.&lt;/p&gt;

&lt;p&gt;The nice thing about using screen with irssi is that we can keep a long running session that won&amp;rsquo;t be interrupted if we decide to logoff of our current computer session and we can detach it for later use.&lt;/p&gt;

&lt;p&gt;With that being said if you are already on a mac then you will already have it installed most probably.&lt;/p&gt;

&lt;p&gt;We can kill our current irssi session by simply typing &lt;code&gt;/exit&lt;/code&gt; or &lt;code&gt;/EXIT&lt;/code&gt; in the status prompt in the bottom.&lt;/p&gt;

&lt;p&gt;Let us create a new screen session like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;screen -S irc-chat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We named our screen session &lt;code&gt;irc-chat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we will simply type in &lt;code&gt;irssi&lt;/code&gt; like we did before except we now have a screen session running as well.&lt;/p&gt;

&lt;h2 id=&#34;connecting-to-a-network&#34;&gt;Connecting to a network&lt;/h2&gt;

&lt;p&gt;In order for us to do anything useful we need to connect to an actual IRC Network.&lt;/p&gt;

&lt;p&gt;For the purposes of this blog post we will connect to the Mozilla IRC Server of &lt;code&gt;irc.mozilla.org&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;using-the-help-in-irssi&#34;&gt;Using the /help in irssi&lt;/h4&gt;

&lt;p&gt;You can use the &lt;code&gt;/help&lt;/code&gt; command in irssi to understand each command and by the way each command begins with the &lt;code&gt;/&lt;/code&gt; character in an irssi session.&lt;/p&gt;

&lt;p&gt;Let us connect to the &lt;code&gt;irc.mozilla.org&lt;/code&gt; irc server with the following command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/connnect irc.mozilla.org&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once connected you will see a screen like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/irssi-irc-server-connect.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can type the following command to see a list of all available Channels in the particular IRC Server we are connected to:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/LIST -YES&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that we put &lt;code&gt;-YES&lt;/code&gt; after our command because of a particular warning prompt you get with the &lt;code&gt;/LIST&lt;/code&gt; command&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/channels-irc.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;connecting-to-rust&#34;&gt;Connecting to Rust&lt;/h2&gt;

&lt;p&gt;Since we are in a screen session we need to type in &lt;code&gt;Control Character A then [&lt;/code&gt; or &lt;code&gt;C-a [&lt;/code&gt; so that we can scroll back and look at channels.&lt;/p&gt;

&lt;h4 id=&#34;reading-help-menu-for-channel-command&#34;&gt;Reading help menu for &lt;code&gt;/channel&lt;/code&gt; command&lt;/h4&gt;

&lt;p&gt;Let us read some help documentation for the &lt;code&gt;/channel&lt;/code&gt; command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/irssi-channel-help.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;There is quite a bit of options but we will simply type in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/join &lt;span style=&#34;color:#75715e&#34;&gt;#rust-servo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To join the &lt;code&gt;#rust-servo&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;Now that we have joined we should see a session like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/irssi-channel-appear.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;setting-a-nickname&#34;&gt;Setting a nickname&lt;/h2&gt;

&lt;p&gt;You can set a nickname by typing in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/set nick &amp;lt;nick_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can leave an IRC channel by simply typing in &lt;code&gt;/leave&lt;/code&gt; and we will leave the channel.&lt;/p&gt;

&lt;h2 id=&#34;list-names-of-current-users-in-channel&#34;&gt;List names of current users in channel&lt;/h2&gt;

&lt;p&gt;We can see a list of current users in a channel by typing in&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/names&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will see a screen like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/irssi-names.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You won&amp;rsquo;t see any information about the user until you exit the channel so don&amp;rsquo;t be alarmed:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/irssi-whois.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;private-messenging&#34;&gt;Private Messenging&lt;/h2&gt;

&lt;p&gt;You can privately message a user by using there nickname like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/msg comey Hello There My friend!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;leaving-an-irc-server&#34;&gt;Leaving an IRC Server&lt;/h2&gt;

&lt;p&gt;We can simply type in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/quit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to leave the IRC Server.&lt;/p&gt;

&lt;h2 id=&#34;detach-screen-session&#34;&gt;Detach screen session&lt;/h2&gt;

&lt;p&gt;Remember that we created a screen session if we want to detach from our current running session we simply type:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Ctrl+a d&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;listing-screen-session&#34;&gt;Listing screen session&lt;/h2&gt;

&lt;p&gt;If we don&amp;rsquo;t remember what we called our screen session then we can simply type in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;screen -ls&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and we will see something like this in the terminal:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/screen-session-list.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;reattaching-a-screen-session&#34;&gt;Reattaching a Screen session&lt;/h2&gt;

&lt;p&gt;We can simply type in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;screen -r irc-chat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and we will be reattached to our previous irc session:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/screen-irssi-attach.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;There is much more you can do with irssi/screen than I have mentioned here and I would suggest trying it out on your own.&lt;/p&gt;

&lt;h2 id=&#34;twitter-github-account&#34;&gt;Twitter &amp;amp; Github Account&lt;/h2&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating Documentation With Groff</title>
      <link>https://www.marcelbelmont.com/post/creating-documentation-with-groff/</link>
      <pubDate>Sun, 01 Dec 2019 15:03:59 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/creating-documentation-with-groff/</guid>
      <description>

&lt;p&gt;In this blog post I go over using groff which is a *nix utility that you can use to format documentation like LaTex but with a much reduced learning curve and simpler syntax.&lt;/p&gt;

&lt;h2 id=&#34;definition-of-groff&#34;&gt;Definition of groff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/groff/manual/html_node/What-Is-groff_003f.html#What-Is-groff_003f&#34; target=&#34;_blank&#34;&gt;What is groff?&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;groff belongs to an older generation of document preparation systems, which operate more like compilers than the more recent interactive WYSIWYG systems. groff and its contemporary counterpart, TeX, both work using a batch paradigm: The input (or source) files are normal text files with embedded formatting commands. These files can then be processed by groff to produce a typeset document on a variety of devices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;groff-usages&#34;&gt;Groff usages&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;The main uses for groff is for creating man pages in linux.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can also use groff to generate pdf files and post script files.&lt;/p&gt;

&lt;h6 id=&#34;groff-generated-post-script&#34;&gt;Groff generated post script&lt;/h6&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/groff_hello_world.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that we just simple created a file with the groff utility and groff generated a postscript file for use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/PostScript&#34; target=&#34;_blank&#34;&gt;PostScript Wikipedia definition&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PostScript (PS) is a page description language in the electronic publishing and desktop publishing business. It is a dynamically typed, concatenative programming language and was created at Adobe Systems by John Warnock, Charles Geschke, Doug Brotz, Ed Taft and Bill Paxton from 1982 to 1984.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interestingly, PostScript is a turing-comple programming language but most of the time post script is used as an intermediate document format.&lt;/p&gt;

&lt;p&gt;Another reasen that PostScript is used is because you can create documents programatically with it and PostScript is heavily used with LaTex/Tex formatting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editors typically will use Post Script files along with Pdf files since they can be edited, while pdf files cannot.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have the original PostScript file then you can easily fix formatting issues then with a pdf file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With that sidebar out of the way let us get back to talking about groff.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;groff-macro-packages&#34;&gt;Groff macro packages&lt;/h4&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;man groff | col -b | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/Macro Packages/,/Programming Language/&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The man pages are generally created using &lt;code&gt;groff&lt;/code&gt; command and so if you need to do any &lt;code&gt;grep&lt;/code&gt; then you should use the &lt;code&gt;col&lt;/code&gt; command.&lt;/p&gt;

&lt;h6 id=&#34;col-command&#34;&gt;col command&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;The col utility filters out reverse (and half reverse) line feeds so that the output is in the correct order with only forward and half forward line feeds, and replaces white-space characters with tabs where possible.  This can be useful in processing the output of nroff(1) and tbl(1).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Macro Packages:&lt;/p&gt;

&lt;p&gt;Macro  packages  can be included by option -m.  The groff system implements and extends all classical macro packages in a compatible way and adds
some packages of its own.  Actually, the following macro packages come with groff:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;man&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The traditional man page format; see groff_man(7).  It can be specified on the command line as -man or -m man.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;mandoc&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The general package for man pages; it automatically recognizes whether the documents uses the man or the mdoc format and branches  to  the corresponding macro package.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;It can be specified on the command line as -mandoc or -m mandoc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;mdoc&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The BSD-style man page format; see groff_mdoc(7).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;It can be specified on the command line as -mdoc or -m mdoc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;me&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The classical me document format; see groff_me(7).  It can be specified on the command line as -me or -m me.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;mm&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The classical mm document format; see groff_mm(7).  It can be specified on the command line as -mm or -m mm.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ms&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The classical ms document format; see groff_ms(7).  It can be specified on the command line as -ms or -m ms.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;www&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML-like macros for inclusion in arbitrary groff documents; see groff_www(7).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the purposes of this blog post we will only look at using &lt;code&gt;me&lt;/code&gt; macros for the groff command.&lt;/p&gt;

&lt;h4 id=&#34;groff-command-syntax-with-me-macros&#34;&gt;Groff command syntax with &lt;code&gt;me&lt;/code&gt; macros&lt;/h4&gt;

&lt;p&gt;You use commands in groff in their own separate line and prefix them with a &lt;code&gt;.&lt;/code&gt; character.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;me&lt;/code&gt; macros is typically used for technical papers and so it may not be appropriate for other intended usages and/or audiences.&lt;/p&gt;

&lt;p&gt;Please read the &lt;a href=&#34;http://man7.org/linux/man-pages/man7/groff_me.7.html&#34; target=&#34;_blank&#34;&gt;groff_me man page&lt;/a&gt; for more information on the available request command macros&lt;/p&gt;

&lt;p&gt;All macro requests must be on their own line else they won&amp;rsquo;t work and they must be by themselves:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt; This works
.pp

&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt; This does not work
Here I am .pp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h6 id=&#34;basics-of-me-with-groff-example&#34;&gt;basics of &lt;code&gt;me&lt;/code&gt; with groff example&lt;/h6&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt; paragraph request
.pp
You can make a paragraph like this:
&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt; bulleted lists start with .bu
.bu
Rocky
.bu
Rambo
.bu
Snake
.pp
Start a numbered list:
.np
I am the alpha
.np
and
.np
the omega
.pp
Any numbered lists are reset on the next occurrence of .pp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h6 id=&#34;page-layout-with-groff-me-macro&#34;&gt;Page layout with groff &lt;code&gt;me&lt;/code&gt; macro&lt;/h6&gt;

&lt;p&gt;You can use the &lt;code&gt;.b&lt;/code&gt; request for bolding text and the &lt;code&gt;.i&lt;/code&gt; macro request to italicize.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;code&gt;.u&lt;/code&gt; macro request for underlines and &lt;code&gt;.bu&lt;/code&gt; for bold italic&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;.pp
I am going to 
.b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bold this text&amp;#34;&lt;/span&gt;
and I am going to 
.i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;italicize this text&amp;#34;&lt;/span&gt;
and I will 
.bu &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bold and italicize&amp;#34;&lt;/span&gt;
this text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;making-lists-with-me-macro&#34;&gt;Making lists with &lt;code&gt;me&lt;/code&gt; macro&lt;/h4&gt;

&lt;p&gt;You can make some lists using the &lt;code&gt;.(l \n\nSome stuff.)l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of a list:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l
Shine Shoes
Cut Hair
Get Dressed
.&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;setting-font-size&#34;&gt;Setting font size&lt;/h4&gt;

&lt;p&gt;you can use the &lt;code&gt;.ps&lt;/code&gt; request to set font size:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;.ps &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
I am large text
.ps &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 
I am tiny text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;set-leading-paragraph&#34;&gt;Set leading paragraph&lt;/h4&gt;

&lt;p&gt;You can use the &lt;code&gt;.lp&lt;/code&gt; macro request for leading paragraphs.&lt;/p&gt;

&lt;h4 id=&#34;quote-text&#34;&gt;Quote text&lt;/h4&gt;

&lt;p&gt;You can quote text using &lt;code&gt;\*(lqMy Text is quoted.\*(rq&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;You can quote text using &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lqMy Text is quoted.&lt;span style=&#34;color:#ae81ff&#34;&gt;\*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rq&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;combining-example-into-one-groff-file&#34;&gt;Combining example into one &lt;code&gt;groff&lt;/code&gt; file&lt;/h4&gt;

&lt;p&gt;Let us combine all of the example we have shown thus far into one larger example like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt; paragraph request
.pp
You can make a paragraph like this:
&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt; bulleted lists start with .bu
.bu
Rocky
.bu
Rambo
.bu
Snake
.pp
Start a numbered list:
.np
I am the alpha
.np
and
.np
the omega
.pp
Any numbered lists are reset on the next occurrence of .pp
.pp
I am going to 
.b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bold this text&amp;#34;&lt;/span&gt;
and I am going to 
.i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;italicize this text&amp;#34;&lt;/span&gt;
and I will 
.bu &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bold and italicize&amp;#34;&lt;/span&gt;
this text
.&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l
Shine Shoes
Cut Hair
Get Dressed
.&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;l
.ps &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
I am large text
.ps &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 
I am tiny text
You can quote text using &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lqMy Text is quoted.&lt;span style=&#34;color:#ae81ff&#34;&gt;\*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rq&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using the text above we will create a new groff file and add the &lt;code&gt;.groff&lt;/code&gt; file extension.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/groff-vim.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;generating-a-postscript-file-with-groff&#34;&gt;Generating a &lt;code&gt;PostScript&lt;/code&gt; file with groff&lt;/h4&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/groff-create-postscript.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In the example above we create a new post script file using &lt;code&gt;groff&lt;/code&gt; utility&lt;/p&gt;

&lt;h4 id=&#34;generating-a-pdf-file-with-ps2pdf-command&#34;&gt;Generating a &lt;code&gt;pdf&lt;/code&gt; file with &lt;code&gt;ps2pdf&lt;/code&gt; command&lt;/h4&gt;

&lt;p&gt;Next we can use the &lt;code&gt;ps2pdf&lt;/code&gt; command to create a pdf with our postscript file like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ps2pdf example.ps example.pdf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;generated-pdf-example&#34;&gt;Generated pdf example&lt;/h4&gt;

&lt;p&gt;Here is our beautifully made pdf :)&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/groff-pdf.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;If you like this blog post then please consider following me on the following social media outlets:&lt;/p&gt;

&lt;h2 id=&#34;twitter-github-account&#34;&gt;Twitter &amp;amp; Github Account&lt;/h2&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to Data Science Part II</title>
      <link>https://www.marcelbelmont.com/post/intro-to-data-science-part2/</link>
      <pubDate>Thu, 03 Oct 2019 18:05:17 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/intro-to-data-science-part2/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Full Disclaimer I am not a Data Scientist and these are just my getting started notes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the previous blog article, we defined through Wikipedia what Data Science is and looked at some important subjects to master to better grasp Data Science theory.&lt;/p&gt;

&lt;p&gt;This article will be centered on specific tooling in languages such as Python.&lt;/p&gt;

&lt;p&gt;In order to facilitate our entry into Data Science, we will be using the &lt;a href=&#34;https://www.anaconda.com/distribution/&#34; target=&#34;_blank&#34;&gt;Anaconda Distribution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This distribution will let us easily download popular packages and tools and provide IDEs for us to use.&lt;/p&gt;

&lt;h2 id=&#34;downloading-anaconda&#34;&gt;Downloading Anaconda&lt;/h2&gt;

&lt;p&gt;The first thing that you need to do is to &lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34; target=&#34;_blank&#34;&gt;Download Anaconda&lt;/a&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/anaconda-download.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Anaconda Distribution is available for Mac OS X, Windows and Linux.&lt;/p&gt;

&lt;p&gt;You can also pick between Python 2.7 and Python 3.7 Versions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Python 2.7 is about to reach end of support and development, so if possible try to use Python 3.7&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;starting-anaconda&#34;&gt;Starting Anaconda&lt;/h4&gt;

&lt;p&gt;Once you install anaconda you simply need to launch the application, since I am using Mac OS X, I will click on the anaconda navigator application to start up anaconda.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/anaconda-navigator.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You simply need to click the install button and then click the launch button to get your integrated development environment running.&lt;/p&gt;

&lt;p&gt;Let us get Jupyter Notebooks running in our system by clicking the launch button in Anaconda.&lt;/p&gt;

&lt;p&gt;Once you do that jupyter will launch a new shell session that will run &lt;code&gt;jupyter notebook&lt;/code&gt; under the hood with the following executable programs installed by the anaconda distribution:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/anaconda-executable.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You will get a new browser window that will run in localhost port 8888 and open your home directory in your machine:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/anaconda-browser.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;I have already navigated to a new repository that I created for this blog article where you can find the source code at &lt;a href=&#34;https://github.com/jbelmont/intro-to-data-science&#34; target=&#34;_blank&#34;&gt;intro to data science&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;creating-a-new-jupyter-notebook&#34;&gt;Creating a new jupyter notebook&lt;/h4&gt;

&lt;p&gt;In order to get a new Jupyter notebook you simply need to click the &lt;em&gt;New&lt;/em&gt; button and pick the environment for the notebook to run against.&lt;/p&gt;

&lt;p&gt;We will pick Python 3 for this article but you can pick other options if you need to.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/anaconda-pick.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Once you click an option a new tab will be opened with your new jupyter notebook for you to start with like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/jupyter-new-notebook-hello-world.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In our new notebook we are printing out the text &amp;ldquo;Intro to Data Science!&amp;rdquo; but notice that we have a new interactive shell session running!&lt;/p&gt;

&lt;h4 id=&#34;saving-jupyter-notebook&#34;&gt;Saving jupyter notebook&lt;/h4&gt;

&lt;p&gt;Until you save your notebook you will have an untitled notebook kind of like this: &lt;code&gt;Untitled.ipynb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will name this jupyter notebook by clicking the File icon and then the Save As icon like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/jupyter-save-session.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;writing-markdown-in-jupyter-cell&#34;&gt;Writing Markdown in Jupyter cell&lt;/h4&gt;

&lt;p&gt;You are not restricted to just writing python code into a Jupyter cell, you can also write markdown by toggling dropdown like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/jupyter-notebook-markdown-dropdown.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;importing-libraries-in-jupyter&#34;&gt;Importing libraries in Jupyter&lt;/h4&gt;

&lt;p&gt;You can simply write python code and then click the run button and highlight the cell to execute like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/jupyter-notebook-libs-execute.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;next-article&#34;&gt;Next article&lt;/h4&gt;

&lt;p&gt;The next blog article will center around using the spyder IDE and we will write some R code and do use the ipython shell.&lt;/p&gt;

&lt;h2 id=&#34;contact-information&#34;&gt;Contact Information&lt;/h2&gt;

&lt;p&gt;If you like this post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt; for more related type posts.&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reverse Engineering Tools a DevOps Engineer can use</title>
      <link>https://www.marcelbelmont.com/talk/reverse-engineering-tools-a-devops-engineer-can-use/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/talk/reverse-engineering-tools-a-devops-engineer-can-use/</guid>
      <description>&lt;p&gt;An ignite talk focusing on several reverse engineering tools in the unix platform such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;objdump&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;radare2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lldb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rust-lldb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ghidra&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The purpose of the talk is to introduce Reverse Engineering tooling and the general concept as it implies to security and software.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to Data Science</title>
      <link>https://www.marcelbelmont.com/post/intro-to-data-science/</link>
      <pubDate>Sun, 04 Aug 2019 16:47:14 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/intro-to-data-science/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Full Disclaimer I am not a Data Scientist and these are just my getting started notes.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;introduction-to-data-science&#34;&gt;Introduction to Data Science&lt;/h1&gt;

&lt;p&gt;According to wikipedia Data Science can be summarized as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data science is a multi-disciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge and insights from structured and unstructured data. Data science is the same concept as data mining and big data: &amp;ldquo;use the most powerful hardware, the most powerful programming systems, and the most efficient algorithms to solve problems&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;important-subjects-to-grasp-about-data-science&#34;&gt;Important subjects to grasp about Data Science&lt;/h2&gt;

&lt;p&gt;It is important to have knowledge about statistics and be well versed in Mathematics to be an effective Data Science from what I have read.&lt;/p&gt;

&lt;h4 id=&#34;math-prerequisites-for-data-science&#34;&gt;Math Prerequisites for Data Science&lt;/h4&gt;

&lt;h6 id=&#34;linear-algebra&#34;&gt;Linear Algebra&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_algebra&#34; target=&#34;_blank&#34;&gt;Linear Algebra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to Wolfram Alpha:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Linear algebra is the study of linear sets of equations and their transformation properties. Linear algebra allows the analysis of rotations in space, least squares fitting, solution of coupled differential equations, determination of a circle passing through three given points, as well as many other problems in mathematics, physics, and engineering. Confusingly, linear algebra is not actually an algebra in the technical sense of the word &amp;ldquo;algebra&amp;rdquo; (i.e., a vector space V over a field F, and so on).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;single-variate-and-multi-variate-calculus&#34;&gt;Single Variate and Multi Variate Calculus&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Calculus&#34; target=&#34;_blank&#34;&gt;Calculus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Calculus, originally called infinitesimal calculus or &amp;ldquo;the calculus of infinitesimals&amp;rdquo;, is the mathematical study of continuous change, in the same way that geometry is the study of shape and algebra is the study of generalizations of arithmetic operations.&lt;/p&gt;

&lt;p&gt;It has two major branches, differential calculus and integral calculus. Differential calculus concerns instantaneous rates of change and the slopes of curves. Integral calculus concerns accumulation of quantities and the areas under and between curves. These two branches are related to each other by the fundamental theorem of calculus. Both branches make use of the fundamental notions of convergence of infinite sequences and infinite series to a well-defined limit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;statistics&#34;&gt;Statistics&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Statistics&#34; target=&#34;_blank&#34;&gt;Statistics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Statistics is a branch of mathematics working with data collection, organization, analysis, interpretation and presentation. In applying statistics to a scientific, industrial, or social problem, it is conventional to begin with a statistical population or a statistical model to be studied. Populations can be diverse groups of people or objects such as &amp;ldquo;all people living in a country&amp;rdquo; or &amp;ldquo;every atom composing a crystal&amp;rdquo;. Statistics deals with every aspect of data, including the planning of data collection in terms of the design of surveys and experiments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;data-science-concepts-and-terminology&#34;&gt;Data Science Concepts and Terminology&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Artificial_intelligence&#34; target=&#34;_blank&#34;&gt;Articial Intelligence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Machine_learning&#34; target=&#34;_blank&#34;&gt;Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Supervised_learning&#34; target=&#34;_blank&#34;&gt;Supervised Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unsupervised_learning&#34; target=&#34;_blank&#34;&gt;Unsupervised Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Neural_network&#34; target=&#34;_blank&#34;&gt;Neural Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Natural_language_processing&#34; target=&#34;_blank&#34;&gt;Natural Language Processing (NLP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Deep_learning&#34; target=&#34;_blank&#34;&gt;Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;artificial-intelligence&#34;&gt;Artificial Intelligence&lt;/h4&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In computer science, artificial intelligence (AI), sometimes called machine intelligence, is intelligence demonstrated by machines, in contrast to the natural intelligence displayed by humans. Colloquially, the term &amp;ldquo;artificial intelligence&amp;rdquo; is often used to describe machines (or computers) that mimic &amp;ldquo;cognitive&amp;rdquo; functions that humans associate with the human mind, such as &amp;ldquo;learning&amp;rdquo; and &amp;ldquo;problem solving&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;machine-learning&#34;&gt;Machine Learning&lt;/h4&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Machine learning (ML) is the scientific study of algorithms and statistical models that computer systems use in order to perform a specific task effectively without using explicit instructions, relying on patterns and inference instead. It is seen as a subset of artificial intelligence. Machine learning algorithms build a mathematical model based on sample data, known as &amp;ldquo;training data&amp;rdquo;, in order to make predictions or decisions without being explicitly programmed to perform the task. Machine learning algorithms are used in a wide variety of applications, such as email filtering, and computer vision, where it is infeasible to develop an algorithm of specific instructions for performing the task. Machine learning is closely related to computational statistics, which focuses on making predictions using computers. The study of mathematical optimization delivers methods, theory and application domains to the field of machine learning. Data mining is a field of study within machine learning, and focuses on exploratory data analysis through unsupervised learning.In its application across business problems, machine learning is also referred to as predictive analytics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;supervised-learning&#34;&gt;Supervised Learning&lt;/h4&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Supervised learning is the machine learning task of learning a function that maps an input to an output based on example input-output pairs. It infers a function from labeled training data consisting of a set of training examples. In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a &amp;ldquo;reasonable&amp;rdquo; way (see inductive bias).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;unsupervised-learning&#34;&gt;Unsupervised Learning&lt;/h4&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unsupervised learning is a type of self-organized Hebbian learning that helps find previously unknown patterns in data set without pre-existing labels. It is also known as self-organization and allows modeling probability densities of given inputs. It is one of the main three categories of machine learning, along with supervised and reinforcement learning. Semi-supervised learning has also been described, and is a hybridization of supervised and unsupervised techniques.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;neural-network&#34;&gt;Neural Network&lt;/h4&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A neural network is a network or circuit of neurons, or in a modern sense, an artificial neural network, composed of artificial neurons or nodes. Thus a neural network is either a biological neural network, made up of real biological neurons, or an artificial neural network, for solving artificial intelligence (AI) problems. The connections of the biological neuron are modeled as weights. A positive weight reflects an excitatory connection, while negative values mean inhibitory connections. All inputs are modified by a weight and summed. This activity is referred as a linear combination. Finally, an activation function controls the amplitude of the output. For example, an acceptable range of output is usually between 0 and 1, or it could be −1 and 1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;natural-language-processing&#34;&gt;Natural Language Processing&lt;/h4&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Natural language processing (NLP) is a subfield of computer science, information engineering, and artificial intelligence concerned with the interactions between computers and human (natural) languages, in particular how to program computers to process and analyze large amounts of natural language data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;deep-learning&#34;&gt;Deep Learning&lt;/h4&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Deep learning (also known as deep structured learning or hierarchical learning) is part of a broader family of machine learning methods based on artificial neural networks. Learning can be supervised, semi-supervised or unsupervised.&lt;/p&gt;

&lt;p&gt;Deep learning architectures such as deep neural networks, deep belief networks, recurrent neural networks and convolutional neural networks have been applied to fields including computer vision, speech recognition, natural language processing, audio recognition, social network filtering, machine translation, bioinformatics, drug design, medical image analysis, material inspection and board game programs, where they have produced results comparable to and in some cases superior to human experts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;data-science-tools&#34;&gt;Data Science Tools&lt;/h2&gt;

&lt;p&gt;The following blog post in the &lt;a href=&#34;https://towardsdatascience.com/10-data-science-tools-i-explored-in-2018-d8226f99f342&#34; target=&#34;_blank&#34;&gt;Towards Data Science blog proved helpful to me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems that Python and the R Programming Languages are most popular for data scientists.&lt;/p&gt;

&lt;h4 id=&#34;python-programming-language&#34;&gt;Python Programming Language&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34; target=&#34;_blank&#34;&gt;Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python&amp;rsquo;s design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;r-programming-language&#34;&gt;R Programming Language&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.r-project.org/about.html&#34; target=&#34;_blank&#34;&gt;R Programming&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;R is a language and environment for statistical computing and graphics. It is a GNU project which is similar to the S language and environment which was developed at Bell Laboratories (formerly AT&amp;amp;T, now Lucent Technologies) by John Chambers and colleagues. R can be considered as a different implementation of S. There are some important differences, but much code written for S runs unaltered under R.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;jupyter-notebooks&#34;&gt;Jupyter Notebooks&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://jupyter.org/&#34; target=&#34;_blank&#34;&gt;Jupyter Notebooks&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;install-jupyter-notebook-with-pip&#34;&gt;Install Jupyter Notebook with Pip&lt;/h6&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install jupyterlab

git clone https://github.com/jakevdp/PythonDataScienceHandbook.git

&lt;span style=&#34;color:#75715e&#34;&gt;## Run Jupyter Notebook&lt;/span&gt;
cd notebooks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h6 id=&#34;running-jupyter-notebook&#34;&gt;Running Jupyter Notebook&lt;/h6&gt;

&lt;p&gt;Here is a screenshot where I run a specific notebook:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/jupyter-notebook.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that in my machine a browser was opened and the Jupyter Notebook is running on port 8888 and here is the following url: &lt;a href=&#34;http://localhost:8888/notebooks/notebooks/01.00-IPython-Beyond-Normal-Python.ipynb*&#34; target=&#34;_blank&#34;&gt;http://localhost:8888/notebooks/notebooks/01.00-IPython-Beyond-Normal-Python.ipynb*&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;python-pandas&#34;&gt;Python Pandas&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/&#34; target=&#34;_blank&#34;&gt;Pandas&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;other-resources-for-getting-started-with-data-science&#34;&gt;Other Resources for getting started with Data Science&lt;/h2&gt;

&lt;p&gt;Check out the &lt;a href=&#34;https://towardsdatascience.com/&#34; target=&#34;_blank&#34;&gt;Towards Data Science Blog&lt;/a&gt; and look at some udemy and udacity courses.&lt;/p&gt;

&lt;h4 id=&#34;data-science-cheat-sheet-github&#34;&gt;Data Science Cheat Sheet Github&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abhat222/Data-Science--Cheat-Sheet&#34; target=&#34;_blank&#34;&gt;Data Science Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;contact-information&#34;&gt;Contact Information&lt;/h2&gt;

&lt;p&gt;If you like this post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt; for more related type posts.&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Awk Programming</title>
      <link>https://www.marcelbelmont.com/post/awk-programming/</link>
      <pubDate>Tue, 18 Jun 2019 18:40:22 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/awk-programming/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Mastering Awk Programming&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWK is a special-purpose programming language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually awk is used in combination with sed but awk unlike sed is a Turing Complete Programming Language and can be used for many different tasks.&lt;/p&gt;

&lt;p&gt;Awk shines when used for pattern matching and can aid when used for reporting purposes.&lt;/p&gt;

&lt;h2 id=&#34;awk-downloading-instructions&#34;&gt;Awk Downloading Instructions&lt;/h2&gt;

&lt;h4 id=&#34;build-awk-from-source&#34;&gt;Build awk from source&lt;/h4&gt;

&lt;p&gt;You can download gawk from ftp site at &lt;a href=&#34;https://ftp.gnu.org/gnu/gawk/&#34; target=&#34;_blank&#34;&gt;gawk gnu sources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will download gawk version 5 with the following command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget http://ftp.gnu.org/gnu/gawk/gawk-5.0.0.tar.xz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can then unpack this file with the following command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This command unpacks the tar ball into a folder called gawk-5.0.0&lt;/span&gt;
tar xvf gawk-5.0.0.tar.xz

&lt;span style=&#34;color:#75715e&#34;&gt;# next change into this directory&lt;/span&gt;
cd gawk-5.0.0.tar.xz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you build from source you will generally need to run the following commands:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./configure
make &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h6 id=&#34;configure-explanation-in-readme-from-gawk-source&#34;&gt;Configure explanation in README from gawk source&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;configure&#39; shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a&lt;/code&gt;Makefile&amp;rsquo; in each directory of the package.
It may also create one or more &lt;code&gt;.h&#39; files containing system-dependent
definitions.  Finally, it creates a shell script&lt;/code&gt;config.status&amp;rsquo; that
you can run in the future to recreate the current configuration, and a
file &lt;code&gt;config.log&#39; containing compiler output (useful mainly for
debugging&lt;/code&gt;configure&amp;rsquo;).&lt;/p&gt;

&lt;p&gt;It can also use an optional file (typically called &lt;code&gt;config.cache&#39;
and enabled with&lt;/code&gt;&amp;ndash;cache-file=config.cache&amp;rsquo; or simply `-C&amp;rsquo;) that saves
the results of its tests to speed up reconfiguring.  Caching is
disabled by default to prevent problems with accidental use of stale
cache files.&lt;/p&gt;

&lt;p&gt;If you need to do unusual things to compile the package, please try
to figure out how &lt;code&gt;configure&#39; could check whether to do them, and mail
diffs or instructions to the address given in the&lt;/code&gt;README&amp;rsquo; so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache&amp;rsquo; contains results you don&amp;rsquo;t want to keep, you
may remove or edit it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Building from source is generally not necessary anymore since you use package managers&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;setup-awk-in-homebrew-package-manager-in-mac-os-x&#34;&gt;Setup awk in Homebrew Package Manager in Mac OS X&lt;/h4&gt;

&lt;h6 id=&#34;install-homebrew&#34;&gt;Install Homebrew&lt;/h6&gt;

&lt;p&gt;You can install homebrew on Mac OS X using this script:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/bin/ruby -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can then simply run: &lt;code&gt;brew install gawk&lt;/code&gt; to install the latest gawk or awk.&lt;/p&gt;

&lt;h6 id=&#34;setup-awk-in-linux&#34;&gt;Setup awk in Linux&lt;/h6&gt;

&lt;p&gt;You can use the following command to install gawk on GNU Linux variants&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get update -y
sudo apt-get install gawk -y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;If you have other linux distribution then please consult its documentation to install awk.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;awk-hello-world-example&#34;&gt;Awk Hello World Example&lt;/h2&gt;

&lt;p&gt;awk is a turing complete language but it is typically used in pattern matching&lt;/p&gt;

&lt;p&gt;We will write a hello world equivalent program in awk like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN { print &amp;#34;Hello World&amp;#34; }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This prints out &amp;ldquo;Hello World&amp;rdquo; to standard output in your terminal&lt;/p&gt;

&lt;h2 id=&#34;awk-workflow-diagram&#34;&gt;awk workflow diagram&lt;/h2&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/Awk_Workflow_Programming.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;read-operation&#34;&gt;Read Operation:&lt;/h4&gt;

&lt;p&gt;In the read operation awk reads a line from the input stream (file, pipe, or stdin) and stores it in memory.&lt;/p&gt;

&lt;h4 id=&#34;execute-operation&#34;&gt;Execute OPERATION:&lt;/h4&gt;

&lt;p&gt;All AWK commands are applied sequentially on the input (records and fields). By default, AWK executes commands on each record/line. This behavior of AWK can be restricted by the use of patterns.&lt;/p&gt;

&lt;h4 id=&#34;repeat-operation&#34;&gt;REPEAT OPERATION:&lt;/h4&gt;

&lt;p&gt;The process of read and execute is repeated until the end of the file is reached.&lt;/p&gt;

&lt;h2 id=&#34;basic-actions-in-awk&#34;&gt;Basic actions in awk&lt;/h2&gt;

&lt;p&gt;Basic actions in awk consist of a pattern and an action&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;BEGIN &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;executing-awk-in-a-unix-linux-pipeline&#34;&gt;Executing awk in a Unix/Linux Pipeline&lt;/h4&gt;

&lt;p&gt;awk is useful in a unix pipeline is the following example illustrates:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/awk-pipeline.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In the following Unix Pipeline we print current processes into awk and print the lines 2 to the nth line using &lt;em&gt;awk&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;regular-expressions-in-awk&#34;&gt;Regular expressions in awk&lt;/h2&gt;

&lt;p&gt;Awk is a pattern matching language but comes with strong regular expression support.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A regular expression is a set of characters used to describe a pattern.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A regular expression is generally used to match lines in a file that contain a particular pattern.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Many Unix utilities operate on plain text files line by line, such as grep, sed, and awk.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Regular expressions search for a pattern on a single line in a file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;types-of-regular-expressions&#34;&gt;Types of Regular Expressions&lt;/h4&gt;

&lt;p&gt;Remember that there are 3 different types of Regular Expressions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Basic Regular Expressions (RE)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extended Regular Expressions (ERE)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Simple Regular Expressions (Deprecated)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;The 3rd type is deprecated and should not be used anymore.&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&#34;regular-expressions-wikipedia-post&#34;&gt;Regular Expressions Wikipedia Post&lt;/h6&gt;

&lt;p&gt;Please read the &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression#Basic_concepts&#34; target=&#34;_blank&#34;&gt;Regular Expressions Wikipedia Post&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A regular expression, often called a pattern, is an expression used to specify a set of strings required for a particular purpose. A simple way to specify a finite set of strings is to list its elements or members. However, there are often more concise ways to specify the desired set of strings. For example, the set containing the three strings &amp;ldquo;Handel&amp;rdquo;, &amp;ldquo;Händel&amp;rdquo;, and &amp;ldquo;Haendel&amp;rdquo; can be specified by the pattern H(ä|ae?)ndel; we say that this pattern matches each of the three strings. In most formalisms, if there exists at least one regular expression that matches a particular set then there exists an infinite number of other regular expressions that also match it—the specification is not unique. Most formalisms provide the following operations to construct regular expressions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Boolean &amp;ldquo;or&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* A vertical bar separates alternatives. For example, gray|grey can match &amp;quot;gray&amp;quot; or &amp;quot;grey&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Grouping&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Parentheses are used to define the scope and precedence of the operators (among other uses). For example, gray|grey and gr(a|e)y are equivalent patterns which both describe the set of &amp;quot;gray&amp;quot; or &amp;quot;grey&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Quantification&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* A quantifier after a token (such as a character) or group specifies how often that a preceding element is allowed to occur. The most common quantifiers are the question mark ?, the asterisk * (derived from the Kleene star), and the plus sign + (Kleene plus).

* `?` The question mark indicates zero or one occurrences of the preceding element. For example, colou?r matches both &amp;quot;color&amp;quot; and &amp;quot;colour&amp;quot;.
* \* The asterisk indicates zero or more occurrences of the preceding element. For example, ab*c matches &amp;quot;ac&amp;quot;, &amp;quot;abc&amp;quot;, &amp;quot;abbc&amp;quot;, &amp;quot;abbbc&amp;quot;, and so on.
* \+ The plus sign indicates one or more occurrences of the preceding element. For example, ab+c matches &amp;quot;abc&amp;quot;, &amp;quot;abbc&amp;quot;, &amp;quot;abbbc&amp;quot;, and so on, but not &amp;quot;ac&amp;quot;.

* `{n}[18]` The preceding item is matched exactly n times.
    * `{min,}[18]` The preceding item is matched min or more times.
    * `{min,max}[18]` The preceding item is matched at least min times, but not more than max times.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Wildcard&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The wildcard *.* matches any character. For example, a.b matches any string that contains an &amp;quot;a&amp;quot;, then any other character and then a &amp;quot;b&amp;quot;, a.*b matches any string that contains an &amp;quot;a&amp;quot; and a &amp;quot;b&amp;quot; at some later point.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;These constructions can be combined to form arbitrarily complex expressions, much like one can construct arithmetical expressions from numbers and the operations +, −, ×, and ÷. For example, H(ae?|ä)ndel and H(a|ae|ä)ndel are both valid patterns which match the same strings as the earlier example, H(ä|ae?)ndel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;differences-between-basic-and-ere-regular-expressions&#34;&gt;Differences between Basic and ERE Regular Expressions&lt;/h6&gt;

&lt;p&gt;ERE (Extended Regular Expressions) adds ?, +, and |, and EREs removes the need to escape the metacharacters ( ) and { }, which are required in BREs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;?&lt;/code&gt; operator matches on zero or 1&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;+&lt;/code&gt; operator matches on 1 or more&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;|&lt;/code&gt; operator adds alternation, the &lt;em&gt;or&lt;/em&gt; operator to regexes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, as long as the POSIX standard syntax for regexes is adhered to, there can be, and often is, additional syntax to serve specific (yet POSIX compliant) applications&lt;/p&gt;

&lt;p&gt;The meaning of metacharacters escaped with a backslash is reversed for some characters in the POSIX Extended Regular Expression (ERE) syntax.&lt;/p&gt;

&lt;p&gt;With this syntax, a backslash causes the metacharacter to be treated as a literal character.&lt;/p&gt;

&lt;p&gt;So, for example, ( ) is now ( ) and { } is now { }.&lt;/p&gt;

&lt;p&gt;Additionally, support is removed for \n backreferences.&lt;/p&gt;

&lt;h6 id=&#34;using-regexes-in-awk&#34;&gt;Using Regexes in Awk&lt;/h6&gt;

&lt;p&gt;Let us look at an example of matching on a regex pattern with awk.&lt;/p&gt;

&lt;p&gt;We have the following text file with the following information:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;emp.dat&lt;/em&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Jack    Jones       &lt;span style=&#34;color:#ae81ff&#34;&gt;9857532312&lt;/span&gt;  jack@gmail.com       M   hr      &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;
Jane    Kaur        &lt;span style=&#34;color:#ae81ff&#34;&gt;9837432312&lt;/span&gt;  jane@gmail.com       F   hr      &lt;span style=&#34;color:#ae81ff&#34;&gt;1800&lt;/span&gt;
Eva     Bostick     &lt;span style=&#34;color:#ae81ff&#34;&gt;8827232115&lt;/span&gt;  eva@gmail.com        F   lgs     &lt;span style=&#34;color:#ae81ff&#34;&gt;2100&lt;/span&gt;
Amit    Mendez      &lt;span style=&#34;color:#ae81ff&#34;&gt;9911887766&lt;/span&gt;  amit@yahoo.com       M   lgs     &lt;span style=&#34;color:#ae81ff&#34;&gt;2350&lt;/span&gt;
Julie   Nicholson   &lt;span style=&#34;color:#ae81ff&#34;&gt;8826234556&lt;/span&gt;  julie@yahoo.com      F   Ops     &lt;span style=&#34;color:#ae81ff&#34;&gt;2500&lt;/span&gt;
Ana     Johnson     &lt;span style=&#34;color:#ae81ff&#34;&gt;9856422312&lt;/span&gt;  anaj@hotmail.com     F   Ops     &lt;span style=&#34;color:#ae81ff&#34;&gt;2700&lt;/span&gt;
Hari    Jones       &lt;span style=&#34;color:#ae81ff&#34;&gt;8827255666&lt;/span&gt;  harij@yahoo.com      M   Ops     &lt;span style=&#34;color:#ae81ff&#34;&gt;2350&lt;/span&gt;
Victor  Mendez      &lt;span style=&#34;color:#ae81ff&#34;&gt;8826567898&lt;/span&gt;  vicm@hotmail.com     M   Ops     &lt;span style=&#34;color:#ae81ff&#34;&gt;2500&lt;/span&gt;
John    Nicholson   &lt;span style=&#34;color:#ae81ff&#34;&gt;9911556789&lt;/span&gt;  johnn@gmail.com      M   hr      &lt;span style=&#34;color:#ae81ff&#34;&gt;2200&lt;/span&gt;
Billy   Bostick     &lt;span style=&#34;color:#ae81ff&#34;&gt;9911664321&lt;/span&gt;  billyb@yahoo.com     M   lgs     &lt;span style=&#34;color:#ae81ff&#34;&gt;1900&lt;/span&gt;
Sam     Johnson     &lt;span style=&#34;color:#ae81ff&#34;&gt;8856345512&lt;/span&gt;  samj@hotmail.com     F   lgs     &lt;span style=&#34;color:#ae81ff&#34;&gt;2300&lt;/span&gt;
Ginny   Jones       &lt;span style=&#34;color:#ae81ff&#34;&gt;9857123466&lt;/span&gt;  ginnyj@yahoo.com     F   hr      &lt;span style=&#34;color:#ae81ff&#34;&gt;2250&lt;/span&gt;
Emily   Kaur        &lt;span style=&#34;color:#ae81ff&#34;&gt;8826175812&lt;/span&gt;  emilyk@gmail.com     F   Ops     &lt;span style=&#34;color:#ae81ff&#34;&gt;2100&lt;/span&gt;
Amy     Mendez      &lt;span style=&#34;color:#ae81ff&#34;&gt;9857536898&lt;/span&gt;  amym@hotmail.com     F   Ops     &lt;span style=&#34;color:#ae81ff&#34;&gt;2500&lt;/span&gt;
Tina    Jones       &lt;span style=&#34;color:#ae81ff&#34;&gt;8811776612&lt;/span&gt;  tinaj@yahoo.com      F   lgs     &lt;span style=&#34;color:#ae81ff&#34;&gt;2300&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let us match on the following lines: Nicholson and Mendez&lt;/p&gt;

&lt;p&gt;We can use alternation with awk and match on the lines like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/awk-regex-pattern.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we enclosed our regex pattern in &lt;code&gt;/&amp;lt;pattern&amp;gt;/&lt;/code&gt; backslashes and that we used alternation and 4 lines were returned to standard output like expected.&lt;/p&gt;

&lt;h2 id=&#34;using-variables-in-awk&#34;&gt;Using Variables in awk&lt;/h2&gt;

&lt;p&gt;awk has some builtin variables that can be used like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FS&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;FS is the field separator variable which by default is the &amp;lsquo; &amp;rsquo; (space) character&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us look at an example awk command using it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ifconfig en0 inet | awk -F &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/inet/ { print  }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we use the command line option of &lt;code&gt;-F&lt;/code&gt; but we can also use it in an inline awk script like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ifconfig en0 inet | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN { FS=&amp;#34; &amp;#34; } /inet/ { print $2 }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Please read the following GNU docs for &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Built_002din-Variables.html&#34; target=&#34;_blank&#34;&gt;Predefined variables in Awk&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;environment-variables-in-awk&#34;&gt;Environment variables in awk&lt;/h4&gt;

&lt;p&gt;Let us pass some variables into our awk script we will just use the begin block in this example:&lt;/p&gt;

&lt;p&gt;Let us look at the &lt;em&gt;environ.awk&lt;/em&gt; awk script:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#! /usr/local/bin/awk -f
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
BEGIN &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&amp;lt;ARGC; i++&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		print ARGV&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/awk-environ-script.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in this example we used the &lt;code&gt;-f&lt;/code&gt; command line option to specify a file.&lt;/p&gt;

&lt;p&gt;We can also invoke the awk script like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/awk-executable-script.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You will need to change permissions to the script executable with the command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;chmod +x ./usage_scripts/environ.awk&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;string-conversion-in-awk&#34;&gt;String conversion in awk&lt;/h4&gt;

&lt;p&gt;The conversion to string and numeric values occurs automatically in AWK as per demand.&lt;/p&gt;

&lt;p&gt;This means that if a numeric value appears in a string concatenation in awk it is automatically converted to a string.&lt;/p&gt;

&lt;p&gt;Therefore if you want to treat a numeric value as a number you will need to do the following:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;BEGIN &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    num1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
    num2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
    print num1 num2;
    print num1 + num2;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Look at the following terminal run:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/awk-strconv.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice how the first line prints the string 45 and the second line prints out the value of 9.&lt;/p&gt;

&lt;h2 id=&#34;using-arrays-in-awk&#34;&gt;Using arrays in awk&lt;/h2&gt;

&lt;p&gt;Please read the &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Array-Intro.html#Array-Intro&#34; target=&#34;_blank&#34;&gt;Awk GNU Documentation on Arrays&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The awk language provides one-dimensional arrays for storing groups of related strings or numbers. Every awk array must have a name. Array names have the same syntax as variable names; any valid variable name would also be a valid array name. But one name cannot be used in both ways (as an array and as a variable) in the same awk program.&lt;/p&gt;

&lt;p&gt;Arrays in awk superficially resemble arrays in other programming languages, but there are fundamental differences. In awk, it isn&amp;rsquo;t necessary to specify the size of an array before starting to use it. Additionally, any number or string, not just consecutive integers, may be used as an array index.&lt;/p&gt;

&lt;p&gt;In most other languages, arrays must be declared before use, including a specification of how many elements or components they contain. In such languages, the declaration causes a contiguous block of memory to be allocated for that many elements. Usually, an index in the array must be a nonnegative integer. For example, the index zero specifies the first element in the array, which is actually stored at the beginning of the block of memory. Index one specifies the second element, which is stored in memory right after the first element, and so on. It is impossible to add more elements to the array, because it has room only for as many elements as given in the declaration. (Some languages allow arbitrary starting and ending indices—e.g., &amp;lsquo;15 .. 27&amp;rsquo;—but the size of the array is still fixed when the array is declared.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Basically arrays in awk are like a dictionary in Python or map in Golang also known as associative arrays.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#! /usr/local/bin/awk -f
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
BEGIN &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    fruits&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apples&amp;#34;&lt;/span&gt;;
    fruits&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oranges&amp;#34;&lt;/span&gt;;
    fruits&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strawberries&amp;#34;&lt;/span&gt;;
    fruits&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bananas&amp;#34;&lt;/span&gt;;
    fruits&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mangoes&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fruit in fruits&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
        print fruits&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;fruit&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Notice how we used the for &amp;hellip; in operator with arrays in awk to print each value in the awk array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is a sample run of the awk script:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/awk-arrays.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;standard-output-formatting-in-awk&#34;&gt;Standard Output Formatting in Awk&lt;/h2&gt;

&lt;p&gt;You have seen how to use the print command with awk but you can also use the printf command.&lt;/p&gt;

&lt;p&gt;Please read the &lt;a href=&#34;https://en.wikipedia.org/wiki/Printf_format_string&#34; target=&#34;_blank&#34;&gt;printf format string Wikipedia post&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;printf format string refers to a control parameter used by a class of functions in the input/output libraries of C and many other programming languages. The string is written in a simple template language: characters are usually copied literally into the function&amp;rsquo;s output, but format specifiers, which start with a % character, indicate the location and method to translate a piece of data (such as a number) to characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The printf command in awk is very similar to the printf command in C and it has the following operators:&lt;/p&gt;

&lt;p&gt;A format specifier starts with the character &amp;lsquo;%&amp;rsquo; and ends with a format-control letter—it tells the printf statement how to output one item. The format-control letter specifies what kind of value to print. The rest of the format specifier is made up of optional modifiers that control how to print the value, such as the field width. Here is a list of the format-control letters:&lt;/p&gt;

&lt;h4 id=&#34;a-a&#34;&gt;%a, %A&lt;/h4&gt;

&lt;p&gt;A floating point number of the form [-]0xh.hhhhp+-dd (C99 hexadecimal floating point format). For %A, uppercase letters are used instead of lowercase ones.&lt;/p&gt;

&lt;p&gt;NOTE: The current POSIX standard requires support for %a and %A in awk. As far as we know, besides gawk, the only other version of awk that actually implements it is BWK awk. It&amp;rsquo;s use is thus highly nonportable!&lt;/p&gt;

&lt;p&gt;Furthermore, these formats are not available on any system where the underlying C library printf() function does not support them. As of this writing, among current systems, only OpenVMS is known to not support them.&lt;/p&gt;

&lt;h4 id=&#34;c&#34;&gt;%c&lt;/h4&gt;

&lt;p&gt;Print a number as a character; thus, &amp;lsquo;printf &amp;ldquo;%c&amp;rdquo;, 65&amp;rsquo; outputs the letter &amp;lsquo;A&amp;rsquo;. The output for a string value is the first character of the string.&lt;/p&gt;

&lt;p&gt;NOTE: The POSIX standard says the first character of a string is printed. In locales with multibyte characters, gawk attempts to convert the leading bytes of the string into a valid wide character and then to print the multibyte encoding of that character. Similarly, when printing a numeric value, gawk allows the value to be within the numeric range of values that can be held in a wide character. If the conversion to multibyte encoding fails, gawk uses the low eight bits of the value as the character to print.&lt;/p&gt;

&lt;p&gt;Other awk versions generally restrict themselves to printing the first byte of a string or to numeric values within the range of a single byte (0–255). (d.c.)&lt;/p&gt;

&lt;p&gt;Please read the &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Control-Letters.html#Control-Letters&#34; target=&#34;_blank&#34;&gt;awk printf control letters documentation&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;d-i&#34;&gt;%d, %i&lt;/h4&gt;

&lt;p&gt;Print a decimal integer. The two control letters are equivalent. (The &amp;lsquo;%i&amp;rsquo; specification is for compatibility with ISO C.)&lt;/p&gt;

&lt;h4 id=&#34;e-e&#34;&gt;%e, %E&lt;/h4&gt;

&lt;p&gt;Print a number in scientific (exponential) notation. For example:&lt;/p&gt;

&lt;p&gt;printf &amp;ldquo;%4.3e\n&amp;rdquo;, 1950
prints &amp;lsquo;1.950e+03&amp;rsquo;, with a total of four significant figures, three of which follow the decimal point. (The &amp;lsquo;4.3&amp;rsquo; represents two modifiers, discussed in the next subsection.) &amp;lsquo;%E&amp;rsquo; uses &amp;lsquo;E&amp;rsquo; instead of &amp;lsquo;e&amp;rsquo; in the output.&lt;/p&gt;

&lt;h4 id=&#34;f&#34;&gt;%f&lt;/h4&gt;

&lt;p&gt;Print a number in floating-point notation. For example:&lt;/p&gt;

&lt;p&gt;printf &amp;ldquo;%4.3f&amp;rdquo;, 1950
prints &amp;lsquo;1950.000&amp;rsquo;, with a minimum of four significant figures, three of which follow the decimal point. (The &amp;lsquo;4.3&amp;rsquo; represents two modifiers, discussed in the next subsection.)&lt;/p&gt;

&lt;p&gt;On systems supporting IEEE 754 floating-point format, values representing negative infinity are formatted as &amp;lsquo;-inf&amp;rsquo; or &amp;lsquo;-infinity&amp;rsquo;, and positive infinity as &amp;lsquo;inf&amp;rsquo; or &amp;lsquo;infinity&amp;rsquo;. The special “not a number” value formats as &amp;lsquo;-nan&amp;rsquo; or &amp;lsquo;nan&amp;rsquo; (see section Other Stuff to Know).&lt;/p&gt;

&lt;h4 id=&#34;f-1&#34;&gt;%F&lt;/h4&gt;

&lt;p&gt;Like &amp;lsquo;%f&amp;rsquo;, but the infinity and “not a number” values are spelled using uppercase letters.&lt;/p&gt;

&lt;p&gt;The &amp;lsquo;%F&amp;rsquo; format is a POSIX extension to ISO C; not all systems support it. On those that don&amp;rsquo;t, gawk uses &amp;lsquo;%f&amp;rsquo; instead.&lt;/p&gt;

&lt;h4 id=&#34;g-g&#34;&gt;%g, %G&lt;/h4&gt;

&lt;p&gt;Print a number in either scientific notation or in floating-point notation, whichever uses fewer characters; if the result is printed in scientific notation, &amp;lsquo;%G&amp;rsquo; uses &amp;lsquo;E&amp;rsquo; instead of &amp;lsquo;e&amp;rsquo;.&lt;/p&gt;

&lt;h4 id=&#34;o&#34;&gt;%o&lt;/h4&gt;

&lt;p&gt;Print an unsigned octal integer (see section Octal and Hexadecimal Numbers).&lt;/p&gt;

&lt;h4 id=&#34;s&#34;&gt;%s&lt;/h4&gt;

&lt;p&gt;Print a string.&lt;/p&gt;

&lt;h4 id=&#34;u&#34;&gt;%u&lt;/h4&gt;

&lt;p&gt;Print an unsigned decimal integer. (This format is of marginal use, because all numbers in awk are floating point; it is provided primarily for compatibility with C.)&lt;/p&gt;

&lt;h4 id=&#34;x-x&#34;&gt;%x, %X&lt;/h4&gt;

&lt;p&gt;Print an unsigned hexadecimal integer; &amp;lsquo;%X&amp;rsquo; uses the letters &amp;lsquo;A&amp;rsquo; through &amp;lsquo;F&amp;rsquo; instead of &amp;lsquo;a&amp;rsquo; through &amp;lsquo;f&amp;rsquo; (see section Octal and Hexadecimal Numbers).&lt;/p&gt;

&lt;h4 id=&#34;toc_34&#34;&gt;%%&lt;/h4&gt;

&lt;p&gt;Print a single &amp;lsquo;%&amp;rsquo;. This does not consume an argument and it ignores any modifiers.&lt;/p&gt;

&lt;h4 id=&#34;format-modifiers-in-awk&#34;&gt;Format Modifiers in awk&lt;/h4&gt;

&lt;p&gt;Please read the following &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Format-Modifiers.html#Format-Modifiers&#34; target=&#34;_blank&#34;&gt;awk documentation on modifiers with printf&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;awk-printf-example&#34;&gt;Awk printf example&lt;/h6&gt;

&lt;p&gt;Let us look at an example script using printf with awk&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;lt; NF; i++&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i % 2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-5s &amp;#34;&lt;/span&gt;, $i;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%10s &amp;#34;&lt;/span&gt;, $i;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice here that we use the NF builtin variable that is the number of fields we also use the &lt;code&gt;-&lt;/code&gt; format modifier to left justify any even numbered fields 2, 4, 6, etc. and then use &lt;code&gt;%10&lt;/code&gt; to right justify strings&lt;/p&gt;

&lt;p&gt;Here is a sample run of the script:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/awk-printf-example.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;control-flow-in-awk&#34;&gt;Control flow in awk&lt;/h2&gt;

&lt;p&gt;As you have seen with awk there is control flow operators such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;for ... in&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt; and so on&lt;/p&gt;

&lt;p&gt;We can use relational operators such as the and operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and the or operator &lt;code&gt;||&lt;/code&gt; in awk.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can also use break and continue statements in awk and while loops.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let us look at a sample script where we use a while loop and if statements.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &amp;lt; NF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i % 2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            print $i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; Ding Dong&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            print $i;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        i++;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a sample run of the script using a data file that looks like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;honda           civic       2005        60000       3
chevy           silverado   2016        33000       2
chevy           tavera      1999        10000       4
toyota          corolla     1995        95000       2
ford            escape      2012        80000       1
honda           accord      2000        60000       2
fiat            punto       2007        45000       3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/awk-control-flow1.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;functions-in-awk&#34;&gt;Functions in awk&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Awk has both builtin functions that you can utilize as well as user defined function that you can define yourself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Please check out the &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html#Built_002din&#34; target=&#34;_blank&#34;&gt;gnu documentation on awk builtin functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a list of builtin functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Numeric Functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions that work with numbers, including int(), sin() and rand().&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;String Functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions for string manipulation, such as split(), match() and sprintf().&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I/O Functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions for files and shell commands.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Time Functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions for dealing with timestamps.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bitwise Functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions for bitwise operations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type Functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions for type information.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I18N Functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions for string translation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;One thing of note is that some of the builtin functions only work for the GNU Implementation of awk and not BSD Awk or other awk variants.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example program using builtin functions in awk and user defined functions.&lt;/p&gt;

&lt;h4 id=&#34;user-defined-awk-functions&#34;&gt;User Defined Awk functions&lt;/h4&gt;

&lt;p&gt;We can create functions in awk with the following syntax&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; someFunc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg1, argn&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    ......
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; someArg
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h6 id=&#34;awk-builtin-function-and-user-defined-functions-example&#34;&gt;Awk Builtin Function and User Defined Functions example&lt;/h6&gt;

&lt;p&gt;In the following example we use builtin awk functions and user defined ones&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#! /usr/local/bin/awk -f
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
BEGIN &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Numeric Functions examples&lt;/span&gt;
    print sqrt&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
    print rand&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;# String Functions examples&lt;/span&gt;
    nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;;
    nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;;
    nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;;
    asort&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nums&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;num in nums&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        print nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;num&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; i++&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i+1;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# globally subsitute each record that matches on honda to mercury&lt;/span&gt;
    gsub&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;/honda/, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mercury&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;; print;
    split&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;$6, strings, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
    print strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; average&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; length&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;; i++&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum / length&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

END &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    avg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; average&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
    print avg;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/awk-functions.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Here is a sample run of our awk script notice that we used and END block here.&lt;/p&gt;

&lt;h4 id=&#34;startup-and-cleanup-actions&#34;&gt;Startup and Cleanup Actions&lt;/h4&gt;

&lt;p&gt;You can use the BEGIN block in awk for any startup actions and the END block for any cleanup actions in awk.&lt;/p&gt;

&lt;p&gt;the body block will operate on 1 or more records which consist of 1 or more fields in a record.&lt;/p&gt;

&lt;p&gt;Notice that the BEGIN and END blocks will be done once although you can define multiple BEGIN and END blocks depending on how elaborate of an awk script you are writing.&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;Please read the official awk guide on &lt;a href=&#34;https://www.gnu.org/software/gawk/manual/html_node/&#34; target=&#34;_blank&#34;&gt;GNU Awk Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a modern and current book on awk I would suggest reading this Packt Publishing Book &lt;a href=&#34;https://www.packtpub.com/big-data-and-business-intelligence/learning-awk-programming&#34; target=&#34;_blank&#34;&gt;Learning Awk Programming&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;contact-information&#34;&gt;Contact Information&lt;/h2&gt;

&lt;p&gt;If you like this post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt; for more related type posts.&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Lucene Queries</title>
      <link>https://www.marcelbelmont.com/post/using-lucene-queries/</link>
      <pubDate>Fri, 24 May 2019 20:20:59 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/using-lucene-queries/</guid>
      <description>

&lt;h1 id=&#34;apache-lucene&#34;&gt;Apache Lucene&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Lucene&#34; target=&#34;_blank&#34;&gt;Apache Lucene Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Apache Lucene is a free and open-source information retrieval software library, originally written completely in Java by Doug Cutting. It is supported by the Apache Software Foundation and is released under the Apache Software License.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;common-uses-and-features-of-lucene&#34;&gt;Common Uses and Features of Lucene&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Lucene#Features_and_common_use&#34; target=&#34;_blank&#34;&gt;Features and Common Use&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While suitable for any application that requires full text indexing and searching capability, Lucene has been widely recognized for its utility in the implementation of Internet search engines and local, single-site searching.&lt;/p&gt;

&lt;p&gt;Lucene includes a feature to perform a fuzzy search based on edit distance.&lt;/p&gt;

&lt;p&gt;Lucene has also been used to implement recommendation systems. For example, Lucene&amp;rsquo;s &amp;lsquo;MoreLikeThis&amp;rsquo; Class can generate recommendations for similar documents. In a comparison of the term vector-based similarity approach of &amp;lsquo;MoreLikeThis&amp;rsquo; with citation-based document similarity measures, such as Co-citation and Co-citation Proximity Analysis Lucene&amp;rsquo;s approach excelled at recommending documents with very similar structural characteristics and more narrow relatedness. In contrast, citation-based document similarity measures tended to be more suitable for recommending more broadly related documents, meaning citation-based approaches may be more suitable for generating serendipitous recommendations, as long as documents to be recommended contain in-text citations.&lt;/p&gt;

&lt;p&gt;At the core of Lucene&amp;rsquo;s logical architecture is the idea of a document containing fields of text. This flexibility allows Lucene&amp;rsquo;s API (Application Programming Interface) to be independent of the file format. Text from PDFs, HTML, Microsoft Word, Mind Maps, and OpenDocument documents, as well as many others (except images), can all be indexed as long as their textual information can be extracted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;lucene-based-projects&#34;&gt;Lucene-based projects&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Lucene#Lucene-based_projects&#34; target=&#34;_blank&#34;&gt;Lucene-based projects&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apache Nutch — provides web crawling and HTML parsing[citation needed]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apache Solr — an enterprise search server.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compass — the predecessor to Elasticsearch&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CrateDB — open source, distributed SQL database built on Lucene&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DocFetcher — a multiplatform desktop search application&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Elasticsearch — an enterprise search server released in 2010.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kinosearch — a search engine written in Perl and C and a loose port of Lucene. The Socialtext wiki software uses this search engine, and so does the MojoMojo wiki. It is also used by the Human
Metabolome Database (HMDB) and the Toxin and Toxin-Target Database (T3DB).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Swiftype — an enterprise search startup based on Lucene.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;lucene-queries-in-action&#34;&gt;Lucene Queries in Action&lt;/h4&gt;

&lt;p&gt;We will look at using lucene queries with Auth0 apis and we will use curl and bash to make rest calls.&lt;/p&gt;

&lt;p&gt;Here is a bash script that gets API Token from Auth0 Management API and then uses user search api:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#! /usr/local/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --silent &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --request POST &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PERSONAL_AUTH0_DOMAIN&lt;span style=&#34;color:#e6db74&#34;&gt;/oauth/token&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content-type: application/x-www-form-urlencoded&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --data &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;audience=&lt;/span&gt;$PERSONAL_AUTH0_AUDIENCE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;grant_type=client_credentials&amp;amp;client_id=&lt;/span&gt;$PERSONAL_AUTH0_CLIENTID&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;client_secret=&lt;/span&gt;$PERSONAL_AUTH0_CLIENT_SECRET&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.access_token&amp;#39;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^&amp;#34;//g;s/&amp;#34;$//g&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

curl --request GET &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PERSONAL_AUTH0_DOMAIN&lt;span style=&#34;color:#e6db74&#34;&gt;/api/v2/users?q=name:jean*&amp;amp;search_engine=v3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: Bearer &lt;/span&gt;$TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we use a feature in Lucene Queries called: &lt;a href=&#34;https://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Wildcard%20Searches&#34; target=&#34;_blank&#34;&gt;Wildcard matching&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This lucene query will search the auth0 user search api for any user that has name starting with &amp;ldquo;jean&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Here is the request payload:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jean-Marcel Belmont&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picture&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://pbs.twimg.com/profile_images/960991755108868097/HvHXkEYN_normal.jpg&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Golang Programmer, Rustlang Enthusiast, JavaScript and NodeJS Artisan, Reverse Engineering Noob, Published Author, Christian, Father, Engineer @FoodLogiq&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lang&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;North Carolina, USA&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;screen_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jbelmont80&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://t.co/GOLxaCPccZ&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;updated_at&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-01-19T1808.722Z&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;user_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twitter|2921946821&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nickname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jean-Marcel Belmont&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identities&amp;#34;&lt;/span&gt;: [
      {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;provider&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twitter&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;user_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2921946821&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;connection&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twitter&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;isSocial&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
      }
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;created_at&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-01-19T1808.722Z&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_login&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-01-19T1808.720Z&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_ip&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;174.110.45.244&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;logins_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  },
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I left out some entries but you get the idea of what wildcard matching.&lt;/p&gt;

&lt;p&gt;This is analogous to matching you would get with grep like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/grep-wildcard-example.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;The next example lucene query uses keyword matching with the &lt;em&gt;AND&lt;/em&gt; operator:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl --request GET &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PERSONAL_AUTH0_DOMAIN&lt;span style=&#34;color:#e6db74&#34;&gt;/api/v2/users?q=name:jean*%20AND%20nickname:marcelbelmont&amp;amp;search_engine=v3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: Bearer &lt;/span&gt;$TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I percent encoded the space with %20 but notice that the query is now:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;?q&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name:jean AND nickname:marcelbelmont&amp;amp;search_engine&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can even group queries and use an OR operator with lucene syntax:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl --request GET &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PERSONAL_AUTH0_DOMAIN&lt;span style=&#34;color:#e6db74&#34;&gt;/api/v2/users?%28q=name:jean*%20AND%20nickname:marcelbelmont%29%20OR%20nickname:Jean-Marcel%20Belmont&amp;amp;search_engine=v3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: Bearer &lt;/span&gt;$TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that in this query I percent encoded the left parenthesis &amp;ldquo;(&amp;rdquo; &amp;ldquo;%28&amp;rdquo; and right parenthesis &amp;ldquo;%29&amp;rdquo; and percent encoded spaces &amp;ldquo; &amp;rdquo; &amp;ldquo;%20&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Here is the query with no percent encoding:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;?&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;q&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name:jean* AND nickname:marcelbelmont&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; OR nickname:Jean-Marcel+Belmont&amp;amp;search_engine&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use range queries in lucene here is a possible auth0 query with ranges:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl --request GET &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PERSONAL_AUTH0_DOMAIN&lt;span style=&#34;color:#e6db74&#34;&gt;/api/v2/users?q=last_login=%5B2018-03-06+TO+2019-01-19%5D&amp;amp;search_engine=v3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorization: Bearer &lt;/span&gt;$TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the query with no percent encoding:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;?q&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;last_login&lt;span style=&#34;color:#f92672&#34;&gt;=[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;-03-06 TO &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-19&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&amp;amp;search_engine&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is a whole lot more that you can do with lucene query syntax which you can read at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lucene.apache.org/java/3_5_0/queryparsersyntax.html&#34; target=&#34;_blank&#34;&gt;Query Parser Syntax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt; for more related type posts.&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Patches in Software</title>
      <link>https://www.marcelbelmont.com/post/using-patches-in-git/</link>
      <pubDate>Sun, 21 Apr 2019 09:38:33 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/using-patches-in-git/</guid>
      <description>

&lt;h1 id=&#34;according-to-wikipedia-a-patch-in-software-is-defined-as&#34;&gt;According to Wikipedia a Patch in software is defined as:&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A patch is a set of changes to a computer program or its supporting data designed to update, fix, or improve it. This includes fixing security vulnerabilities and other bugs, with such patches usually being called bugfixes or bug fixes,[better source needed] and improving the usability or performance. Although meant to fix problems, poorly designed patches can sometimes introduce new problems (see software regressions). In some special cases updates may knowingly break the functionality or disable a device, for instance, by removing components for which the update provider is no longer licensed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;types-of-patches-in-software&#34;&gt;Types of Patches in Software&lt;/h2&gt;

&lt;p&gt;We will be looking at source code patches in this blog post but there is also other types of patches such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Patch_%28computing%29#Binary_patches&#34; target=&#34;_blank&#34;&gt;Binary Patches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;In software patches a patch is usually represented between a difference (diff) between 2 code files.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;software-patch-variants&#34;&gt;Software Patch Variants&lt;/h4&gt;

&lt;p&gt;According to Wikipedia there are several software patches:&lt;/p&gt;

&lt;h6 id=&#34;hotfix&#34;&gt;Hotfix&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;A hotfix or Quick Fix Engineering update (QFE update) is a single, cumulative package that includes information (often in the form of one or more files) that is used to address a problem in a software product (i.e., a software bug). Typically, hotfixes are made to address a specific customer situation. Microsoft once used this term but has stopped in favor of new terminology: General Distribution Release (GDR) and Limited Distribution Release (LDR). Blizzard Entertainment, however, defines a hotfix as &amp;ldquo;a change made to the game deemed critical enough that it cannot be held off until a regular content patch&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;point-release&#34;&gt;Point release&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;A point release is a minor release of a software project, especially one intended to fix bugs or do small cleanups rather than add significant features. Often, there are too many bugs to be fixed in a single major or minor release, creating a need for a point release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;program-temporary-fix&#34;&gt;Program temporary fix&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;Program temporary fix or Product temporary fix (PTF), depending on date, is the standard IBM terminology for a single bug fix, or group of fixes, distributed in a form ready to install for customers. A PTF was sometimes referred to as a &amp;ldquo;ZAP&amp;rdquo; see Customers sometime explain the acronym in a tongue-in-cheek manner as permanent temporary fix or more practically probably this fixes, because they have the option to make the PTF a permanent part of the operating system if the patch fixes the problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;security-patches&#34;&gt;Security patches&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;A security patch is a change applied to an asset to correct the weakness described by a vulnerability. This corrective action will prevent successful exploitation and remove or mitigate a threat&amp;rsquo;s capability to exploit a specific vulnerability in an asset. Patch management is a part of Vulnerability management - the cyclical practice of identifying, classifying, remediating, and mitigating vulnerabilities.&lt;/p&gt;

&lt;p&gt;Security patches are the primary method of fixing security vulnerabilities in software. Currently Microsoft releases its security patches once a month, and other operating systems and software projects have security teams dedicated to releasing the most reliable software patches as soon after a vulnerability announcement as possible. Security patches are closely tied to responsible disclosure.&lt;/p&gt;

&lt;p&gt;These security patches are critical to ensure that business process does not get affected. In 2017, companies were struck by a ransomware called WannaCry which encrypts files in certain versions of Microsoft Windows and demands a ransom via BitCoin. In response to this, Microsoft released a patch which stops the ransomware from running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;service-pack&#34;&gt;Service pack&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;A service pack or SP or a feature pack (FP) comprises a collection of updates, fixes, or enhancements to a software program delivered in the form of a single installable package. Companies often release a service pack when the number of individual patches to a given program reaches a certain (arbitrary) limit, or the software release has shown to be stabilized with a limited number of remaining issues based on users&amp;rsquo; feedback and bug tracking such as bugzilla. In large software applications such as office suites, operating systems, database software, or network management, it is not uncommon to have a service pack issued within the first year or two of a product&amp;rsquo;s release. Installing a service pack is easier and less error-prone than installing many individual patches, even more so when updating multiple computers over a network, where service packs are common.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;unofficial-patches&#34;&gt;Unofficial patches&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;An unofficial patch is a non-commercial patch for a commercial software created by a third party instead of the original developer. Similar to an ordinary patch, it alleviates bugs or shortcomings. Examples are security fixes by security specialists when an official patch by the software producers itself takes too long. Other examples are unofficial patches created by the game community of a video game which became unsupported abandonware.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;creating-patches-in-git&#34;&gt;Creating Patches in Git&lt;/h2&gt;

&lt;p&gt;We can generate patch files in a couple of different ways and there are several different commands associated with using patches in git:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-am&#34; target=&#34;_blank&#34;&gt;git am manual page&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; git help am

git-am - Apply a series of patches from a mailbox

SYNOPSIS
       git am &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--signoff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--keep&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;keep-cr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;utf8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;3way&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--interactive&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--committer-date-is-author-date&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ignore-date&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ignore-space-change | --ignore-whitespace&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--whitespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;option&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-C&amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-p&amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--directory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;dir&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--exclude&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--include&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--reject&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-q | --quiet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;scissors&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-S&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;keyid&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--patch-format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;format&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&amp;lt;mbox&amp;gt; | &amp;lt;Maildir&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
       git am &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;--continue | --skip | --abort | --quit | --show-current-patch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;


DESCRIPTION
       Splits mail messages in a mailbox into commit log message, authorship information and patches, and applies them to the
       current branch.
....................................................................................................
....................................................................................................
....................................................................................................&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-apply&#34; target=&#34;_blank&#34;&gt;git apply manual page&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME
       git-apply - Apply a patch to files and/or to the index

SYNOPSIS
       git apply &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--stat&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--numstat&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--summary&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--check&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--index | --intent-to-add&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--3way&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--apply&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--no-add&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--build-fake-ancestor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;file&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-R | --reverse&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--allow-binary-replacement | --binary&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--reject&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-p&amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-C&amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--inaccurate-eof&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--recount&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--cached&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ignore-space-change | --ignore-whitespace&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--whitespace&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;nowarn|warn|fix|error|error-all&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--exclude&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--include&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--directory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;root&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--verbose&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--unsafe-paths&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;patch&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;


DESCRIPTION
       Reads the supplied diff output &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i.e. &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a patch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; and applies it to files. When running from a subdirectory in a
       repository, patched paths outside the directory are ignored. With the --index option the patch is also applied to the
       index, and with the --cached option the patch is only applied to the index. Without these options, the command applies
       the patch only to files, and does not require them to be in a Git repository.

       This command applies the patch but does not create a commit. Use git-am&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; to create commits from patches generated by
       git-format-patch&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; and/or received by email.
....................................................................................................
....................................................................................................
....................................................................................................&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-cherry-pick&#34; target=&#34;_blank&#34;&gt;git cherry-pick manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME
       git-cherry-pick - Apply the changes introduced by some existing commits

SYNOPSIS
       git cherry-pick &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--edit&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-m parent-number&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-s&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-x&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                         &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-S&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;keyid&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &amp;lt;commit&amp;gt;...
       git cherry-pick --continue
       git cherry-pick --quit
       git cherry-pick --abort


DESCRIPTION
       Given one or more existing commits, apply the change each one introduces, recording a new commit &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each. This requires
       your working tree to be clean &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;no modifications from the HEAD commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

       When it is not obvious how to apply a change, the following happens:

        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;. The current branch and HEAD pointer stay at the last commit successfully made.

        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;. The CHERRY_PICK_HEAD ref is set to point at the commit that introduced the change that is difficult to apply.

        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;. Paths in which the change applied cleanly are updated both in the index file and in your working tree.

        &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;. For conflicting paths, the index file records up to three versions, as described in the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TRUE MERGE&amp;#34;&lt;/span&gt; section of git-
           merge&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;. The working tree files will include a description of the conflict bracketed by the usual conflict markers
           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;lt; and &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;.

        &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;. No other modifications are made.

       See git-merge&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; some hints on resolving such conflicts.
....................................................................................................
....................................................................................................
....................................................................................................&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-diff&#34; target=&#34;_blank&#34;&gt;git diff manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME
git-diff - Show changes between commits, commit and working tree, etc

SYNOPSIS
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;commit&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; --cached &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;commit&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;blob&amp;gt; &amp;lt;blob&amp;gt;
git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; --no-index &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;path&amp;gt; &amp;lt;path&amp;gt;
DESCRIPTION
Show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, changes between two blob objects, or changes between two files on disk.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This form is to view the changes you made relative to the index &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;staging area &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the next commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;. In other words, the differences are what you could tell Git to further add to the index but you still haven’t. You can stage these changes by using git-add&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; --no-index &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;path&amp;gt; &amp;lt;path&amp;gt;
This form is to compare the given two paths on the filesystem. You can omit the --no-index option when running the command in a working tree controlled by Git and at least one of the paths points outside the working tree, or when running the command outside a working tree controlled by Git.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; --cached &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;commit&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This form is to view the changes you staged &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the next commit relative to the named &amp;lt;commit&amp;gt;. Typically you would want comparison with the latest commit, so &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not give &amp;lt;commit&amp;gt;, it defaults to HEAD. If HEAD does not exist &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e.g. unborn branches&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; and &amp;lt;commit&amp;gt; is not given, it shows all staged changes. --staged is a synonym of --cached.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This form is to view the changes you have in your working tree relative to the named &amp;lt;commit&amp;gt;. You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip of a different branch.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This is to view the changes between two arbitrary &amp;lt;commit&amp;gt;.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the same effect as using HEAD instead.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;...&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;…​&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting at a common ancestor of both &amp;lt;commit&amp;gt;. &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git diff A...B&amp;#34;&lt;/span&gt; is equivalent to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git diff &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git merge-base A B&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; B&amp;#34;&lt;/span&gt;. You can omit any one of &amp;lt;commit&amp;gt;, which has the same effect as using HEAD instead.

Just in &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; you are doing something exotic, it should be noted that all of the &amp;lt;commit&amp;gt; in the above description, except in the last two forms that use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt; notations, can be any &amp;lt;tree&amp;gt;.

For a more complete list of ways to spell &amp;lt;commit&amp;gt;, see &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPECIFYING REVISIONS&amp;#34;&lt;/span&gt; section in gitrevisions&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;. However, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;diff&amp;#34;&lt;/span&gt; is about comparing two endpoints, not ranges, and the range notations &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt;&amp;#34;&lt;/span&gt; and &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;commit&amp;gt;...&amp;lt;commit&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not mean a range as defined in the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPECIFYING RANGES&amp;#34;&lt;/span&gt; section in gitrevisions&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.

git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;blob&amp;gt; &amp;lt;blob&amp;gt;
This form is to view the differences between the raw contents of two blob objects.
....................................................................................................
....................................................................................................
....................................................................................................&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-format-patch&#34; target=&#34;_blank&#34;&gt;git format-patch manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME
git-format-patch - Prepare patches &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e-mail submission

SYNOPSIS
git format-patch &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-k&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;-o|--output-directory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &amp;lt;dir&amp;gt; | --stdout&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--no-thread | --thread&lt;span style=&#34;color:#f92672&#34;&gt;[=&lt;/span&gt;&amp;lt;style&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;--attach|--inline&lt;span style=&#34;color:#f92672&#34;&gt;)[=&lt;/span&gt;&amp;lt;boundary&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; | --no-attach&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-s | --signoff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--signature&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;signature&amp;gt; | --no-signature&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--signature-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;file&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-n | --numbered | -N | --no-numbered&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--start-number &amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--numbered-files&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--in-reply-to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Message-Id&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--suffix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;.&amp;lt;sfx&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--ignore-if-in-upstream&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--rfc&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--subject-prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Subject-Prefix&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;--reroll-count|-v&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &amp;lt;n&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;email&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--cc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;email&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;no-&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;cover-letter&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--quiet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--notes&lt;span style=&#34;color:#f92672&#34;&gt;[=&lt;/span&gt;&amp;lt;ref&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--interdiff&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;previous&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--range-diff&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;previous&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--creation-factor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;percent&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--progress&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;common diff options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
		   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &amp;lt;since&amp;gt; | &amp;lt;revision range&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
DESCRIPTION
Prepare each commit with its patch in one file per commit, formatted to resemble UNIX mailbox format. The output of this command is convenient &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e-mail submission or &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; use with git am.

There are two ways to specify which commits to operate on.

A single commit, &amp;lt;since&amp;gt;, specifies that the commits leading to the tip of the current branch that are not in the history that leads to the &amp;lt;since&amp;gt; to be output.

Generic &amp;lt;revision range&amp;gt; expression &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;see &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPECIFYING REVISIONS&amp;#34;&lt;/span&gt; section in gitrevisions&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; means the commits in the specified range.

The first rule takes precedence in the &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; of a single &amp;lt;commit&amp;gt;. To apply the second rule, i.e., format everything since the beginning of history up &lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; &amp;lt;commit&amp;gt;, use the --root option: git format-patch --root &amp;lt;commit&amp;gt;. If you want to format only &amp;lt;commit&amp;gt; itself, you can &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this with git format-patch -1 &amp;lt;commit&amp;gt;.

By default, each output file is numbered sequentially from &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, and uses the first line of the commit message &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;massaged &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pathname safety&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; as the filename. With the --numbered-files option, the output file names will only be numbers, without the first line of the commit appended. The names of the output files are printed to standard output, unless the --stdout option is specified.

If -o is specified, output files are created in &amp;lt;dir&amp;gt;. Otherwise they are created in the current working directory. The default path can be set with the format.outputDirectory configuration option. The -o option takes precedence over format.outputDirectory. To store patches in the current working directory even when format.outputDirectory points elsewhere, use -o ..

By default, the subject of a single patch is &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[PATCH] &amp;#34;&lt;/span&gt; followed by the concatenation of lines from the commit message up to the first blank line &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;see the DISCUSSION section of git-commit&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;.

When multiple patches are output, the subject prefix will instead be &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[PATCH n/m] &amp;#34;&lt;/span&gt;. To force &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1 to be added &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a single patch, use -n. To omit patch numbers from the subject, use -N.

If given --thread, git-format-patch will generate In-Reply-To and References headers to make the second and subsequent patch mails appear as replies to the first mail; this also generates a Message-Id header to reference.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are other related git commands for working with commits that are related to patches such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-rebase&#34; target=&#34;_blank&#34;&gt;git rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-revert&#34; target=&#34;_blank&#34;&gt;git revert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;We will not go over these in this blog post.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;using-git-diff-to-generate-a-patch-file&#34;&gt;Using git diff to generate a patch file&lt;/h4&gt;

&lt;p&gt;We can use the &lt;em&gt;git diff&lt;/em&gt; command to generate a patch file*&lt;/p&gt;

&lt;p&gt;Here is a sample session where we create patch file from the current changes in the repository. I show the current changes with an alias for &lt;em&gt;git status -s&lt;/em&gt; command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-diff.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;using-git-format-patch-command-to-generate-a-series-of-patches-in-patches-directory&#34;&gt;Using git format-patch command to generate a series of patches in patches directory&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Prepare each commit with its patch in one file per commit, formatted to resemble UNIX mailbox format. The output of this command is convenient for e-mail submission or for use with git am.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will use the &lt;em&gt;git format-patch&lt;/em&gt; command to generate patches against a destination branch of master.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-format-patches.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that the patches file looks a little bit like an email as this command is based on the UNIX mailbox format.&lt;/p&gt;

&lt;p&gt;Notice that in this next session we create the patches directory in the parent directory:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-format-patches-other-dir.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can create a patches directory with a name for each repo with a command like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/create-patches-dir.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now we can create a patches list with this directory structure like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-format-patches-structure.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h4 id=&#34;git-am-command&#34;&gt;git am command&lt;/h4&gt;

&lt;p&gt;Now we can checkout back to the master branch and apply these changes by using &lt;em&gt;git am&lt;/em&gt; command like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-am-applied.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in the screenshot below that our patches were replayed on top of existing commits:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-replay-ontop.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;The difference between the &lt;a href=&#34;https://git-scm.com/docs/git-am&#34; target=&#34;_blank&#34;&gt;git am command&lt;/a&gt; and the &lt;a href=&#34;https://git-scm.com/docs/git-apply&#34; target=&#34;_blank&#34;&gt;git apply command&lt;/a&gt; is that the &lt;em&gt;git am&lt;/em&gt; command will apply the commits and the &lt;em&gt;git apply&lt;/em&gt; will only apply changes to the file instead of committing all though this is not the only difference.&lt;/p&gt;

&lt;h4 id=&#34;git-apply-command&#34;&gt;git apply command&lt;/h4&gt;

&lt;p&gt;There are some advantages to using the &lt;em&gt;git apply&lt;/em&gt; command because we can check whether a patch file is okay and we can reverse a git apply change as well.&lt;/p&gt;

&lt;p&gt;In the following session we will create a file change and use the &lt;em&gt;git diff&lt;/em&gt; command to generate our patch file, then we will checkout back to master branch and try to apply local changes but first check the patch file for validity.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/git-diff-apply-check-flow.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in this session that the &lt;em&gt;&amp;ndash;check&lt;/em&gt; flag complained since we were trying to apply changes that already existed but were never committed into the branch. This flow is useful to do before applying a patch change.&lt;/p&gt;

&lt;h4 id=&#34;using-git-diff-command-and-patch-command-to-apply-changes&#34;&gt;using git diff command and patch command to apply changes&lt;/h4&gt;

&lt;p&gt;We can create a new file based off of an original file like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp docs/mongodb_indexes_partII.md docs/mongodb_indexes_partII_new.md

&lt;span style=&#34;color:#75715e&#34;&gt;## Then we will generate the diff between these 2 files.&lt;/span&gt;
diff -u docs/mongodb_indexes_partII.md docs/mongodb_indexes_partII_new.md &amp;gt; ../patches/nosql-workshop/diff-between-two-files.patch

&lt;span style=&#34;color:#75715e&#34;&gt;# Next we will create patch to the old file like this&lt;/span&gt;
patch docs/mongodb_indexes_partII.md ../patches/nosql-workshop/diff-between-two-files.patch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that we applied the changes that we made to new file to the old file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are some distinct disadvantages to using the patch commmand and it is generally better to use the git apply command in git instead.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using the patch command can leave your working directory in a bad state in a bad patch and also the &lt;em&gt;git apply&lt;/em&gt; command handles file adds, deletes, and renames if they&amp;rsquo;re described in the git diff format.&lt;/p&gt;

&lt;p&gt;If you like this post then please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt; for more related type posts.&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging Rust With Lldb</title>
      <link>https://www.marcelbelmont.com/post/debugging-rust-with-lldb/</link>
      <pubDate>Tue, 26 Mar 2019 19:25:45 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/debugging-rust-with-lldb/</guid>
      <description>

&lt;p&gt;In this blog post I go over using lldb with rust and how get setup with lldb on Mac OS X.&lt;/p&gt;

&lt;h2 id=&#34;installing-lldb&#34;&gt;Installing lldb&lt;/h2&gt;

&lt;p&gt;Read the official guide link on installing &lt;a href=&#34;https://lldb.llvm.org/download.html&#34; target=&#34;_blank&#34;&gt;lldb&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have a Mac then you should already have lldb installed.&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/rust-lldb-version.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that lldb reports the version of lldb and the version of swift.&lt;/p&gt;

&lt;h2 id=&#34;various-ways-of-running-summation-program&#34;&gt;Various ways of Running Summation Program&lt;/h2&gt;

&lt;p&gt;Let us look at a simple command line rust program that computes the summation provided as input.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::env;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; args: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; env::args().collect();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;args[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;..];

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numbers: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numbers
        .iter()
        .map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;num&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; num.parse().unwrap())
        .collect();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; summation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; summation_with_fold(numbers.clone());

    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;summation_with_fold is {}&amp;#34;&lt;/span&gt;, summation);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; summation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; summation_with_loop(numbers.clone());

    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;summation_with_loop is {}&amp;#34;&lt;/span&gt;, summation);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;summation_with_loop&lt;/span&gt;(numbers: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; numbers.iter() {
        sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; num;
    }
    sum
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;summation_with_fold&lt;/span&gt;(numbers: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f32&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numbers
        .iter()
        .fold(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;sum, val&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; val);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can run this program using the rust playground but we cannot supply argument like we can in a shell session:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/rust-playground.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can run this program using cargo run like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cargo-run.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can also run our program by using the compiled binary executable like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/target-debug-run.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;running-summation-program-with-lldb&#34;&gt;Running summation program with lldb&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We can run our rust program with the rust-lldb executable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is the rust lldb bash script that gets invoked:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Exit if anything fails&lt;/span&gt;
set -e

&lt;span style=&#34;color:#75715e&#34;&gt;# Find out where to look for the pretty printer Python module&lt;/span&gt;
RUSTC_SYSROOT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;rustc --print sysroot&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Find the host triple so we can find lldb in rustlib.&lt;/span&gt;
host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;rustc -vV | sed -n -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^host: //p&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;

lldb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lldb
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$RUSTC_SYSROOT&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/rustlib/&lt;/span&gt;$host&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/lldb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    lldb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$RUSTC_SYSROOT&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/rustlib/&lt;/span&gt;$host&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/lldb&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    LLDB_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$lldb&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; --version &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&amp;gt;/dev/null | head -1 | cut -d. -f1&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$LLDB_VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lldb-350&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;***&amp;#34;&lt;/span&gt;
	echo &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARNING: This version of LLDB has known issues with Rust and cannot \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;display the contents of local variables!&amp;#34;&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;***&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Prepare commands that will be loaded before any file on the command line has been loaded&lt;/span&gt;
script_import&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;command script import \&amp;#34;&lt;/span&gt;$RUSTC_SYSROOT&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/rustlib/etc/lldb_rust_formatters.py\&amp;#34;&amp;#34;&lt;/span&gt;
category_definition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type summary add --no-value --python-function lldb_rust_formatters.print_val -x \&amp;#34;.*\&amp;#34; --category Rust&amp;#34;&lt;/span&gt;
category_enable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type category enable Rust&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Call LLDB with the commands added to the argument list&lt;/span&gt;
exec &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$lldb&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; --one-line-before-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$script_import&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --one-line-before-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$category_definition&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --one-line-before-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$category_enable&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you install rust this bash script gets bundled with cargo:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/rust-lldb-path.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Not let us run our summation binary executable using rust-lldb like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/rust-lldb-first-run.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us simply run summation with no arguments:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/lldb-run-no-args.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we get 0 since we didn&amp;rsquo;t provide any arguments.&lt;/p&gt;

&lt;p&gt;Let us re run again no pun intended with args now!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/run-with-args.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us run the help on the b command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/help-break-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now let us set a breakpoint in lldb on line 8 and 13:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/setting-breakpoints-lldb.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that we did it the long and then the short way in lldb.&lt;/p&gt;

&lt;p&gt;We can list the breakpoints in lldb like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/list-breakpoints-lldb.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now let us rerun the main.rs file and notice that the breakpoint is hit on line 8 now!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/hit-breakpoint-lldb.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us continue to the next breakpoint typing the c command:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/continue-with-lldb.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us step into the summation_with_fold function now using lldb using a couple of commands:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/thread-step-into.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can dynamically change the value of a variable in the summation_with_fold function like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/dyn-expr-keyword.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can look at the value of the variable now like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/print-vars.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;The po command stands for print object, p stands for print and frame variable is the current stack frame!&lt;/p&gt;

&lt;p&gt;Next let us step out of the summation_with_fold function now.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/step-out-stack.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Let us continue and see the current values:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/current-vars-value.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice how the summation_with_fold has the value 53 that we set dynamically.&lt;/p&gt;

&lt;p&gt;We can unset our breakpoints like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/delete-breakpoint.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;using-help-in-lldb&#34;&gt;Using help in lldb&lt;/h2&gt;

&lt;p&gt;You can find about the available command in lldb by running help:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/lldb-debugger-help.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You can also get help on each particular command by running help like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;help subcommand&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/lldb-help-command.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Some commands have subcommands like the breakpoint command which you can get help on:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/lldb-subcommand-help.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Some commands have aliases that you can run like b for breakpoint and more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A great feature of the lldb debugger is that there is autocomplete that you can invoke by simply pressing the tab character&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All in all I would say rust-lldb is a great addition to debugging rust programs.&lt;/p&gt;

&lt;p&gt;There is a whole more you can do with lldb and please read the official &lt;a href=&#34;https://lldb.llvm.org/tutorial.html&#34; target=&#34;_blank&#34;&gt;lldb documentation for more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Rust Commandline Applications</title>
      <link>https://www.marcelbelmont.com/talk/writing-rust-commandline-apps/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/talk/writing-rust-commandline-apps/</guid>
      <description>&lt;p&gt;A talk centered on writing command line applications in Rustlang. I showcased how to write unit tests in Rust. I showed to write different types of command line applications and how to debug them using rust-lldb and more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With Mongodb Part 2</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb-part2/</link>
      <pubDate>Wed, 20 Feb 2019 18:38:15 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-mongodb-part2/</guid>
      <description>

&lt;p&gt;In this second blog post I go over how to loads scripts in the mongo shell and how to automate tasks in mongo shell&lt;/p&gt;

&lt;h2 id=&#34;loading-scripts-in-the-mongo-shell&#34;&gt;Loading scripts in the Mongo Shell&lt;/h2&gt;

&lt;p&gt;You can load scripts in the mongo shell as long as the mongo shell knows the path.&lt;/p&gt;

&lt;p&gt;Let us get mongodb running with the following bash script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

docker run --name jbelmont-mongo-image-4 \
  --rm \
  -v ~/mongod_data.4.0.5:/data/db \
  -p 27017:27017 \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -d jbelmont/mongo-vim:4.0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that this is a custom docker image that I created&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-shell-prompt.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Not let us say that we wanted to write a script that shows all the numbers in the numbers collection and in particular the val field.&lt;/p&gt;

&lt;p&gt;In the mongo shell we could get it like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-script-in-shell.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now let us write a script in a javascript file to do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

db = connect(&amp;quot;localhost:27017/nosql_workshop&amp;quot;);

db.numbers.find({}).forEach(num =&amp;gt; print(num.val));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will put this script in the following path in my computer:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/Users/jean-marcelbelmont/go/src/github.com/jbelmont/nosql-workshop/scripts&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/load-scripts.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;The mongo shell needs to know the path in order to load the script. Notice that we used the native function &lt;code&gt;pwd()&lt;/code&gt; to verify the path and then we passed in the path to our script in the &lt;code&gt;load()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We can set an environment variable in our &lt;em&gt;~/.bashrc,~/.zshrc&lt;/em&gt; for our mongodb scripts like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $MONGO_SCRIPT_PATH
/Users/jean-marcelbelmont/go/src/github.com/FoodLogiQ/playground/scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can call the javascript file outside of the mongo shell like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/mongo-script-load.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice how we used the environment variable of $MONGO_SCRIPT_PATH here and then just invoked our script file.&lt;/p&gt;

&lt;p&gt;Some advantages of using the javascript file instead of the mongo shell is that the mongo shell has limits when you copy and paste large BSON objects and can explode at times.&lt;/p&gt;

&lt;p&gt;If you use your javascript file you can use all the power of ESNext JavaScript features to do CRUD Operations in MongoDB.&lt;/p&gt;

&lt;p&gt;Let us create the following script that stores 2 numbers in the numbers collection and then prints out the val field in the first number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

db = connect(&amp;quot;localhost:27017/nosql_workshop&amp;quot;);

let id1 = new ObjectId();
let id2 = new ObjectId();

let numbers = [
    {
        &amp;quot;_id&amp;quot;: id1,
        &amp;quot;val&amp;quot; : 2.1, 
        &amp;quot;description&amp;quot; : &amp;quot;Decimal&amp;quot;
    },
    {
        &amp;quot;_id&amp;quot;: id2,
        &amp;quot;val&amp;quot;: 3.1,
        &amp;quot;description&amp;quot; : &amp;quot;Decimal&amp;quot;
    }
];

db.numbers.insertMany(numbers);

let num1 = db.numbers.find({
    _id: id1
})[0].val;

print(num1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let us run the new script like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/complex-script.js&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Now in the mongo shell we can look at our newest documents that we have added:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/new-numbers-in-collection.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;adding-global-configuration-with-mongorc-js&#34;&gt;Adding global configuration with ~/.mongorc.js&lt;/h2&gt;

&lt;p&gt;I have the following defined in my &lt;em&gt;~/.mongorc.js&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;DBQuery.prototype._prettyShell = true
DBQuery.prototype.unpretty = function () {
    this._prettyShell = false;
    return this;
}
currentDir = pwd()
currentDir = currentDir.split(&amp;quot;/&amp;quot;).slice(0, -1).join(&amp;quot;/&amp;quot;)
callScript = function(script_name) {
    load(`${currentDir}/playground/scripts/${script_name}`);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So from the top I have defined pretty print to be the default and have created a function called unpretty to get the regular behavior.&lt;/p&gt;

&lt;p&gt;Notice that we can define functions in JavaScript and we can use ESNext Features in JavaScript.&lt;/p&gt;

&lt;p&gt;I created a custom function called callScript that calls the load script function but takes an argument for the script name and looks at your current shell path.&lt;/p&gt;

&lt;p&gt;Looks like at a live example using the callScript command and a new JavaScript file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;;

let ids = [];
for (let i = 0; i &amp;lt; 10; i++) {
    let objectId = new objectId()
    ids.push({
        _id: objectId
    });
}
printjson(ids);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create an array of objects with ObjectIds in the mongo shell.&lt;/p&gt;

&lt;p&gt;Here is an example session in the mongo shell:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/array-of-objectids.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we called the javascript file without passing a path because we have defined the script path location in the callScript function definition already.&lt;/p&gt;

&lt;p&gt;There is a lot more you can do with scripts if you use your imagination :)&lt;/p&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks With Bash and Zsh</title>
      <link>https://www.marcelbelmont.com/post/tips-and-tricks-with-bash/</link>
      <pubDate>Sat, 16 Feb 2019 10:59:02 -0500</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/tips-and-tricks-with-bash/</guid>
      <description>

&lt;p&gt;In this blog post I go over some tips and tricks with bash and cover some of the newer features in bash such as associative arrays which are available in Bash 4.&lt;/p&gt;

&lt;h2 id=&#34;using-bash-history-features&#34;&gt;Using Bash History features&lt;/h2&gt;

&lt;p&gt;A lot of people know about hitting the up and down keys in their keyboard to access history but you can also utilize the &lt;code&gt;!!&lt;/code&gt; operator to access history in bash.&lt;/p&gt;

&lt;p&gt;Say that we run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can run &lt;code&gt;sudo !!&lt;/code&gt; to execute the previous command.&lt;/p&gt;

&lt;p&gt;Here is a shell session of this in action:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/history-bang.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Notice that in the screenshot above the command that was executed was printed first in the terminal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is a more advanced example of the power of history substitution:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/history-substution-advanced.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice here that we created 4 files file1.txt to file4.txt&lt;/p&gt;

&lt;p&gt;We then execute the &lt;code&gt;chmod&lt;/code&gt; command and reuse the 2nd to last command.&lt;/p&gt;

&lt;p&gt;The command: &lt;code&gt;chmod +x !touch$&lt;/code&gt; searches in shell history for the touch command which brings in the latest &lt;em&gt;touch&lt;/em&gt; command and then we use the last arguments in that command in this history substition.&lt;/p&gt;

&lt;p&gt;You can search the shell history by typing in &lt;code&gt;control + r&lt;/code&gt; in your terminal:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/reverse-search.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;You can cycle through history individually by pressing &lt;code&gt;control + p&lt;/code&gt; for previous and then press &lt;code&gt;control + n&lt;/code&gt; for the next history item.&lt;/p&gt;

&lt;p&gt;You can also set your CDPATH variable in your .zshrc so that you can just &lt;em&gt;cd&lt;/em&gt; into frequent directories:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cdpath.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Here is an example of jumping into a directory from the CDPATH:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/cdpath-example.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice in the screenshot above that we went from the home directory &lt;code&gt;~&lt;/code&gt; or &lt;code&gt;/Users/jean-marcelbelmont&lt;/code&gt; directly into the directory &lt;code&gt;/Users/jean-marcelbelmont/go/src/github.com/jbelmont/nosql-workshop&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;process-substitution&#34;&gt;Process Substitution&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In computing, process substitution is a form of inter-process communication that allows the input or output of a command to appear as a file. The command is substituted in-line, where a file name would normally occur, by the command shell. This allows programs that normally only accept files to directly read from or write to another program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is extremely useful with commands like &lt;em&gt;uniq&lt;/em&gt;, &lt;em&gt;sort&lt;/em&gt; that can take 2 arguments.&lt;/p&gt;

&lt;p&gt;Let us look at an example of this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/command-process-substitution.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice that in the screenshot above that we created 2 files: file1, file2&lt;/p&gt;

&lt;p&gt;We used command process substitution and ran sort in file1 and file2 and then passed that as standard input into the uniq command which printed out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;four&lt;/li&gt;
&lt;li&gt;one&lt;/li&gt;
&lt;li&gt;three&lt;/li&gt;
&lt;li&gt;two&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in sorted order and removed the duplicates in each file.&lt;/p&gt;

&lt;h2 id=&#34;associative-arrays-in-bash-and-zsh&#34;&gt;Associative arrays in bash and zsh&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Arrays.html&#34; target=&#34;_blank&#34;&gt;Associative arrays in bash&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bash provides one-dimensional indexed and associative array variables. Any variable may be used as an indexed array; the declare builtin will explicitly declare an array. There is no maximum limit on the size of an array, nor any requirement that members be indexed or assigned contiguously. Indexed arrays are referenced using integers (including arithmetic expressions and are zero-based; associative arrays use arbitrary strings. Unless otherwise noted, indexed array indices must be non-negative integers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us look at an example:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://www.marcelbelmont.com/media/associative-arrays.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Notice in the screenshot above that we use the declare keyword:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Declare variables and give them attributes.  If no NAMEs are given, display the attributes and values of all variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;-A    to make NAMEs associative arrays (if supported)*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We then access the associative array with the syntax like this:&lt;/p&gt;

&lt;p&gt;echo ${MY_MAP[KEY]} which prints out ONE in our case&lt;/p&gt;

&lt;p&gt;Let us look at a more advanced example of using associative arrays:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;#! /usr/local/bin/zsh

declare -A TEXT_INSIDE_PARENS_LIST

TEXT_INSIDE_PARENS=$(pbpaste | sed &#39;s/ /_/g&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)
TEXT_TITLECASE=$(echo $TEXT_INSIDE_PARENS | gsed &#39;s/.*/\L&amp;amp;/;s/[a-z]*/\u&amp;amp;/g;s/_/ /g&#39;)

COUNTER=0
for brackets in $TEXT_TITLECASE[@]
do
  TEXT_INSIDE_PARENS_LIST[$COUNTER]=$(echo $brackets | sed &#39;s/ /_/g&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39; | tr -d &#39;\n&#39;)
  printf &amp;quot;[%s](%s)\n&amp;quot; $brackets ${TEXT_INSIDE_PARENS_LIST[$COUNTER]}
  COUNTER=$(($COUNTER+1))
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create 2 lists and use an associative arrays that get a key in each loop of this script.&lt;/p&gt;

&lt;p&gt;We can write a more concise solution using IFS which is the internal field separator and using readarray.&lt;/p&gt;

&lt;p&gt;readarray: Read lines from a file into an array variable.&lt;/p&gt;

&lt;p&gt;We can also use here string.&lt;/p&gt;

&lt;p&gt;Here is a more concise example using bash 4:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /usr/local/bin/bash

IFS=$&#39;\n&#39;
WORDS=$(pbpaste)
readarray -t y &amp;lt;&amp;lt;&amp;lt; &amp;quot;$WORDS&amp;quot;

for word in $WORDS
do
  TEXT_INSIDE_PARENS=$(echo $word | sed &#39;s/ /_/g&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)
  printf &amp;quot;[%s](#%s)\n&amp;quot; $word $TEXT_INSIDE_PARENS
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the script above we put the system clipboard contents from pbpaste into the WORDS variable.
We then use the readarray builtin and here strings to create an array bash variable.
We then loop over words and create a running TEXT_INSIDE_PARENS variable and use the printf command.&lt;/p&gt;

&lt;p&gt;If you like this blog post you can read more about unix programming in my free gitbook &lt;a href=&#34;https://www.marcelbelmont.com/unix-programming-and-regular-expressions-workshop/&#34; target=&#34;_blank&#34;&gt;Unix Programming and Regular Expressions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please follow me at &lt;a href=&#34;https://github.com/jbelmont&#34; target=&#34;_blank&#34;&gt;jbelmont @ github&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jbelmont80&#34; target=&#34;_blank&#34;&gt;jbelmont80 @ twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you like.&lt;/p&gt;

&lt;p&gt;Until Next Time :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
