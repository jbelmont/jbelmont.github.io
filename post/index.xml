<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Software Musings</title>
    <link>https://www.marcelbelmont.com/post/</link>
    <description>Recent content in Posts on Software Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jean-Marcel Belmont</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Software Testing Foundations</title>
      <link>https://www.marcelbelmont.com/post/software-testing/</link>
      <pubDate>Thu, 31 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/software-testing/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#unit-testing&#34;&gt;Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#integration-testing&#34;&gt;Integration Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-driven-development&#34;&gt;Test-Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#behavior-driven-development&#34;&gt;Behavior-Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#end-to-end-testing&#34;&gt;End-to-End Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mocking&#34;&gt;Mocking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-fixtures&#34;&gt;Test Fixtures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#property-based-testing&#34;&gt;Property Based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;unit-testing&#34;&gt;Unit Testing&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the
&lt;a href=&#34;https://marcelbelmont.com/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.quora.com/Why-does-Kent-Beck-refer-to-the-rediscovery-of-test-driven-development&#34; target=&#34;_blank&#34;&gt;Rediscovery of TDD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instructions for Unit Exercises:
1. Go to unit folder &lt;code&gt;cd unit&lt;/code&gt;
2. Open program.test.js and go to each TODO block.
3. Complete each todo block by adding unit tests.
4. Please run the following script to &lt;code&gt;npm run unit:test&lt;/code&gt; in order to do the unit test exercises&lt;/p&gt;

&lt;h3 id=&#34;1-unit-test-the-map-function&#34;&gt;1. Unit Test the Map Function:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;nest.test(&#39;Unit test the map function&#39;, assert =&amp;gt; {
    assert.equal(actual, expected,
        `should render default message`);
    assert.end();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####For a typical unit test I usually create 2 variables one named actual and another named expect
&lt;em&gt;For &lt;code&gt;assert.equal(actual, expected, &#39;My message here&#39;)&lt;/code&gt; if actual and expected are equal then the unit test will pass.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The map function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[1,2,3,4,5].map(function(number) {
    return {
        value: number
    };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the following structure&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { value: 1 },
    { value: 2 },
    ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add variables actual and expected to this first unit test.
The equal method expects to get single property/value in order to pass 1 === 1 or &amp;ldquo;Mike&amp;rdquo; === &amp;ldquo;Mike&amp;rdquo;
The deepEqual method does a deep property check like this [1,2,3] === [1,2,3]&lt;/p&gt;

&lt;h3 id=&#34;2-unit-test-the-filter-function&#34;&gt;2. Unit Test the Filter Function.&lt;/h3&gt;

&lt;p&gt;The filter function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[1,2,3,4,5].filter(function(number) {
    return number &amp;gt; 3;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the following structure
&lt;code&gt;[4, 5]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Either choose &lt;code&gt;assert.equal&lt;/code&gt; or &lt;code&gt;assert.deepEqual&lt;/code&gt; but remember deepEqual does a deep check with arrays but equal checks properties.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-unit-test-the-concatall-function&#34;&gt;3. Unit Test the concatAll Function.&lt;/h3&gt;

&lt;p&gt;The concatAll function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[
    [1,2,3,4,5],
    [6,7,8,9,10]
].concatAll();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the following structure
&lt;code&gt;[1,2,3,4,5,6,7,8,9,10]&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;write-a-unit-test-using-the-same-format-as-previous-2-exercises&#34;&gt;Write a Unit Test using the same format as previous 2 exercises.&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;nest.test(&#39;I am some text&#39;, assert =&amp;gt; {
    const actual = ...;
    const expected = ...;
    assert.equal(
        actual,
        expected,
        &#39;I should another text&#39;
    );
    assert.end();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-unit-test-the-concatmap-function&#34;&gt;4. Unit Test the concatMap Function.&lt;/h3&gt;

&lt;p&gt;The concatMap function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const numStrings = [ [&amp;quot;One&amp;quot;, &amp;quot;Two&amp;quot;, &amp;quot;Three&amp;quot;], [&amp;quot;Four&amp;quot;, &amp;quot;Five&amp;quot;, &amp;quot;Six&amp;quot;] ];
[1, 2, 3, 4, 5].concatMap(function(num) {
    return numStrings[num];
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the following structure
&lt;code&gt;[&amp;quot;One&amp;quot;, &amp;quot;Two&amp;quot;, &amp;quot;Three&amp;quot;, &amp;quot;Four&amp;quot;, &amp;quot;Five&amp;quot;, &amp;quot;Six&amp;quot;]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;integration-testing&#34;&gt;Integration Testing&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://marcelbelmont.com/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;distinction-between-unit-tests&#34;&gt;Distinction between Unit Tests&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Introducing dependencies on external modules or data also turns unit tests into integration tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If one module misbehaves in a chain of interrelated modules, it is not so immediately clear where to look for the cause of the failure.&lt;/em&gt;
&lt;em&gt;When code under development relies on a database, a web service, or any other external process or service,&lt;/em&gt;
&lt;em&gt;enforcing a unit-testable separation is also an opportunity and a driving force to design more modular, more testable and more reusable code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34; target=&#34;_blank&#34;&gt;Distinction between Unit Tests&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;starting-instructions&#34;&gt;Starting instructions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Open 2 terminal prompts&lt;/li&gt;
&lt;li&gt;run the command &lt;code&gt;couchdb&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cd integration-tests&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;ii-using-text-editor-of-your-choice-open-program-test-js-and-complete-each-todo-block&#34;&gt;II. Using text editor of your choice open program.test.js and complete each TODO block.&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-finish-integration-test-for-the-api-v1-users-badmofos-endpoint&#34;&gt;1. Finish Integration test for the /api/v1/users/badMofos endpoint:&lt;/h3&gt;

&lt;h4 id=&#34;inspect-the-payload-with-the-following-curl-command&#34;&gt;Inspect the payload with the following curl command&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X GET -H &amp;quot;Accept: application/json&amp;quot; -H &amp;quot;Cache-Control: no-cache&amp;quot; &amp;quot;http://localhost:3000/api/v1/users/badMofos&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-the-telnet-command-and-paste-in-the-following-commands-to-your-terminal-and-hit-enter&#34;&gt;Use the telnet command and paste in the following commands to your terminal and hit enter.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;telnet localhost 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste this GET request into terminal that is expecting request and line feed and hit enter twice&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;GET /api/v1/users/badMofos HTTP/1.1
Host: localhost:3000
Accept: application/json
Cache-Control: no-cache
Postman-Token: f3413251-c0de-69ac-99dd-992bcaaca3bd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-a-rest-client-such-as-postman-chrome-app-or-anything-else&#34;&gt;Use a REST client such as Postman Chrome App or anything else.&lt;/h4&gt;

&lt;h5 id=&#34;whichever-way-you-use-choose-you-get-the-following-json-payload&#34;&gt;Whichever way you use choose you get the following JSON payload&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;_id&amp;quot;: &amp;quot;users&amp;quot;,
  &amp;quot;_rev&amp;quot;: &amp;quot;1-c9d988323eed080b054d6eb467abe4f9&amp;quot;,
  &amp;quot;names&amp;quot;: [
    &amp;quot;John J Rambo&amp;quot;,
    &amp;quot;Conan The Barbarian&amp;quot;,
    &amp;quot;Billy Jack&amp;quot;
  ],
  &amp;quot;ranks&amp;quot;: [
    &amp;quot;One Bad Mofo&amp;quot;,
    &amp;quot;Too Big of a dude&amp;quot;,
    &amp;quot;Kicks too high for my taste&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Add assertion to expect function call in line 16 using the payload information.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-finish-integration-test-for-api-v1-couch-insertdocument-endpoint&#34;&gt;2. Finish Integration Test for /api/v1/couch/insertDocument endpoint&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The Super Test library api docs can be found here &lt;a href=&#34;https://visionmedia.github.io/superagent&#34; target=&#34;_blank&#34;&gt;SuperTest&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;####Hints to complete the exercise:
&lt;em&gt;1. Use post method in supertest&lt;/em&gt;
&lt;em&gt;2. Use set method in supertest and pass in object with Accept and Content-Type headers.&lt;/em&gt;
&lt;em&gt;3. Use send method in supertest and pass in object with a name and document property.&lt;/em&gt;
&lt;em&gt;4. Make sure to call expect in supertest to do assertion and use previous get request as example.&lt;/em&gt;
&lt;em&gt;5. Make sure to end supertest call with end function call or the integration test won&amp;rsquo;t finish.&lt;/em&gt;
&lt;em&gt;6. Check statuscode with SuperTest property &lt;a href=&#34;https://visionmedia.github.io/superagent/#response-status&#34; target=&#34;_blank&#34;&gt;Status&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;7. Use assertion methods from Tape &lt;a href=&#34;http://www.node-tap.org/asserts&#34; target=&#34;_blank&#34;&gt;Asserts&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;8. CouchDB api documentation &lt;a href=&#34;https://wiki.apache.org/couchdb/HTTP_Document_API&#34; target=&#34;_blank&#34;&gt;Docs&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;9. CouchDB driver for node.js (nano) that I am using &lt;a href=&#34;https://github.com/dscape/nano&#34; target=&#34;_blank&#34;&gt;Docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;making-rest-call-with-curl-for-post-request&#34;&gt;Making Rest Call with Curl for Post Request&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X POST -H &amp;quot;Accept: application/json&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot; -H &amp;quot;Cache-Control: no-cache&amp;quot; -d &#39;{
	&amp;quot;name&amp;quot;: &amp;quot;some-document&amp;quot;,
	&amp;quot;document&amp;quot;: {
		&amp;quot;values&amp;quot;: {
			&amp;quot;one&amp;quot;: 1
		}
	}
}&#39; &amp;quot;http://localhost:3000/api/v1/couch/insertDocument&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-write-an-integration-test-removing-the-newly-created-document-to-api-v1-couch-deletedocument-name&#34;&gt;3. Write an integration test removing the newly created document to /api/v1/couch/deleteDocument/:name&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The Super Test library api docs and rest methods can be found here &lt;a href=&#34;https://visionmedia.github.io/superagent/#request-basics&#34; target=&#34;_blank&#34;&gt;SuperTest&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;####Hints to complete the exercise:
&lt;em&gt;1. Use appropriate supertest method to remove document.&lt;/em&gt;
&lt;em&gt;2. Make assertion with the returned status code (204) is usual status for DELETE request.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;making-rest-call-with-curl-for-delete-request&#34;&gt;Making Rest Call with Curl for Delete Request&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X DELETE -H &amp;quot;Content-Type: application/json&amp;quot; -d &#39;{
	&amp;quot;name&amp;quot;: &amp;quot;spicegirls&amp;quot;
}&#39; &amp;quot;http://localhost:3000/api/v1/couch/deleteDocument&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-driven-development&#34;&gt;Test-Driven Development&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://marcelbelmont.com/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-tdd-via-wikipedia-test-driven-development-https-en-wikipedia-org-wiki-test-driven-development&#34;&gt;Definition of TDD via Wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34; target=&#34;_blank&#34;&gt;Test-Driven Development&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Each test case fails initially: This ensures that the test really works and can catch an error. Once this is shown, the underlying functionality can be implemented. This has led to the &amp;ldquo;test-driven development mantra&amp;rdquo;, which is &amp;ldquo;red/green/refactor&amp;rdquo;, where red means fail and green means pass. Test-driven development constantly repeats the steps of adding test cases that fail, passing them, and refactoring. Receiving the expected test results at each stage reinforces the developer&amp;rsquo;s mental model of the code, boosts confidence and increases productivity.&lt;/p&gt;

&lt;h4 id=&#34;test-driven-development-cycle&#34;&gt;Test-Driven Development Cycle&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;1. Add a test&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;2. Run all tests and see if the new test fails&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;3. Write the code&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;4. Run tests&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;5. Refactor code.&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;Repeat&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;exercise-instructions&#34;&gt;Exercise Instructions&lt;/h4&gt;

&lt;p&gt;Requirements for First TDD Cycle
Create a function that computes the average of a range of numbers.&lt;/p&gt;

&lt;p&gt;Complete exercises in &lt;a href=&#34;https://marcelbelmont.com/software-testing/tree/master/tdd&#34; target=&#34;_blank&#34;&gt;TDD Folder of Repo&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;test-driven-development-cycle-1-add-a-test-run-tests&#34;&gt;Test-Driven Development Cycle 1 (Add a Test / Run Tests)&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go to file path &lt;code&gt;tdd/tdd-cycle/cycle1/program.test.js&lt;/code&gt; and add a failing test by calling a function that doesn&amp;rsquo;t exist in program.js&lt;/li&gt;
&lt;li&gt;Add a failing test in program.test.js using either Mocha with Chai or with Tape from our previous exercies.&lt;/li&gt;
&lt;li&gt;Run the failing test &lt;code&gt;npm run tdd:cycle1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;test-driven-development-cycle-2-write-the-code-run-tests&#34;&gt;Test-Driven Development Cycle 2 (Write the Code / Run Tests)&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go to file path &lt;code&gt;tdd/tdd-cycle/cycle2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the minimal requirement to make the test pass again.&lt;/li&gt;
&lt;li&gt;(Hint) Add an empty function in &lt;code&gt;program.js&lt;/code&gt; and then call it with the appropriate assertion.&lt;/li&gt;
&lt;li&gt;Run the test with &lt;code&gt;npm run tdd:cycle2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;test-driven-development-cycle-3-refactor-by-adding-implementation-add-a-test-run-all-tests-again&#34;&gt;Test-Driven Development Cycle 3 (Refactor by adding implementation / Add a test / Run all Tests again)&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go to file path &lt;code&gt;tdd/tdd-cycle/cycle3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Implement the average function in program.js.&lt;/li&gt;
&lt;li&gt;Add a unit test for the average function with an array of numbers.&lt;/li&gt;
&lt;li&gt;Use appropriate assertion to unit test the function.&lt;/li&gt;
&lt;li&gt;Run the test with &lt;code&gt;npm run tdd:cycle3&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;test-driven-development-cycle-final-refactor-code-add-a-test-run-all-tests-again&#34;&gt;Test-Driven Development Cycle Final / (Refactor code / Add a test / Run all tests again)&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go to the file path &lt;code&gt;tdd/tdd-cycle/cyclefinal&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Refactor the code again with possible different implementation or quit.&lt;/li&gt;
&lt;li&gt;If refactored with newer function than add new test else add run the same test for original implementation&lt;/li&gt;
&lt;li&gt;Run the test with &lt;code&gt;npm run tdd:cycle:final&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;behavior-driven-development&#34;&gt;Behavior-Driven Development&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://marcelbelmont.com/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;definition-of-bdd-via-wikipedia&#34;&gt;Definition of BDD via Wikipedia&lt;/h2&gt;

&lt;p&gt;BDD (behavior-driven development) combines practices from TDD and from ATDD.[27] It includes the practice of writing tests first, but focuses on tests which describe behavior, rather than tests which test a unit of implementation. Tools such as Mspec and Specflow provide a syntax which allow non-programmers to define the behaviors which developers can then translate into automated tests. Behavior-driven development combines the general techniques and principles of TDD with ideas from domain-driven design and object-oriented analysis and design to provide software development and management teams with shared tools and a shared process to collaborate on software development.&lt;/p&gt;

&lt;h2 id=&#34;another-look-at-what-bdd-is-via-josh-davis-blog-http-joshldavis-com-2013-05-27-difference-between-tdd-and-bdd&#34;&gt;Another Look at what BDD is via Josh Davis &lt;a href=&#34;http://joshldavis.com/2013/05/27/difference-between-tdd-and-bdd/&#34; target=&#34;_blank&#34;&gt;Blog&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The main difference is just the wording. BDD uses a more verbose style so that it can be read almost like a sentence.&lt;/p&gt;

&lt;p&gt;In contrast to TDD, BDD is when we write behavior &amp;amp; specification that then drives our software development.
The ability to read your tests like a sentence is a cognitive shift in how you will think about your tests. The argument is that if you can read your tests fluidly, you will naturally write better and more comprehensive tests.&lt;/p&gt;

&lt;p&gt;Instructions for BDD Exercises:
1. Go to bdd folder &lt;code&gt;cd bdd&lt;/code&gt;
2. Open program.test.js and go to each TODO block.
3. Complete each todo block by adding bdd style unit test.
4. In order to complete the exercises run the script &lt;code&gt;npm run bdd:test&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-unit-test-the-findidx-function&#34;&gt;1. Unit Test the findIdx Function:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;it(&#39;Unit test the Array.prototype.findIdx function&#39;, done =&amp;gt; {
        const numbers = [1,2,3,4,5];
        const expected = 2;
        expect(numbers.findIdx(val =&amp;gt; val === 3)).to.eql(expected);

        const names = [
            {
                name: &#39;Marcel&#39;
            },
            {
                name: &#39;Leo&#39;
            },
            {
                name: &#39;Dave&#39;
            }
        ];
        const IDX = 1;
        // TODO add assertions here:
        done();
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;read-the-chai-assertion-assertions-http-chaijs-com-api-assert&#34;&gt;Read the chai assertion &lt;a href=&#34;http://chaijs.com/api/assert&#34; target=&#34;_blank&#34;&gt;Assertions&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id=&#34;read-the-bdd-styles-for-expect-and-should-styles-http-chaijs-com-guide-styles&#34;&gt;Read the BDD Styles for Expect and Should &lt;a href=&#34;http://chaijs.com/guide/styles&#34; target=&#34;_blank&#34;&gt;Styles&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;For Unit tests I usually create 2 variables one named actual and another named expect but this is strictly up to you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Expect example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;expect(someTest).to.eql(ThisAssertion);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Should example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;foo.should.equal(&#39;bar&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.findIdx&lt;/code&gt; function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[{ name: &#39;Marcel&#39; },{ name: &#39;Leo&#39; },{ name: &#39;Dave&#39; }].findIdx(function(value) {
    return value[&amp;quot;name&amp;quot;] === &amp;quot;Leo&amp;quot;;
});

// outputs =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-unit-test-the-array-prototype-findinput-function&#34;&gt;2. Unit test the Array.prototype.findInput Function&lt;/h3&gt;

&lt;p&gt;Write a BDD Style test using the following structure in program.test.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;it(&#39;Unit test the Array.prototype.findInput function&#39;, function(done) {
    // TODO: Finish the test here.
    done();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.findInput&lt;/code&gt; function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[{ name: &#39;Marcel&#39; },{ name: &#39;Leo&#39; },{ name: &#39;Dave&#39; }].findInput(function(value) {
    return value[&amp;quot;name&amp;quot;] === &amp;quot;Leo&amp;quot;;
});

// outputs =&amp;gt; { name: &#39;Leo&#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-unit-test-the-array-prototype-zip-function&#34;&gt;3. Unit test the Array.prototype.zip Function&lt;/h3&gt;

&lt;p&gt;Write a BDD Style Test in the TODO block in program.test.js&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.zip&lt;/code&gt; function behaves in the following manner&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[
    [1, 2, 3],
    [&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;],
    [true, false, true]
].zip();

// outputs =&amp;gt;
[
    [1, &amp;quot;one&amp;quot;, true],
    [2, &amp;quot;two&amp;quot;, false],
    [3, &amp;quot;three&amp;quot;, true]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;end-to-end-testing&#34;&gt;End-to-End Testing&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://jbelmont.github.io/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-end-to-end-tests-via-infoq-end-to-end-testing-https-www-infoq-com-articles-balancing-unit-and-end-to-end-tests&#34;&gt;Definition of End-to-End Tests via InfoQ &lt;a href=&#34;https://www.infoq.com/articles/balancing-unit-and-end-to-end-tests&#34; target=&#34;_blank&#34;&gt;End-To-End-Testing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;End-to-End Tests simulate user behavior. In a web application, they will start the server, fire up a browser, click around, and assert that certain things happening in the browser give us confidence our feature is working. These tests give great confidence, but they are slow, brittle, and tightly coupled to the user interface.&lt;/p&gt;

&lt;h4 id=&#34;nightwatchjs-end-to-end-testing-library&#34;&gt;Nightwatchjs End to End Testing Library&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Nightwatch.js is a Node.js based End-to-End (E2E) testing solution for browser based apps and websites.&lt;/li&gt;
&lt;li&gt;It uses the powerful W3C WebDriver API to perform commands and assertions on DOM elements.&lt;/li&gt;
&lt;li&gt;Write End-to-End tests in Node.js quickly and effortlessly that run against a Selenium/WebDriver server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;webdriver&#34;&gt;WebDriver&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;WebDriver is a general purpose library for automating web browsers.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It was started as part of the Selenium project, which is a very popular and comprehensive set of tools for browser automation, initially written for Java but now with support for most programming languages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Nightwatch uses the WebDriver API to perform the browser automation related tasks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I.E. opening windows and clicking links for instance.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WebDriver is now a W3C specification, which aims to standardize browser automation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WebDriver is a remote control interface that enables introspection and control of user agents.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It provides a platform and a restful HTTP api as a way for web browsers to be remotely controlled.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/webdriver/&#34; target=&#34;_blank&#34;&gt;WebDriver Spec&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nightwatch works by communicating over a restful HTTP api with a WebDriver server (Selenium server).&lt;/li&gt;
&lt;li&gt;The restful API protocol is defined by the W3C WebDriver API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;nightwatch-operations&#34;&gt;Nightwatch Operations&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Nightwatch needs to send at least 2 requests to the WebDriver server in order to perform a command or assertion

&lt;ul&gt;
&lt;li&gt;The first request to locate an element given a CSS selector (or Xpath expression)&lt;/li&gt;
&lt;li&gt;The second request to perform the actual command/assertion on the given element.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  &#39;Code Craftsmanship Saturdays&#39;: browser =&amp;gt; {
    browser
      .url(&#39;http://localhost:3000&#39;)
        .waitForElementVisible(&#39;.code-craftsmanship-container-label&#39;, 1000)
        .assert.containsText(&#39;.code-craftsmanship-container-label &amp;gt; strong&#39;, &#39;Code Craftsmanship Saturdays&#39;)

    browser
      .click(&#39;.users-container .users-container-trash-bin&#39;)
      .assert.elementNotPresent(&#39;[data-email=&amp;quot;tcox0@dion.ne.jp&amp;quot;]&#39;)

    browser
      .click(&#39;#addSomeUserBtn&#39;)

    setInput(&#39;#emailInput&#39;, &#39;chuck@badass.net&#39;)
    setInput(&#39;#firstNameInput&#39;, &#39;Chuck&#39;)
    setInput(&#39;#lastNameInput&#39;, &#39;Norris&#39;)

    browser
      .click(&#39;#addUserSubmit&#39;)
      .waitForElementVisible(&#39;[data-email=&amp;quot;chuck@badass.net&amp;quot;]&#39;, 1000)
      .end();

    function setInput(input, value) {
      browser.setValue(input, value);
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above is a sample End To End Test for Nightwatch.js&lt;/p&gt;

&lt;p&gt;The string &lt;code&gt;Code Craftsmanship Saturdays&lt;/code&gt; will be what this particular test suite will be called.&lt;/p&gt;

&lt;p&gt;Notice that it lives in an &lt;code&gt;module.exports&lt;/code&gt; object&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;browser&lt;/code&gt; object has the main elements you will need for your test namely &lt;code&gt;click&lt;/code&gt;,  &lt;code&gt;url&lt;/code&gt;, and &lt;code&gt;assertions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since I only put one key there is one step to this test, I could however split this test into two parts like so&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  &#39;Load Default Screen and click trash can&#39;: browser =&amp;gt; {
    browser
      .url(&#39;http://localhost:3000&#39;)
        .waitForElementVisible(&#39;.code-craftsmanship-container-label&#39;, 1000)
        .assert.containsText(&#39;.code-craftsmanship-container-label &amp;gt; strong&#39;, &#39;Code Craftsmanship Saturdays&#39;)

    browser
      .click(&#39;.users-container .users-container-trash-bin&#39;)
      .assert.elementNotPresent(&#39;[data-email=&amp;quot;tcox0@dion.ne.jp&amp;quot;]&#39;)
  },

  &#39;Add a User&#39;: browser =&amp;gt; {
      browser
        .click(&#39;#addSomeUserBtn&#39;)

        setInput(&#39;#emailInput&#39;, &#39;chuck@badass.net&#39;)
        setInput(&#39;#firstNameInput&#39;, &#39;Chuck&#39;)
        setInput(&#39;#lastNameInput&#39;, &#39;Norris&#39;)

        browser
        .click(&#39;#addUserSubmit&#39;)
        .waitForElementVisible(&#39;[data-email=&amp;quot;chuck@badass.net&amp;quot;]&#39;, 1000)
        .end();

        function setInput(input, value) {
            browser.setValue(input, value);
        }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the End to End test has been broken into 2 steps, I could break it up further if I wanted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Nightwatch.js&lt;/code&gt; also has lifecycle methods that you can use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  before : function(browser) {
    console.log(&#39;Setting up...&#39;);
  },

  after : function(browser) {
    console.log(&#39;Closing down...&#39;);
  },

  beforeEach : function(browser) {

  },

  afterEach : function() {

  },

  &#39;step one&#39; : function (browser) {
    browser
     // ...
  },

  &#39;step two&#39; : function (browser) {
    browser
    // ...
      .end();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The goal of End to End tests are to test the behavior of your application&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that you should not be testing edge cases with your end to end tests.&lt;/p&gt;

&lt;p&gt;Some metrics to think about:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You should have many unit tests that test all the possible edge cases for each function/class.&lt;/li&gt;
&lt;li&gt;Your integration tests will consequently test multiple units of work and you should have a good number of them.&lt;/li&gt;
&lt;li&gt;End to End tests should really follow the happy path of a user workflow.

&lt;ol&gt;
&lt;li&gt;These types of tests are more resource intensive and you should think about separating end to end tests to an additional build.&lt;/li&gt;
&lt;li&gt;Keep your first build fast by only incorporating Unit Tests&lt;/li&gt;
&lt;li&gt;Perhaps include a secondary build where you run integration tests and end to end tests.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Instructions for End To End Exercises:
1. Go to end to end tests folder &lt;code&gt;cd end-to-end-tests/nightwatch&lt;/code&gt;
2. Open codeCraftsmanshipSaturdays.js.
3. Complete each todo block by adding the last part of the end to end test.
4. Run the script &lt;code&gt;npm run end:to🔚test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nightwatchjs.org/api&#34; target=&#34;_blank&#34;&gt;NightWatch Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mocking&#34;&gt;Mocking&lt;/h2&gt;

&lt;p&gt;To view lecture notes for this course, please consult the &lt;a href=&#34;https://jbelmont.github.io/software-testing&#34; target=&#34;_blank&#34;&gt;github-pages&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-mocks-via-wikipedia-mocks-https-en-wikipedia-org-wiki-mock-object&#34;&gt;Definition of Mocks via Wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Mock_object&#34; target=&#34;_blank&#34;&gt;Mocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In object-oriented programming, mock objects (also can be a unit of work) are simulated objects that mimic the behavior of real objects in controlled ways. A programmer typically creates a mock object to test the behavior of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behavior of a human in vehicle impacts.&lt;/p&gt;

&lt;h4 id=&#34;reasons-to-use-mock-objects&#34;&gt;Reasons to use Mock Objects&lt;/h4&gt;

&lt;p&gt;In a unit test, mock objects can simulate the behavior of complex, real objects and are therefore useful when a real object is impractical or impossible to incorporate into a unit test. If an actual object has any of the following characteristics, it may be useful to use a mock object in its place:
the object supplies non-deterministic results (e.g. the current time or the current temperature);&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Object has states that are difficult to create or reproduce (e.g. a network error);&lt;/strong&gt;
&lt;strong&gt;The Object is slow (e.g. a complete database, which would have to be initialized before the test);&lt;/strong&gt;
&lt;strong&gt;The Object does not yet exist or may change behavior;&lt;/strong&gt;
&lt;strong&gt;The Object would have to include information and methods exclusively for testing purposes (and not for its actual task).&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;sinon-js-mock-via-explanation-sinon-mocks-http-sinonjs-org-docs-mocks&#34;&gt;Sinon.js Mock via explanation &lt;a href=&#34;http://sinonjs.org/docs/#mocks&#34; target=&#34;_blank&#34;&gt;Sinon Mocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Mocks (and mock expectations) are fake methods (like spies) with pre-programmed behavior (like stubs) as well as pre-programmed expectations.
A mock will fail your test if it is not used as expected.&lt;/p&gt;

&lt;p&gt;Sinon Documentation discusses when not to use Mocks.
Mocks come with built-in expectations that may fail your test. Thus, they enforce implementation details.
&lt;strong&gt;The rule of thumb is: if you wouldn’t add an assertion for some specific call, don’t mock it. Use a stub instead.&lt;/strong&gt;
&lt;strong&gt;In general you should never have more than one mock (possibly with several expectations) in a single test.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;sinon-js-stubs-via-explanation-sinon-stubs-http-sinonjs-org-docs-stubs&#34;&gt;Sinon.js Stubs via explanation &lt;a href=&#34;http://sinonjs.org/docs/#stubs&#34; target=&#34;_blank&#34;&gt;Sinon Stubs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Test stubs are functions (spies) with pre-programmed behavior. They support the full test spy API in addition to methods which can be used to alter the stub’s behavior.
This is a key point here as well with stubs you get the full spy api but with Mocks you don&amp;rsquo;t.&lt;/p&gt;

&lt;h4 id=&#34;sinon-js-spies-via-explanation-sinon-spies-http-sinonjs-org-docs-spies&#34;&gt;Sinon.js Spies via explanation &lt;a href=&#34;http://sinonjs.org/docs/#spies&#34; target=&#34;_blank&#34;&gt;Sinon Spies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A test spy is a function that records arguments, return value, the value of this and exception thrown (if any) for all its calls.
Test spies are useful to test both callbacks and how certain functions/methods are used throughout the system under test.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sinon has an assertion api that you can reference here &lt;a href=&#34;http://sinonjs.org/docs/#assertions&#34; target=&#34;_blank&#34;&gt;Sinon Assertions&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;You can use either Mocha or Tape.js here it is your choice which one you feel most comfortable with.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;sinon-has-an-assertion-library-that-you-can-use-but-i-would-recommend-using-either-chai-js-assertion-library-or-should-js&#34;&gt;Sinon has an assertion library that you can use but I would recommend using either chai.js assertion library or should.js&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Chai.js documentation can be found here &lt;a href=&#34;http://chaijs.com/api/assert/&#34; target=&#34;_blank&#34;&gt;Chai.js Assert&lt;/a&gt; // &lt;a href=&#34;http://chaijs.com/api/bdd/&#34; target=&#34;_blank&#34;&gt;Chai.js BDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Should.js Assertion library can be found here &lt;a href=&#34;http://shouldjs.github.io/&#34; target=&#34;_blank&#34;&gt;Should.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Open program.test.js in &lt;code&gt;mocks-stubs-spies&lt;/code&gt; folder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;####1. Stub the &lt;code&gt;retrieveDocument&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function retrieveDocument({dbName, name}) {
    const couchDBName = nano.use(dbName);
    return new Promise((resolve, reject) =&amp;gt; {
        couchDBName.get(name, (err, body) =&amp;gt; {
            if (!err) {
                resolve(body);
            }
            reject(err);
        });
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don&amp;rsquo;t need the implementation here but I included it here for your reference.
Using Sinon check that the retrieveDocument stub is called once.
Make an assertion that the payload and the expected response match.&lt;/p&gt;

&lt;p&gt;####2. Stub the &lt;code&gt;insertDocument&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function insertDocument({ dbName = &#39;softwaretesting&#39;, name = &#39;users&#39;, body } = {}) {
    return new Promise((resolve, reject) =&amp;gt; {
        const couchDBName = nano.use(dbName);
        return insertDoc({ dbName: couchDBName, name, body })
            .then(() =&amp;gt; {
                resolve(retrieveDoc({ dbName: couchDBName , name }));
            })
            .catch(err =&amp;gt; {
                reject(err);
            });
    });
}

function insertDoc({dbName, name, body}) {
    return new Promise((resolve, reject) =&amp;gt; {
        dbName.insert(body, name, (err, body, header) =&amp;gt; {
            if (!err) {
                resolve(body);
            } else {
                reject(err);
            }
        });
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Again you don&amp;rsquo;t need the implementation here because you are stubbing it out but I added it in case you are curious.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use sinon to make some assertions about the stubbed out function&lt;/li&gt;
&lt;li&gt;Remember to use the setup function in tape or the before block in mocha to initialize the stub.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####3. Stub out the &lt;code&gt;deleteDocument&lt;/code&gt; function&lt;/p&gt;

&lt;p&gt;######Implementation Details&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function retrieveDoc({dbName, name}) {
    return new Promise((resolve, reject) =&amp;gt; {
        dbName.get(name, (err, body) =&amp;gt; {
            if (!err) {
                resolve(body);
            }
            reject(err);
        });
    });
}

function deleteDocument({dbName, name}) {
    const couchDBName = nano.use(dbName);
    return retrieveDoc({dbName: couchDBName, name})
        .then(body =&amp;gt; {
            if (body) {
                const {
                    _rev
                } = body;
                couchDBName.destroy(name, _rev, (err, body) =&amp;gt; {
                    if (!err) {
                        return body;
                    }
                    throw err;
                });
            }
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Stub out the deleteDocument function by using sinon.&lt;/li&gt;
&lt;li&gt;Use chai assertions or use the should.js assertion library&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-fixtures&#34;&gt;Test Fixtures&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test_fixture&#34; target=&#34;_blank&#34;&gt;Test Fixtures&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;* A test fixture is a fixed state of a set of objects used as a baseline for running tests.&lt;/li&gt;
&lt;li&gt;A test fixture is something used to consistently test some item, device, or piece of software.&lt;/li&gt;
&lt;li&gt;Test fixtures can be found when testing electronics, software and physical devices.&lt;/li&gt;
&lt;li&gt;A software test fixture sets up the system for the testing process by providing the initialization code.

&lt;ul&gt;
&lt;li&gt;In turn satisfying whatever preconditions there may be.
An example could be loading up a database with known parameters from a customer site before running your test.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ruby on Rails web framework uses YAML to initialize a database before running a test.

&lt;ul&gt;
&lt;li&gt;This allows for tests to be repeatable, which is one of the key features of an effective test framework&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages of Test Fixtures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test Fixtures allow for tests to be repeatable since you start with the same setup every time.&lt;/li&gt;
&lt;li&gt;Test Fixtures eases test code design by allowing the developer to separate methods into different functions and reuse each function for other tests.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Preconfigures tests into a known state at start instead of working from a previous test run.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results are repeatable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of Test Fixtures:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Preparation of input data and setup/creation of fake or mock objects&lt;/li&gt;
&lt;li&gt;Loading a database with a specific, known set of data&lt;/li&gt;
&lt;li&gt;Copying a specific known set of files creating a test fixture will create a set of objects initialized to certain states.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open up &lt;code&gt;test-fixtures&lt;/code&gt; directory and add an integration using supertest to retrieve the seeded document&lt;/p&gt;

&lt;h2 id=&#34;property-based-testing&#34;&gt;Property Based Testing&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Dijkstra&#39;s&lt;/code&gt;
&amp;gt; Program testing can at best show the presence of errors, but never their absence&lt;/p&gt;

&lt;p&gt;Author states that
&amp;gt; Thus we can expect testing to be the main form of program verification fora long time to come—it is the only practical technique in most cases&lt;/p&gt;

&lt;p&gt;The point is made that with a CI process in place you can automate testing in your code base but there is still a dilemma on how many test cases to write.&lt;/p&gt;

&lt;p&gt;Do you write one test case or many test cases?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In practice, much time is devoted either to simplifying a failing case by hand, or to debugging and tracing a complex case to understand why it fails. Shrinking failing cases automates the first stage of diagnosis, and makes the step from automated testing to locating a fault very short indeed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;test-case-wisdom&#34;&gt;Test Case Wisdom&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;During regular test case scenarios in unit-testing your follow the happy path or normal path

&lt;ul&gt;
&lt;li&gt;This in turn forms basis for future test cases&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;By generating test cases you can find bugs faster and more accuracy is what I am gleaning from the paper&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It is better to run smaller tests than large tests.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Most errors can be found by a smaller test case.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Developer will jump onto the first failing case&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rerun the test case and start debugging the issue&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test cases generated by hand are time consuming as well&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When new test cases can be generated by hand in seconds it helps reduce developer time on trivial edge cases.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testcheck-js&#34;&gt;TestCheck.js&lt;/h3&gt;

&lt;p&gt;Generative property testing for JavaScript.&lt;/p&gt;

&lt;p&gt;TestCheck.js is a library for generative testing of program properties, ala QuickCheck.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By providing a specification of the JavaScript program in the form of properties&lt;/li&gt;
&lt;li&gt;Properties can be tested to remain true for a large number of randomly generated cases.&lt;/li&gt;
&lt;li&gt;In the case of a test failure, the smallest possible failing test case is found.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const { check, gen, property } = require(&#39;testcheck&#39;);
const test = require(&#39;tape&#39;);

test(&#39;addition is commutative&#39;, check(gen.int, gen.int, (t, numA, numB) =&amp;gt; {
  t.plan(1);
  t.equal(numA + numB, numB + numA)
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Read the &lt;a href=&#34;https://www.marcelbelmont.com/software-testing/&#34; target=&#34;_blank&#34;&gt;Software Testing Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You will be able to copy and paste examples using the Gitbook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you like this post please star &lt;a href=&#34;https://github.com/jbelmont/software-testing&#34; target=&#34;_blank&#34;&gt;Software Testing on Gitub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous Integration Concepts using Travis CI, Circle CI, and Jenkins</title>
      <link>https://www.marcelbelmont.com/post/continuous-integration-with-jenkins-travis-and-circleci/</link>
      <pubDate>Mon, 28 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/continuous-integration-with-jenkins-travis-and-circleci/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#continuous-integration&#34;&gt;Continuous Integration Core Concepts&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#introduction-to-continuous-integration&#34;&gt;Introduction to Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reducing-risks&#34;&gt;Reducing Risks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-software-with-code-changes&#34;&gt;Building Software with Code Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ci-for-database-integration&#34;&gt;CI for Database Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#continuous-testing&#34;&gt;Continuous Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#continuous-inspection&#34;&gt;Continuous Inspection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#continuous-deployment&#34;&gt;Continuous Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#continuous-feedback&#34;&gt;Continuous Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jenkins&#34;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#travis-ci&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#circle-ci&#34;&gt;Circle CI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;continuous-integration-core-concepts&#34;&gt;Continuous Integration Core Concepts&lt;/h2&gt;

&lt;p&gt;Most of the notes in this section were gleaned from the &lt;a href=&#34;https://goo.gl/PRcGny&#34; target=&#34;_blank&#34;&gt;Continuous Integration Book&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a fantastic resource and full of insightful wisdom from &lt;code&gt;Steve Matyas&lt;/code&gt; and &lt;code&gt;Paul M. Duvall&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h4&gt;

&lt;p&gt;Build Software at every change&lt;/p&gt;

&lt;h6 id=&#34;what-is-a-build-anyway&#34;&gt;What is a build anyway?&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;A build is more than a compilation step.

&lt;ul&gt;
&lt;li&gt;A build can consist of a compilation step, testing, code inspection and deployment.&lt;/li&gt;
&lt;li&gt;A build acts as a kind of verification step that checks that your software works as a cohesive unit.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;ci-process-steps-in-a-nutshell&#34;&gt;CI Process Steps in a nutshell&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Developer commits code to a version control repository like Github.

&lt;ol&gt;
&lt;li&gt;The CI server is either polling the repository for changes or has a webhook on the version control system&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Once the CI server has detected changes have occurred in the VCP (Version Control Repository)

&lt;ol&gt;
&lt;li&gt;The CI server will grab the latest code from the VCP and execute some kind of build script to integrate the software.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The CI server will generate feedback by emailing build results to specified project members&lt;/li&gt;
&lt;li&gt;The CI server will either continue polling for changes in the VCP initiate action from a push notification sent from the VCP that has a configured webhook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;introduction-to-continuous-integration&#34;&gt;Introduction to Continuous Integration&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Commit Code Frequently&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Commit Broken Code&lt;/li&gt;
&lt;li&gt;Fix Broken Builds Immediately&lt;/li&gt;
&lt;li&gt;Write automated developer tests&lt;/li&gt;
&lt;li&gt;All Tests and inspections must pass the build.&lt;/li&gt;
&lt;li&gt;Developers run private builds on their machines.&lt;/li&gt;
&lt;li&gt;Avoid if possible getting broken code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&#34;the-value-of-ci&#34;&gt;The value of CI&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Reduce Risks

&lt;ul&gt;
&lt;li&gt;The health of your software becomes measurable&lt;/li&gt;
&lt;li&gt;Reduce developer assumptions

&lt;ol&gt;
&lt;li&gt;Don&amp;rsquo;t Rely on Environment variables.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t rely on certain configuration files set on your machine.&lt;/li&gt;
&lt;li&gt;The build is built cleanly and independently from each developer&amp;rsquo;s machine.&lt;/li&gt;
&lt;li&gt;It avoid the classic phrase but it works on my machine.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Reduce repetitive manual processes

&lt;ol&gt;
&lt;li&gt;The process runs the same way every time&lt;/li&gt;
&lt;li&gt;An ordered process is followed.

&lt;ol&gt;
&lt;li&gt;Compile Step&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Reports Generated&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The process runs every time a commit is pushed to the version control system.
&lt;strong&gt;Frees developers to work on higher value work and reduces possible mistakes&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Generate deployable software anytime and anywhere&lt;/li&gt;
&lt;li&gt;Enable better project visibility&lt;/li&gt;
&lt;li&gt;Establish confidence in your software with the development team&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;what-prevents-teams-from-using-ci&#34;&gt;What prevents teams from using CI?&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Misguided belief that there is too much overheard to setting a CI process

&lt;ul&gt;
&lt;li&gt;Either your manual processses will control you or you can manage your CI process&lt;/li&gt;
&lt;li&gt;Either way you going to have to do these things anyways&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;how-to-get-something-into-ci&#34;&gt;How to get something into CI.&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Identify a particular process that can benefit from automation.&lt;/li&gt;
&lt;li&gt;Write a build script that makes the process both repeatable and consistent&lt;/li&gt;
&lt;li&gt;Share you process by committing it into your version control system&lt;/li&gt;
&lt;li&gt;Make it continuous by adding it to the CI server&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;ci-complements-other-development-practices&#34;&gt;CI complements other development practices&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Developer Testing

&lt;ul&gt;
&lt;li&gt;Testing framework or libraries can be added to the CI server&lt;/li&gt;
&lt;li&gt;Enforcing coding standards

&lt;ul&gt;
&lt;li&gt;The CI server can be configured to enforce coding standards&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Refactoring can be less problematic since the CI server can report issues once code is committed.&lt;/li&gt;
&lt;li&gt;Increase Software Ownership since developers can see if coding standards are being followed by generated reports from the build.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;commit-code-frequently&#34;&gt;Commit Code Frequently&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Make small changes

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t try to introduce tons of changes all at once

&lt;ul&gt;
&lt;li&gt;When making pull request keep them small and focused&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Commit after each task

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t have huge branches but instead focused feature branches that are not long lived&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;don-t-commit-broken-code&#34;&gt;Don&amp;rsquo;t Commit Broken Code&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Encourage developers to run a private build before committing any code to the repository

&lt;ul&gt;
&lt;li&gt;The build script should run all the tests and make sure nothing is broken before code is pushed.&lt;/li&gt;
&lt;li&gt;The private build should mirror if possible what exists in the integration build to ensure nothing broken gets introduced to CI server.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;fix-broken-builds-immediately&#34;&gt;Fix Broken Builds Immediately&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t leave the CI server broken as this can hinder other developers from working.&lt;/li&gt;
&lt;li&gt;Builds must be fixed as soon as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;write-automated-developer-tests&#34;&gt;Write Automated Developer Tests&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Builds should be fully automated&lt;/li&gt;
&lt;li&gt;Choose testing frameworks or libraries that provide capability of running tests in an automated fashion&lt;/li&gt;
&lt;li&gt;We will show this in action with jenkins and travis ci.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;all-tests-and-inspections-must-pass&#34;&gt;All Tests and Inspections must pass&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;In a CI environment all the tests must pass&lt;/li&gt;
&lt;li&gt;All the inspections must pass as well

&lt;ul&gt;
&lt;li&gt;Linting&lt;/li&gt;
&lt;li&gt;Static Analysis&lt;/li&gt;
&lt;li&gt;Code Coverage Metrics

&lt;ul&gt;
&lt;li&gt;75% Branching&lt;/li&gt;
&lt;li&gt;70% Function Coverage&lt;/li&gt;
&lt;li&gt;70% Line Coverage&lt;/li&gt;
&lt;li&gt;70% Condition Coverage&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;run-private-builds&#34;&gt;Run Private Builds&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Developers need to emulate integration builds on their development environments&lt;/li&gt;
&lt;li&gt;Grab the latest code from version control&lt;/li&gt;
&lt;li&gt;Run all the tests and inspections on their machines&lt;/li&gt;
&lt;li&gt;Everything should pass before pushing commits to version control&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;avoid-getting-broken-code&#34;&gt;Avoid Getting Broken Code&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Developers should monitor the version control system and avoid if possible pulling down any broken code.&lt;/li&gt;
&lt;li&gt;Meanwhile whoever introduced the build failures should be alerted as soon as possible about the breaking changes and be working on fixing the build issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;reducing-risks&#34;&gt;Reducing Risks&lt;/h4&gt;

&lt;h6 id=&#34;scenarios-to-combat&#34;&gt;Scenarios to Combat&lt;/h6&gt;

&lt;h6 id=&#34;but-it-works-on-my-machine&#34;&gt;But it works on my machine&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Each developer machine should mirror as closely as possible the integration as possible&lt;/li&gt;
&lt;li&gt;Everything needed to build software needs to be committed to version control.&lt;/li&gt;
&lt;li&gt;Developers should not have build scripts that only exist on their machines&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;syncing-with-the-database&#34;&gt;Syncing with the database&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Database artifacts should be in version control&lt;/li&gt;
&lt;li&gt;Database creation scripts, data manipulation scripts, stored procedures, database triggers etc.

&lt;ul&gt;
&lt;li&gt;Of course this is if you have a relational database&lt;/li&gt;
&lt;li&gt;But if you have a NoSql database and a Restful API design then make sure to document endpoints&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Developers might need database specific code

&lt;ul&gt;
&lt;li&gt;We will visit such tests when we got to the hands on portion of the workshop&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;missing-deployment-automation&#34;&gt;Missing Deployment Automation&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Deployments should be automated by using a deployment tool.&lt;/li&gt;
&lt;li&gt;Depending on your software architectures the deployment tools used can vary.

&lt;ul&gt;
&lt;li&gt;Octopus Deploy&lt;/li&gt;
&lt;li&gt;AWS Elastic Beanstalk&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;Google App Engine&lt;/li&gt;
&lt;li&gt;Dokku&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Deployment tools is deserving of another workshop alone&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;late-discovery-of-defects&#34;&gt;Late Discovery of Defects&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Test code should be written for all of your source code&lt;/li&gt;
&lt;li&gt;Tests should be run on your build script&lt;/li&gt;
&lt;li&gt;Tests should be continuously run on your CI system&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;test-coverage-not-known&#34;&gt;Test Coverage not known&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Use a code coverage tool to see how much your tests are actually covering your source code.&lt;/li&gt;
&lt;li&gt;We will look at this in more detail on the hands on portion of the workshop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;lack-of-project-visibility&#34;&gt;Lack of Project Visibility&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;CI system should be configured to send alerts in multipe ways&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;building-software-with-code-changes&#34;&gt;Building Software With Code Changes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Automate Builds&lt;/li&gt;
&lt;li&gt;Perform Single Command Builds&lt;/li&gt;
&lt;li&gt;Separate Builds scripts from your IDE&lt;/li&gt;
&lt;li&gt;Centralize Software Assets&lt;/li&gt;
&lt;li&gt;Create a consistent directory structure&lt;/li&gt;
&lt;li&gt;Builds fail fast&lt;/li&gt;
&lt;li&gt;Build for any environment&lt;/li&gt;
&lt;li&gt;Use a dedicated integration build machine&lt;/li&gt;
&lt;li&gt;Use a CI server&lt;/li&gt;
&lt;li&gt;Run Fast Builds&lt;/li&gt;
&lt;li&gt;Stage Builds&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;automate-builds&#34;&gt;Automate Builds&lt;/h6&gt;

&lt;p&gt;What is a Software Build?&lt;/p&gt;

&lt;p&gt;A build can consist of just compiling software components.
A build can consist of compiling and running automated tests.
The more processes you add to the build the slower the feedback loop&lt;/p&gt;

&lt;h6 id=&#34;scripting-tool&#34;&gt;Scripting Tool&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Use a scripting tool designed specifically for building software,

&lt;ul&gt;
&lt;li&gt;Instead of a custom set of shell scripts or batch scripts&lt;/li&gt;
&lt;li&gt;A scripting tool is the most effective maner for developing a consistent, repeatable build solution&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;perform-single-command-builds&#34;&gt;Perform Single Command Builds&lt;/h6&gt;

&lt;p&gt;Quote by Martin Fowler
&amp;gt; Get everything you need into source control and get it so that you can build the whole system with a single command.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/articles/continuousIntegration.html&#34; target=&#34;_blank&#34;&gt;Continuous Integration&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;steps-for-building-your-software-in-a-nutshell&#34;&gt;Steps for building your software in a nutshell&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Create your build using a scripting tool NAnt, Rake, Maven, Gulp.js

&lt;ol&gt;
&lt;li&gt;Start with a simple process.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Add each process to integrate your software within the build script.&lt;/li&gt;
&lt;li&gt;Run your script from the command line or an IDE.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;An example using Gulp.js of a build task with the build sass task&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;gulp.task(&#39;build:sass&#39;, () =&amp;gt; gulp.src(sassPaths[0])
    .pipe(sourcemaps.init())
    .pipe(sass({
      outputStyle: &#39;compressed&#39;,
      includePaths: [&#39;node_modules&#39;]
    }))
    .pipe(autoprefixer({ cascade: false }))
    .pipe(concat(&#39;advanced-tech.css&#39;))
    .pipe(sourcemaps.write(&#39;.&#39;))
    .pipe(gulp.dest(&#39;./static/build&#39;))
    .pipe(livereload()));

gulp.task(&#39;build&#39;, (cb) =&amp;gt; {
  runSequence(&#39;copy:react:files&#39;, &#39;uglify:js&#39;, &#39;build:js&#39;, &#39;build:sass&#39;, &#39;build:vendor:sass&#39;, cb);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;separate-build-scripts-from-your-ide&#34;&gt;Separate Build Scripts from Your IDE&lt;/h6&gt;

&lt;p&gt;Avoid coupling your build scripts with an IDE. A build script shouldn&amp;rsquo;t be dependent on your IDE&lt;/p&gt;

&lt;p&gt;This is important for 2 reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each developer may be using a different IDE/Editor and may have different configurations.&lt;/li&gt;
&lt;li&gt;A CI server must execute an automated build without human intervention.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&#34;centralize-software-assets&#34;&gt;Centralize Software Assets&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Components such as source files or library files&lt;/li&gt;
&lt;li&gt;Third part components, dlls, jar files, etc&lt;/li&gt;
&lt;li&gt;Configuration files&lt;/li&gt;
&lt;li&gt;Data files to initialize the application&lt;/li&gt;
&lt;li&gt;Build Scripts and build environment settings&lt;/li&gt;
&lt;li&gt;Installation scripts for some components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;You must decide what all should go into version control&lt;/strong&gt;&lt;/p&gt;

&lt;h6 id=&#34;create-a-consistent-directory-structure&#34;&gt;Create a Consistent Directory Structure&lt;/h6&gt;

&lt;p&gt;You must choose a consistent directory structure for your software assets.
It helps perform scripted retrievals from a CI server.&lt;/p&gt;

&lt;p&gt;Here is a sample folder structure that I typically do for my React/Redux Application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ca (Certificate Authority)&lt;/li&gt;
&lt;li&gt;config (configuration files)&lt;/li&gt;
&lt;li&gt;db (database related stuff)&lt;/li&gt;
&lt;li&gt;docs (documentation)&lt;/li&gt;
&lt;li&gt;images&lt;/li&gt;
&lt;li&gt;models (data files)&lt;/li&gt;
&lt;li&gt;test (All my test files)

&lt;ul&gt;
&lt;li&gt;unit&lt;/li&gt;
&lt;li&gt;integration&lt;/li&gt;
&lt;li&gt;e2e&lt;/li&gt;
&lt;li&gt;helpers&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;static

&lt;ul&gt;
&lt;li&gt;build&lt;/li&gt;
&lt;li&gt;js

&lt;ul&gt;
&lt;li&gt;actions&lt;/li&gt;
&lt;li&gt;components&lt;/li&gt;
&lt;li&gt;constants&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;reducers&lt;/li&gt;
&lt;li&gt;store&lt;/li&gt;
&lt;li&gt;utils&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;scss&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;utils (utility files)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;fail-builds-fast&#34;&gt;Fail Builds Fast&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Integrate Components&lt;/li&gt;
&lt;li&gt;Run true unit tests

&lt;ol&gt;
&lt;li&gt;Quick unit tests don&amp;rsquo;t rely on a database or any other dependency they test in isolation&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Run other automated processes (rebuild database, inspect, and deploy)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;It is up to you for any other steps&lt;/strong&gt;&lt;/p&gt;

&lt;h6 id=&#34;build-for-any-environment&#34;&gt;Build for any Environment&lt;/h6&gt;

&lt;p&gt;You can use configuration files and environment variables to build for any environment dev/prod/test&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logging verbosity&lt;/li&gt;
&lt;li&gt;Application server configuration&lt;/li&gt;
&lt;li&gt;Database connection information&lt;/li&gt;
&lt;li&gt;Framework configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DATABASE_NAME=advancedtech
TABLE_NAME=users
DB_PORT=28015
DB_HOST=localhost
NODE_ENV=development
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Load Environment variables
require(&#39;dotenv&#39;).config();
const webpackConfig = process.env.NODE_ENV === &#39;development&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;build-types-and-mechanisms&#34;&gt;Build Types and Mechanisms&lt;/h6&gt;

&lt;h6 id=&#34;build-types&#34;&gt;Build Types&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;The Individual&lt;/li&gt;
&lt;li&gt;The Team&lt;/li&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&#34;private-build&#34;&gt;Private Build&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Developers run private build prior to committing code to the repository.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check out the code you will alter from the repository

&lt;ol&gt;
&lt;li&gt;Go into the version controlled folder or &lt;code&gt;git clone somerepo&lt;/code&gt; in this step.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Make changes to the code.

&lt;ol&gt;
&lt;li&gt;Edit myFile.js&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Get the latest system changes from the repository.

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Run a build that includes execution of all your unit tests.&lt;/li&gt;
&lt;li&gt;Commit your code changes to the repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&#34;use-a-dedicated-integration-build-machine&#34;&gt;Use a dedicated Integration Build Machine&lt;/h6&gt;

&lt;p&gt;Having a dedicated machine for integration build will help reduce assumptions about environment and config.
Prevents the proverbial &amp;ldquo;but it works on my machine&amp;rdquo; problem&lt;/p&gt;

&lt;h6 id=&#34;use-a-ci-server&#34;&gt;Use a CI server&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Poll for changes in version control on a specified time interval

&lt;ul&gt;
&lt;li&gt;Github also has web hooks that you can set for Jenkins and Travis CI which will discuss in a bit&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Perform certain actions on a scheduled bases, hourly or daily&lt;/li&gt;
&lt;li&gt;Identify a &amp;ldquo;quiet period&amp;rdquo; during which no integration build are performed for the project&lt;/li&gt;
&lt;li&gt;Support for different build scripting tools such as Rake, Make, NPM, Ant, etc&lt;/li&gt;
&lt;li&gt;Send Emails to the concerned parties&lt;/li&gt;
&lt;li&gt;Display a history of previous builds&lt;/li&gt;
&lt;li&gt;Display a dashboard that is web accessible so that everyone can review integration build information

&lt;ul&gt;
&lt;li&gt;Jenkins has a dashboard as well as Travis CI&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Support multiple version control systems for your different projects

&lt;ul&gt;
&lt;li&gt;svn&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;mercurial&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;manual-integration-builds&#34;&gt;Manual Integration Builds&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Run a integration build manually using an automated build as an approach to reduce integration build errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;run-fast-builds&#34;&gt;Run Fast Builds&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Get builds down to 10 minutes or so by increasing computing resources&lt;/li&gt;
&lt;li&gt;offload slower tests&lt;/li&gt;
&lt;li&gt;offload inspections

&lt;ul&gt;
&lt;li&gt;code coverage&lt;/li&gt;
&lt;li&gt;static analysis&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Run staged builds

&lt;ul&gt;
&lt;li&gt;Run First Build that compiles and runs unit tests&lt;/li&gt;
&lt;li&gt;Secondary Build runs integration and end to end tests&lt;/li&gt;
&lt;li&gt;Performance builds shouldn&amp;rsquo;t be run on the first build&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ci-for-database-integration&#34;&gt;CI for Database Integration&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Automate Database Integration&lt;/li&gt;
&lt;li&gt;Use a Local Database Sandbox&lt;/li&gt;
&lt;li&gt;Use a version control repository to share database assets&lt;/li&gt;
&lt;li&gt;Give Developers capability to modify the database&lt;/li&gt;
&lt;li&gt;Make DBA part of the development team&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;automate-database-integration&#34;&gt;Automate Database Integration&lt;/h6&gt;

&lt;p&gt;Repeatable Database Integration Activities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Drop Database&lt;/li&gt;
&lt;li&gt;Create Database&lt;/li&gt;
&lt;li&gt;Insert System Data&lt;/li&gt;
&lt;li&gt;Insert Test Data&lt;/li&gt;
&lt;li&gt;Migrate Database and data&lt;/li&gt;
&lt;li&gt;Setup database instances in multiple environments&lt;/li&gt;
&lt;li&gt;Modify column attributes

&lt;ul&gt;
&lt;li&gt;this would be done for a relational database&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Modify test data&lt;/li&gt;
&lt;li&gt;Modify stored procedures and triggers and functions

&lt;ul&gt;
&lt;li&gt;this is done for relational databases like SQL Server, Oracle, MySQL, PostgresSQL, etc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Obtain access to different environments&lt;/li&gt;
&lt;li&gt;Backup restore large data sets&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;creating-your-database&#34;&gt;Creating your database&lt;/h6&gt;

&lt;p&gt;An example of set of functions that connect to RethinkDB insert test data if necessary and retrieve data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function dbActions() {
  return connectToRethinkDBServer()
    .then((connection) =&amp;gt; {
      DB.connection = connection;
      return doesRethinkTableExist()
        .then(exists =&amp;gt; exists);
    })
    .then((databaseExists) =&amp;gt; {
      if (!databaseExists) {
        return createUsers(databaseExists)
          .then(() =&amp;gt; createTable())
          .then(() =&amp;gt; insertData());
      }
    })
    .then(() =&amp;gt; checkIfTableExists()
        .then((value) =&amp;gt; {
          if (value &amp;gt; 0) {
            return getUsers()
              .then(values =&amp;gt; values);
          }
          insertData()
              .then(() =&amp;gt; getUsers()
                  .then(values =&amp;gt; values));
        }));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;manipulating-your-database&#34;&gt;Manipulating your database&lt;/h6&gt;

&lt;p&gt;You can use tools/scripts to seed data into your database and to delete the database&lt;/p&gt;

&lt;h6 id=&#34;use-a-local-database-sandbox&#34;&gt;Use a Local Database Sandbox&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Developers can then create a database &amp;ldquo;sandbox&amp;rdquo; to make and test database changes without affection others&lt;/li&gt;
&lt;li&gt;With this step it is easier for developers to recreate a database and run tests on their machines&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;use-a-version-control-repository-to-share-database-assets&#34;&gt;Use a version control repository to share database assets&lt;/h6&gt;

&lt;p&gt;Database Assets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DDL (Data Definition Language) to drop and create tables and view including constraints and triggers&lt;/li&gt;
&lt;li&gt;Stored Procedures and Functions

&lt;ul&gt;
&lt;li&gt;Provided this is a relational database&lt;/li&gt;
&lt;li&gt;Otherwise a set of functions or API endpoints that can manipulate data

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POST /api/v1/insertData&lt;/code&gt; is an example endpoint to insert data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Entity relationship diagrams&lt;/li&gt;
&lt;li&gt;Test data for different environments&lt;/li&gt;
&lt;li&gt;Specific database configurations&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;continuous-database-integration&#34;&gt;Continuous Database Integration&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Automating your database integration and incorporating into build scripts helps keep other developers in sync&lt;/strong&gt;&lt;/p&gt;

&lt;h6 id=&#34;give-developers-the-capability-to-modify-the-database&#34;&gt;Give Developers the capability to modify the database&lt;/h6&gt;

&lt;p&gt;This empowers developers provided they have the expertise to do so to avoid the DBA being the bottleneck
&lt;strong&gt;Word of caution with this added power comes responsibility as well on the developers side&lt;/strong&gt;&lt;/p&gt;

&lt;h6 id=&#34;make-the-dba-a-part-of-the-development-team&#34;&gt;Make the DBA a part of the development team&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;The DBA should be able to run the same automated build including a database rebuild that developer can do&lt;/li&gt;
&lt;li&gt;Make the DBA a part of the team

&lt;ul&gt;
&lt;li&gt;This can help integrate teams instead of create silos&lt;/li&gt;
&lt;li&gt;Code goes over the wire so the speak&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;database-integration-and-integration&#34;&gt;Database integration and integration&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Test your database

&lt;ul&gt;
&lt;li&gt;Relational Databases can be tested (PL/SQL, SQLUNIT) etc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Inspect your database&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;deployment&#34;&gt;Deployment&lt;/h6&gt;

&lt;p&gt;The goal of Continuous Database Integration is to treat your database source code and other source code the same.
Deployment processes will deploy your database to your development and test database instances.&lt;/p&gt;

&lt;h6 id=&#34;feedback-and-documentation&#34;&gt;Feedback and Documentation&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Your CI server should be communicating build status like build failure and emailing the necessary individuals.&lt;/li&gt;
&lt;li&gt;Documentation is important and can be part of the build status&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;continuous-testing&#34;&gt;Continuous Testing&lt;/h4&gt;

&lt;h6 id=&#34;automate-unit-tests&#34;&gt;Automate Unit Tests&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Unit tests verify the behavior of small elements in a software system which can be a single class/function&lt;/li&gt;
&lt;li&gt;Some unit tests will employ mocks, which are simple objects that substitute more complicated functions/classes&lt;/li&gt;
&lt;li&gt;Key aspect for unit tests is to have no relianze on outside dependencies like databases

&lt;ul&gt;
&lt;li&gt;This both increase the time to setup and run unit tests and make your code too coupled&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unit tests can be written early in the development cycle&lt;/li&gt;
&lt;li&gt;Unit tests are alse an efficient way to debug while coding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example Unit Test using Ava.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;test(&#39;check error object from errorHandler with proper arguments&#39;, t =&amp;gt; {
  t.plan(1);
  const foo = require(&#39;../helpers&#39;).foo();
  const actual = errorHandler.generateError({
    err: foo,
    moduleName: &#39;foo&#39;,
    statusCode: &#39;foo error&#39;
  });
  const expected = {
    statusCode: &#39;foo error&#39;,
    message: &#39;Foo Error: Foo&#39;,
    errorLineAndColumn: &#39;foo:4:10)&#39;
  };
  t.deepEqual(actual, expected, `should return ${expected}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;automate-component-tests&#34;&gt;Automate Component Tests&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Component/Integration/Subsystem tests verify portions of a system

&lt;ul&gt;
&lt;li&gt;May require fully installed system or external dependencies

&lt;ul&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;file systems&lt;/li&gt;
&lt;li&gt;network endpoints&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Integration tests are usually longer running tests than Unit Tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example Integration Test using Ava.js, Supertest and Nock&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let postScope, payload, deleteScope;
test.before(() =&amp;gt; {
  const requestGetHeaders = {
    reqheaders: {
      &#39;Accept&#39;: &#39;application/json&#39;,
      &#39;Content-Type&#39;: &#39;application/json&#39;
    }
  };

  payload = {
    &#39;user&#39;: {
      &#39;email&#39;: &#39;bigkahuna@surfsup.com&#39;,
      &#39;first_name&#39;: &#39;Big&#39;,
      &#39;gender&#39;: &#39;Male&#39;,
      &#39;id&#39;: 57,
      &#39;last_name&#39;: &#39;Kahuna&#39;
    }
  };

  postScope = nock(requestURL, requestGetHeaders)
              .get(addUserUrl)
              .reply(201, payload);

  deleteScope = nock(requestURL)
                .delete(removeUserUrl)
                .reply(204);
});

test.after(&#39;cleanup&#39;, () =&amp;gt; {
  nock.cleanAll();
});

test.cb(&#39;add user url should return 201 response and the newly added user&#39;, t =&amp;gt; {
  t.plan(3);
  const created = responseCodes[&#39;created&#39;];
  const req = request.agent(requestURL);
  req
    .get(addUserUrl)
      .set({
        &#39;Accept&#39;: &#39;application/json&#39;,
        &#39;Content-Type&#39;: &#39;application/json&#39;
      })
      .expect(res =&amp;gt; {
        t.is(res.status, created, &#39;201 Status Code should be returned&#39;);
        t.deepEqual(res.body, payload);
      })
      .end(() =&amp;gt; {
        t.is(postScope.isDone(), true, `POST ${addUserUrl} Nock Spy called`);
        t.end();
      });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Integration level tests typically use more dependencies than unit tests

&lt;ul&gt;
&lt;li&gt;Integration tests don&amp;rsquo;t use as many dependencies as a System Test though&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;automate-functional-tests&#34;&gt;Automate functional tests&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Functional tests can be automated using tools like Selenium and nightwatchjs&lt;/li&gt;
&lt;li&gt;Functional tests operate froma user&amp;rsquo;s perspective and are typically the longest running tests in your test suite&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;automate-system-tests&#34;&gt;Automate System Tests&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;System tests are longer to run than integration/component tests and usually involve multiple components&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;categorize-developer-tests&#34;&gt;Categorize Developer Tests&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;By categorizing your tests into distinct &amp;ldquo;buckets&amp;rdquo; you can run slower running tests

&lt;ul&gt;
&lt;li&gt;at different intervals in your automated test suite&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;run-faster-tests-first&#34;&gt;Run faster tests first&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Run your unit tests prior to running component, system, and functional tests.&lt;/li&gt;
&lt;li&gt;Make sure to categorize your tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;write-tests-for-defects&#34;&gt;Write Tests for Defects&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Increase your code coverage by writing tests based on new defects

&lt;ul&gt;
&lt;li&gt;Ensure that the defect does not surface again.&lt;/li&gt;
&lt;li&gt;This is also known as a regression test case&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;make-component-tests-repeatable&#34;&gt;Make Component Tests Repeatable&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Use database testing frameworks to make certain that the data is at a &amp;ldquo;known&amp;rdquo; state

&lt;ul&gt;
&lt;li&gt;This helps make Integration Tests repeatable&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;limit-test-case-assertions-if-possible&#34;&gt;Limit Test Case assertions if possible&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Spend less time tracking down the cause of a test failure by limiting your automated tests to 1 to 3 assertions&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;continuous-inspection&#34;&gt;Continuous Inspection&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#definition-of-cyclomatic-complexity&#34;&gt;Definition of Cyclomatic Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reduce-code-complexity&#34;&gt;Reduce Code Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dynamic-link-libraries-and-shared-libraries&#34;&gt;Dynamic Link Libraries and Shared Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#perform-design-reviews-continuously&#34;&gt;Perform Design Reviews Continuously&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#maintain-organizational-standards-with-code-audits&#34;&gt;Maintain Organizational Standards with Code Audits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reduce-duplicate-code&#34;&gt;Reduce Duplicate Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#assess-code-coverage&#34;&gt;Assess Code Coverage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;definition-of-cyclomatic-complexity&#34;&gt;Definition of Cyclomatic Complexity&lt;/h6&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cyclomatic_complexity&#34; target=&#34;_blank&#34;&gt;Cyclomatic Complexity&lt;/a&gt;
* Cyclomatic complexity is a software metric (measurement), used to indicate the complexity of a program.
* It is a quantitative measure of the number of linearly independent paths through a program&amp;rsquo;s source code.&lt;/p&gt;

&lt;h6 id=&#34;reduce-code-complexity&#34;&gt;Reduce Code Complexity&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Reduce cyclomatic complexity in your code base by leveraging automated inspectors

&lt;ul&gt;
&lt;li&gt;JavaScript

&lt;ul&gt;
&lt;li&gt;Eslint is a Linter but can do cyclomatic analysis to a degree&lt;/li&gt;
&lt;li&gt;Google Closure Compiler&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Java

&lt;ul&gt;
&lt;li&gt;CheckStyle&lt;/li&gt;
&lt;li&gt;PMD&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;.NET

&lt;ul&gt;
&lt;li&gt;FxCop&lt;/li&gt;
&lt;li&gt;NDepend&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Static Analyzers can identify areas of your code with higher complexity.&lt;/li&gt;
&lt;li&gt;Run these inspectors from your automated build.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;dynamic-link-libraries-and-shared-libraries&#34;&gt;Dynamic Link Libraries and Shared Libraries&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;During a compilation process several types of assemblies can be produced

&lt;ul&gt;
&lt;li&gt;An executable file (*.exe, a binary file)&lt;/li&gt;
&lt;li&gt;A dynamic link library file (*.dll)

&lt;ul&gt;
&lt;li&gt;Basic a Shared Library&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A lib is a unit of code that is bundled within your application executable.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;perform-design-reviews-continuously&#34;&gt;Perform Design Reviews Continuously&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Use tools that can help find assemblies that are highly dependent on other packages and lead to brittle architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;maintain-organizational-standards-with-code-audits&#34;&gt;Maintain Organizational Standards with Code Audits&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Reduce the amount of duplicate code in a code base through special tools&lt;/li&gt;
&lt;li&gt;Tools can pinpoint areas of higher code duplication based on custom thresholds&lt;/li&gt;
&lt;li&gt;Use tools like this for targeted refactorings&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;assess-code-coverage&#34;&gt;Assess Code Coverage&lt;/h6&gt;

&lt;p&gt;Typical Metrics by Code Coverage Tools like Istanbul&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Statements: How many of the statements in you code are executed.&lt;/li&gt;
&lt;li&gt;Branches: Conditional statements create branches of code which may not be executed (e.g. if/else).

&lt;ul&gt;
&lt;li&gt;This metric tells you how many of your branches have been executed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Functions: The proportion of the functions you have defined which have been called.&lt;/li&gt;
&lt;li&gt;Lines: The proportion of lines of code which have been executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These metrics can help identify areas of your code base that need more tests.&lt;/p&gt;

&lt;h4 id=&#34;continuous-deployment&#34;&gt;Continuous Deployment&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#release-working-software-at-anytime&#34;&gt;Release Working Software at Anytime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#run-all-tests&#34;&gt;Run all tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#label-a-repository&#39;s-assets&#34;&gt;Label a Repository&amp;rsquo;s Assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-build-feedback-reports&#34;&gt;Create Build Feedback Reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#produce-a-clean-environment&#34;&gt;Produce a clean environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#possess-capability-to-roll-back-release&#34;&gt;Possess Capability to Roll Back Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#label-each-build&#34;&gt;Label Each Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;release-working-software-at-anytime&#34;&gt;Release Working Software at Anytime&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Run a fully automated build including compilation, all tests, inspections, packaging and deployment

&lt;ul&gt;
&lt;li&gt;This gives you the capability to release working software at any time and in a know n environment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;run-all-tests&#34;&gt;Run all tests&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Run all tests for your software&lt;/li&gt;
&lt;li&gt;Includes Unit, Integration, System, Functional, Performance, Load, Smoke and any others&lt;/li&gt;
&lt;li&gt;Running all the tests ensure your software is ready to be delivered&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;label-a-repository-s-assets&#34;&gt;Label a Repository&amp;rsquo;s Assets&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Label the files for your project in version control&lt;/li&gt;
&lt;li&gt;This can be performed after a project mileston

&lt;ul&gt;
&lt;li&gt;For example in Git you can tag every release&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;create-build-feedback-reports&#34;&gt;Create Build Feedback Reports&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;List the changes that were made in recent builds.&lt;/li&gt;
&lt;li&gt;This can be useful for other teams in the delivery process, such as QA.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;produce-a-clean-environment&#34;&gt;Produce a clean environment&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Remove all files, configuration changes, servers from your integration build machine

&lt;ul&gt;
&lt;li&gt;This ensures you can rebuild back to a state where your integration build is successful&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The more scripted your build process is the better overall&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;possess-capability-to-roll-back-release&#34;&gt;Possess capability to roll back release&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Things go wrong during software development&lt;/li&gt;
&lt;li&gt;Use build labels to roll back any changes to get your software back to working state&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;label-each-build&#34;&gt;Label Each Build&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Label the binary artifacts of a build distribution in version control&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;continuous-feedback&#34;&gt;Continuous Feedback&lt;/h4&gt;

&lt;h6 id=&#34;the-right-information&#34;&gt;The Right Information&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;With automated build process you can determine the right information to be given to the right people&lt;/li&gt;
&lt;li&gt;Build status information like you can add to github/bitbucket are good build indicators&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;the-right-people&#34;&gt;The Right People&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that the right information goes to the right people&lt;/li&gt;
&lt;li&gt;Different people require different information&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t flood people with irrelevant information they will soon ignore them&lt;/li&gt;
&lt;li&gt;CI helps get the right information to the right people&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;the-right-time&#34;&gt;The Right Time&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Information that is old is not useful, if the build is broken you need to get notified immediately&lt;/li&gt;
&lt;li&gt;More time between defects will further gap that developers have for each particular software componet

&lt;ul&gt;
&lt;li&gt;Do you really remember what you did 2 months ago, 2 weeks ago?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;the-right-way&#34;&gt;The Right Way&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;The right way is choosing the most appropriate communication mechanism&lt;/li&gt;
&lt;li&gt;How to present said information and to whom&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;use-continuous-feedback-mechanisms&#34;&gt;Use Continuous Feedback Mechanisms&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;SMS (Text messages)&lt;/li&gt;
&lt;li&gt;Ambient Org, Lights&lt;/li&gt;
&lt;li&gt;Wide Screen Monitors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks

&lt;ul&gt;
&lt;li&gt;Building, testing, and deploying software.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Jenkins can be installed through native system packages, Docker,&lt;/li&gt;
&lt;li&gt;Jenkins can be run standalone by any machine with the Java Runtime Environment installed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;getting-started-1&#34;&gt;Getting Started&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins.io/doc/&#34; target=&#34;_blank&#34;&gt;Jenkins Download&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;Install with &lt;code&gt;homebrew&lt;/code&gt; with the command &lt;code&gt;brew install jenkins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;jenkins&lt;/code&gt; in the terminal&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;brew services start jenkins&lt;/code&gt; in order to have Jenkins run on login&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Open up a browser at &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34;&gt;Localhost&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/unlock-jenkins.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Enter Password from the command &lt;code&gt;cat /Users/Shared/Jenkins/Home/secrets/initialAdminPassword&lt;/code&gt; and copy the password&lt;/li&gt;
&lt;li&gt;Click Continue&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/install-plugins.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Select Plugins to Install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Search for node.js in list of plugins and click the checkbox&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/add-plugins.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click Install&lt;/li&gt;
&lt;li&gt;Wait for the installation to complete&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/create-user.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Save and Finish&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/jenkins-is-ready.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Start using Jenkins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/initial-screen.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;New Item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/add-new-item.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Enter a name for your first build&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Freestyle project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/configure-build.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Fill out sections where appropriate.&lt;/li&gt;
&lt;li&gt;Enter a &lt;code&gt;Repository URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Specify whether you want to poll or if you would like to use web hook.

&lt;ol&gt;
&lt;li&gt;If you specify polling you need to use crontab syntax &lt;code&gt;H */5 * * *&lt;/code&gt; which runs every 5 hours&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/github-webhook.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click Add Service and type in &lt;code&gt;Jenkins&lt;/code&gt; in the input box&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Click Execute Shell

&lt;ol&gt;
&lt;li&gt;Enter script that you would like to run&lt;/li&gt;
&lt;li&gt;In my case the following:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install &amp;amp;&amp;amp; npm test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Keep in mind your script can be whatever you need it to be&lt;/li&gt;
&lt;li&gt;It is running a bash environment&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Build Now&lt;/code&gt; to have your first build run&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/first-build.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click on the Build Number&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/build-screen.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Console Output&lt;/code&gt; in order to get details of the script&lt;/li&gt;
&lt;li&gt;In case a build fails there is where you want to go to.&lt;/li&gt;
&lt;li&gt;You can add Post Build Sections&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/manage-jenkins.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Manage Jenkins&lt;/code&gt; and then Click &lt;code&gt;Manage Plugins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enter the &lt;code&gt;Cobertura&lt;/code&gt; Plugin from the &lt;code&gt;available&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;Make sure to check Restart so that the plugin is available&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Configure&lt;/code&gt; and click on &lt;code&gt;Post-build Actions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/add-post-build-section.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Publish Cobertura Coverage Report&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add path to the report which in my case is &lt;code&gt;coverage/cobertura-coverage.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Build Now&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once build finished you should see a new section for code coverage&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/code-coverage.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go to the Continuous Integration Repo to setup your own private build &lt;a href=&#34;https://github.com/jbelmont/continuous-integration-with-jenkins-travis-and-circleci&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;travis-ci&#34;&gt;Travis CI&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Run the command &lt;code&gt;touch .travis.yml&lt;/code&gt; in the terminal&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sample-travis-yml-script&#34;&gt;Sample Travis yml script&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dist: trusty
sudo: required
language: node_js
node_js:
  - 6
env:
  - NODE_ENV=test
addons:
  rethinkdb: &#39;2.3.5&#39;
  sources:
    - google-chrome
  apt:
    packages:
      - oracle-java8-installer
      - oracle-java8-set-default
      - google-chrome-stable
before_script:
  - export CHROME_BIN=chromium-browser
  - &amp;quot;export DISPLAY=:99.0&amp;quot;
  - &amp;quot;sh -e /etc/init.d/xvfb start&amp;quot;
  - sleep 3
after_success:
  - npm run coveralls
  - npm run build &amp;amp;&amp;amp; npm run e2e
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;integrate-travis-ci-with-github&#34;&gt;Integrate Travis CI with Github&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Click settings on your repo&lt;/li&gt;
&lt;li&gt;Click Integrations &amp;amp; Services&lt;/li&gt;
&lt;li&gt;Add a Service&lt;/li&gt;
&lt;li&gt;Type in Travis&lt;/li&gt;
&lt;li&gt;Click Add Service&lt;/li&gt;
&lt;li&gt;Now Travis CI is configured as webhook when you push onto master&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;visit-travis-ci&#34;&gt;Visit Travis CI&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Enable your Public Github Repos

&lt;ul&gt;
&lt;li&gt;Authorize Github Access for Travis CI&lt;/li&gt;
&lt;li&gt;Toggle each repo that you want to have Travis CI enabled&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Create a Github Account &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;HERE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/github.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Sign Up for Travis CI &lt;a href=&#34;https://travis-ci.org/&#34; target=&#34;_blank&#34;&gt;HERE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/travis-ci-signup.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Then Click &lt;code&gt;Sign in With Github&lt;/code&gt; button&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/toggle-repo.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Authorize Github Access for Travis CI&lt;/li&gt;
&lt;li&gt;Click on your profile on the top right of page&lt;/li&gt;
&lt;li&gt;Search for your repo and toggle the check mark to turn on travis ci&lt;/li&gt;
&lt;li&gt;Travel to Travis CI Builds &lt;a href=&#34;https://travis-ci.org/jbelmont/&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;This goes to my travis ci builds&lt;/li&gt;
&lt;li&gt;Click on the build you want for example I clicked on the following build&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/travis-ci-build.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Notice that the log has several stages:&lt;/li&gt;
&lt;li&gt;Worker Information&lt;/li&gt;
&lt;li&gt;Build system information&lt;/li&gt;
&lt;li&gt;and more&lt;/li&gt;
&lt;li&gt;Everything is designated by the &lt;code&gt;.travis.yml&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Notice the code coverage run in the build&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/coverage.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;This output can be seen in the &lt;code&gt;Travis Logs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;read-documentation&#34;&gt;Read Documentation&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.travis-ci.com/&#34; target=&#34;_blank&#34;&gt;Travis CI Documentation&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read &lt;a href=&#34;https://docs.travis-ci.com/user/getting-started/&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt; for your given programming language&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&#34;https://docs.travis-ci.com/user/customizing-the-build/&#34; target=&#34;_blank&#34;&gt;Customizing the Build&lt;/a&gt; to setup lifecycle hooks like code coverage and more&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;yml-configuration&#34;&gt;YML configuration&lt;/h4&gt;

&lt;h6 id=&#34;yml-tutorial&#34;&gt;YML Tutorial&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;The `docker-compose.yml` file is a [YAML](http://yaml.org/) file defining [services](https://docs.docker.com/compose/compose-file/#service-configuration-reference), [networks](https://docs.docker.com/compose/compose-file/#network-configuration-reference) and [volumes](https://docs.docker.com/compose/compose-file/#volume-configuration-reference). The default path for a Compose file is `./docker-compose.yml`.


## Key-value pairs (Scalars)

* YAML keeps data stored as a map containing keys and values associated to those keys.
* This map is in no particular order, so you can reorder it at will. Each pair is in the format KEY: VALUE. 

 For example:

```json
name: &#39;John J&#39;
age: 32
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Note the &amp;lsquo;quotes&amp;rsquo; around the value. When the value is a text string&lt;/li&gt;
&lt;li&gt;The quotes are used to make sure any special characters are not given special meaning&lt;/li&gt;
&lt;li&gt;Instead all the values in quote are the value.&lt;/li&gt;
&lt;li&gt;So even though they are optional, using them is highly recommended.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YAML will consider that lines prefixed with more spaces than the parent key are contained inside it;
Moreover, all lines must be prefixed with the same amount of spaces to belong to the same map. So this works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;prop:
    subprop:
        value: &#39;(%person%) %name%&#39;
        value2: &#39;* %fruit% %rank%&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternative:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;prop:
        subprop:
                    value: &#39;(%person%) %name%&#39;
                    value2: &#39;* %fruit% %rank%&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example won&amp;rsquo;t work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;formatting:
from-game:
chat: &#39;(%sender%) %message%&#39;
action: &#39;* %sender% %message%&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;alternative-yaml-format&#34;&gt;Alternative YAML format&lt;/h4&gt;

&lt;p&gt;YAML supports an alternative syntax to store key-value maps, useful for compressing small maps into a single line.&lt;/p&gt;

&lt;p&gt;The syntax is: {KEY: VALUE, KEY: VALUE, &amp;hellip;}. The above example would become:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;formatting: {from-game: {chat: &#39;(%sender%) %message%&#39;, action: &#39;* %sender% %message%&#39;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;lists&#34;&gt;Lists&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Lists are used to store a collection of ordered values.&lt;/li&gt;
&lt;li&gt;The values are not associated with a key&lt;/li&gt;
&lt;li&gt;only with a positional index obtained from the order in which they are specified (item 1, item 2, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;block-sequences&#34;&gt;Block Sequences&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;- &#39;item 1&#39;
- &#39;item 2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;inline-sequences&#34;&gt;Inline Sequences&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;items: [&#39;item 1&#39;, &#39;item 2&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can have:
* Maps inside maps
* Lists inside maps
* Maps inside lists&lt;/p&gt;

&lt;h4 id=&#34;anchors&#34;&gt;Anchors&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;item:
  - method: UPDATE
    where: &amp;amp;FREE_ITEMS
      - Some Coat
      - Dress Shoes
    SellPrice: 1.5
    BuyPrice: 2.5

stuff:
  - method: MERGE
    item-merge: {name: Some Value Here}
    items: *FREE_ITEMS
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Any YAML node can be anchored and referenced elsewhere as an alias node.&lt;/li&gt;
&lt;li&gt;To anchor a particular value or set of values, use &lt;code&gt;&amp;amp;name of anchor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To reference an anchor, use &lt;code&gt;*name of anchor&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;circle-ci&#34;&gt;Circle CI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com/&#34; target=&#34;_blank&#34;&gt;Circle CI&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click Sign Up For Free&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/circle-ci-signup.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Authorize Github access for Circle CI&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/switch-org.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Here I click on my personal github username &lt;code&gt;jbelmont&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Toggle each repo that you want Circle CI to have access to&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;setup-circle-ci-yml-for-version-2&#34;&gt;Setup Circle CI yml for version 2&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;mkdir .circleci&lt;/code&gt; at the root of your repository&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;touch .circleci/config.yml&lt;/code&gt; at the root of your repository&lt;/li&gt;

&lt;li&gt;&lt;p&gt;These instructions are to setup circle ci version 2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;touch circle.yml&lt;/code&gt; for version 1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-config-yml&#34;&gt;Sample config.yml&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: 2
jobs:
  build:
    docker:
      - image: node:7.6.0
      - image: openjdk:8
    working_directory: ~/code-craftsmanship-organization/continuous-integration-with-jenkins-travis-and-circleci
    steps:
      - checkout
      - run:
          name: Pre-Dependencies
          command: mkdir -p ~/code-craftsmanship-organization/continuous-integration-with-jenkins-travis-and-circleci/artifacts
      - run:
          name: Install RethinkDB
          command: |
            apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 68576280 86E50310
            echo &amp;quot;deb http://download.rethinkdb.com/apt jessie main&amp;quot; | tee /etc/apt/sources.list.d/rethinkdb.list
            wget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | apt-key add -
            apt-get -y update -qq
            apt-get -y install rethinkdb
      - run:
          name: Install Latest Chrome
          command: bash scripts/get-latest-chrome.sh
      - run:
          name: Install Dependencies
          command: npm install
      - run:
          name: NPM Test
          command: npm test
      - run:
          name: Build Directory
          command: npm run build
      - run:
          name: Start RethinkDB
          command: rethinkdb --bind all --http-port 9090
          background: true
      - run:
          name: Run End To End Tests
          command: npm run e2e
      - store_artifacts:
          path: ~/code-craftsmanship-organization/continuous-integration-with-jenkins-travis-and-circleci/artifacts
      - add_ssh_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;integrate-circle-ci-with-github&#34;&gt;Integrate Circle CI with Github&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Click settings on your repo&lt;/li&gt;
&lt;li&gt;Click Integrations &amp;amp; Services&lt;/li&gt;
&lt;li&gt;Add a Service&lt;/li&gt;
&lt;li&gt;Type in Circle&lt;/li&gt;
&lt;li&gt;Click Add Service&lt;/li&gt;
&lt;li&gt;Now Circle CI is configured as webhook when you push onto master&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/circle-ci-webhook.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;check-status-of-your-build&#34;&gt;Check status of your build&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/list-of-builds.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click into a specific build&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/specific-build.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Notice here that the build lists each step and they all come from the steps you list in &lt;code&gt;config.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;read-docs-for-circle-ci&#34;&gt;Read Docs for Circle CI&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Read &lt;a href=&#34;https://circleci.com/docs/2.0/&#34; target=&#34;_blank&#34;&gt;Circle CI Documentation v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&#34;https://circleci.com/docs/1.0/&#34; target=&#34;_blank&#34;&gt;Circle CI Documentation v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Growing Object-Oriented Software, Guided by Tests</title>
      <link>https://www.marcelbelmont.com/post/growing-object-oriented-software-guided-by-tests/</link>
      <pubDate>Tue, 22 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/growing-object-oriented-software-guided-by-tests/</guid>
      <description>

&lt;h1 id=&#34;growing-object-oriented-software-guided-by-tests&#34;&gt;Growing Object Oriented Software Guided By Tests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-the-point-of-test-driven-development&#34;&gt;What is the Point of Test-Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-driven-development-with-objects&#34;&gt;Test-Driven Development with Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#an-introduction-to-the-tools&#34;&gt;An Introduction to the Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kick-starting-the-test-driven-cycle&#34;&gt;Kick-Starting the Test-Driven Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#maintaining-the-test-driven-cycle&#34;&gt;Maintaining The Test-Driven Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#object-oriented-style&#34;&gt;Object-Oriented Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;achieving-object-oriented-design&#34; target=&#34;_blank&#34;&gt;Achieving Object-Oriented Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-on-third-party-code&#34;&gt;Building on Third-Party Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commissioning-on-auction-sniper&#34;&gt;Commissioning on Auction Sniper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-walking-skeleton&#34;&gt;The Walking Skeleton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#passing-the-first-test&#34;&gt;Passing the First Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chapters-12-to-18&#34;&gt;Chapters 12 to 18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sniping-for-multiple-items&#34;&gt;Sniping for Multiple Items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#teasing-apart-main&#34;&gt;Teasing apart Main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filling-in-the-details&#34;&gt;Filling in the Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#listening-to-the-tests&#34;&gt;Listening to the Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-readability&#34;&gt;Test Readability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#constructing-complex-test-data&#34;&gt;Constructing Complex Test Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-diagnostics&#34;&gt;Test Diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-flexibility&#34;&gt;Test Flexibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chapters-25-to-27&#34;&gt;Chapters 25 to 27&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-the-point-of-test-driven-development&#34;&gt;What is the Point of Test-Driven Development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Feedback is the most fundamental tool at our disposal&lt;/li&gt;
&lt;li&gt;TDD is a practice that supports change&lt;/li&gt;
&lt;li&gt;You should never write new functionality without a failing test.&lt;/li&gt;
&lt;li&gt;This first chapter basically explains the benefits of TDD&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-driven-development-with-objects&#34;&gt;Test-Driven Development with Objects&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Objects should communicate their intent to other objects

&lt;ul&gt;
&lt;li&gt;Tell Don&amp;rsquo;t Ask principle&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mock Objects when you use &amp;ldquo;Tell Don&amp;rsquo;t Ask&amp;rdquo; principle&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;an-introduction-to-the-tools&#34;&gt;An Introduction to the Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Testing Tools are introduced in the chapter

&lt;ul&gt;
&lt;li&gt;JUnit and JMock are mentioned&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JavaScript Test Runners like &lt;code&gt;ava.js&lt;/code&gt;, &lt;code&gt;mocha.js&lt;/code&gt;, and &lt;code&gt;jest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sinon.js&lt;/code&gt;, and &lt;code&gt;testdouble.js&lt;/code&gt; serve as mocking libraries&lt;/li&gt;
&lt;li&gt;Test Fixtures are mentioned in this chapter as well&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;kick-starting-the-test-driven-cycle&#34;&gt;Kick-Starting the Test-Driven Cycle&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Using Test Fixtures and Mock Objects is mentioned&lt;/li&gt;
&lt;li&gt;Examples are using JUnit and JMock&lt;/li&gt;
&lt;li&gt;A test fixture is the fixed state that exists at the start of a test.&lt;/li&gt;
&lt;li&gt;A test fixture ensures that a test is repeatable

&lt;ul&gt;
&lt;li&gt;Every time a test is run it starts in the same state so it should produce the same results.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A fixture may be set up before the test runs and torn down after it has finished&lt;/li&gt;
&lt;li&gt;Assertion Libraries are talked about but mainly how to write tests using assertions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;maintaining-the-test-driven-cycle&#34;&gt;Maintaining The Test-Driven Cycle&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Start each feature with an acceptance test&lt;/li&gt;
&lt;li&gt;An acceptance test basically is how you test a feature in a UI&lt;/li&gt;
&lt;li&gt;An acceptance test should fail unti the feature is implemented&lt;/li&gt;
&lt;li&gt;Find the simplest success case&lt;/li&gt;
&lt;li&gt;User Acceptance Tests (UATs) should be easy to read&lt;/li&gt;
&lt;li&gt;You should be unit testing behavior and not methods&lt;/li&gt;
&lt;li&gt;Pay attention to trouble areas that are hard to test

&lt;ul&gt;
&lt;li&gt;This indicates a possible area for refactoring&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;object-oriented-style&#34;&gt;Object-Oriented Style&lt;/h2&gt;

&lt;p&gt;Object Oriented Design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have clear &lt;code&gt;separation of concerns&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Behavior should be grouped in logical places&lt;/li&gt;
&lt;li&gt;This helps isolate changes to &lt;code&gt;areas of concern&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Group components into &lt;code&gt;Higher Levels of Abstraction&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t program with variables and control flow in mind but instead with larger abstractions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Encapsulation is a concept where behavior of an object is only affected through its API&lt;/li&gt;
&lt;li&gt;Information Hiding deals with the fact that Objects should hide lower level work in its API from public use&lt;/li&gt;
&lt;li&gt;Every object should have only have responsibility aka &lt;code&gt;Single Responsibility Principle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The Composition of several objects should be simpler than the sum of all the objects&lt;/li&gt;
&lt;li&gt;Objects should have enough &lt;code&gt;context&lt;/code&gt; of their environment&lt;/li&gt;
&lt;li&gt;Whatever information you need should be passed in or to put it another way you can use &lt;code&gt;dependency injection&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;achieving-object-oriented-design&#34;&gt;Achieving Object-Oriented Design&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Writing test first influence the design of a system&lt;/li&gt;
&lt;li&gt;TDD with mock objects expresses intent that you should mock an object&amp;rsquo;s peer dependencies but not the internals of an object&lt;/li&gt;
&lt;li&gt;Value types is mentioned with explicit caveat that they are immmutable while Objects are stateful&lt;/li&gt;
&lt;li&gt;An object should be broken apart if it becomes difficult to test&lt;/li&gt;
&lt;li&gt;Interfaces should be not be fat and with that being said you will need more interfaces&lt;/li&gt;
&lt;li&gt;You will need more interfaces in order to keep your interfaces &lt;code&gt;lean&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This means you should refactor interfaces as well&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;System Behavior should rely on composition and not inheritance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;building-on-third-party-code&#34;&gt;Building on Third-Party Code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You should only mock object that you own&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t mock third party code&lt;/li&gt;
&lt;li&gt;Instead write an Adapter Layer&lt;/li&gt;
&lt;li&gt;Write a Database Adapter Layer so that if you change databases you can easily swap them out&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;commissioning-on-auction-sniper&#34;&gt;Commissioning on Auction Sniper&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A user scenario is described in this chapter detailing the auction process&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-walking-skeleton&#34;&gt;The Walking Skeleton&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In this chapter the first test is described which is an end to end test&lt;/li&gt;
&lt;li&gt;One example library that comes to mind is &lt;code&gt;Nightwatch.js&lt;/code&gt; and &lt;code&gt;Cypress.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;These libraries help you write end to end tests in modern web UIs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;passing-the-first-test&#34;&gt;Passing the First Test&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;TODOLIST&lt;/em&gt; is used in this chapter and the first item is crossed out&lt;/li&gt;
&lt;li&gt;An important concept that I derive is that User Workflows help influence the design and indicate important UI elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;chapters-12-to-18&#34;&gt;Chapters 12 to 18&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;These chapters essential detail iterating through software design&lt;/li&gt;
&lt;li&gt;Small slices of behavior should be tested and implemented iteratively&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t be afraid of changing design of the system while iterating through a User Workflow&lt;/li&gt;
&lt;li&gt;Architecture should be developed incrementally&lt;/li&gt;
&lt;li&gt;Types in a system should be defined with &lt;code&gt;Domain Types&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modelling systems with &lt;code&gt;Domain Types&lt;/code&gt; helps better describe a software system&lt;/li&gt;
&lt;li&gt;Avoid using Magic Numbers or Strings&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;handling-failure&#34;&gt;Handling Failure&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use smaller methods or utility methods that act as helpers for objects&lt;/li&gt;
&lt;li&gt;Logging should be designed as a feature

&lt;ul&gt;
&lt;li&gt;Avoid scattering logging statements all throughout a system&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;listening-to-the-tests&#34;&gt;Listening to the Tests&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An interesting point is made that implicit dependencies are still dependencies&lt;/li&gt;
&lt;li&gt;A good corollary to this can be made with npm dependencies&lt;/li&gt;
&lt;li&gt;Typically npm dependencies have dependencies of their own and if not isolated they carry an implicit dependency of their own&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t mock values or immutable values since you can just create instances but instead mock stateful objects&lt;/li&gt;
&lt;li&gt;Bloated &lt;code&gt;constructors&lt;/code&gt; ones that take many parameters should signal a refactor possibly add a service or a message broker&lt;/li&gt;
&lt;li&gt;Bloated &lt;code&gt;constructors&lt;/code&gt; can also signal that an object has too many responsilities&lt;/li&gt;
&lt;li&gt;You shouldn&amp;rsquo;t have too many test assertions in any given test this probably signals that you should broke apart a test&lt;/li&gt;
&lt;li&gt;A test should have few assertions/expectations&lt;/li&gt;
&lt;li&gt;Knowledge of an object should be as close to the origin

&lt;ul&gt;
&lt;li&gt;Keeping knowledge close helps make pluggable components&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We should explicitly name a behavior to help control the behavior&lt;/li&gt;
&lt;li&gt;Try to add more names in order to extract more domain information&lt;/li&gt;
&lt;li&gt;Pass behavior rather than data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-readability&#34;&gt;Test Readability&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Test Names should describe Features of a system&lt;/li&gt;
&lt;li&gt;Tests should follow a structure like this:

&lt;ul&gt;
&lt;li&gt;Setup&lt;/li&gt;
&lt;li&gt;Execute Actions&lt;/li&gt;
&lt;li&gt;Teardown&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Test structure should help explain behavior and should help share valuable information&lt;/li&gt;
&lt;li&gt;Delegate to subordinate objects&lt;/li&gt;
&lt;li&gt;Assertions/Expectations should communicate the exact behavior of a system&lt;/li&gt;
&lt;li&gt;Avoid magic variables and instead use constants that explicitly show intent&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;constructing-complex-test-data&#34;&gt;Constructing Complex Test Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A builder pattern helps in constructing complex test data&lt;/li&gt;
&lt;li&gt;Builder pattern helps break apart complex test data into some chainable methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-diagnostics&#34;&gt;Test Diagnostics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tests are made to fail&lt;/li&gt;
&lt;li&gt;We want tests to fail or report failures when they occur&lt;/li&gt;
&lt;li&gt;Write small and focused tests that are well named&lt;/li&gt;
&lt;li&gt;Add explanatory statements in test assertion/expections to help find error in a stack trace&lt;/li&gt;
&lt;li&gt;Use test matchers for detailing methods&lt;/li&gt;
&lt;li&gt;Tests should be self describing&lt;/li&gt;
&lt;li&gt;Tracer objects help map where failures occur&lt;/li&gt;
&lt;li&gt;Write a Failing Test ==&amp;gt; Make Diagnostics Clear ==&amp;gt; Make Tests Pass ==&amp;gt; Refactor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test-flexibility&#34;&gt;Test Flexibility&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Write precise assertions/expectations or just test the relevant parts of a method&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;chapters-25-to-27&#34;&gt;Chapters 25 to 27&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Persistence or CRUD actions can be tested with fine-grained integration tests&lt;/li&gt;
&lt;li&gt;Unit testing concurrent code can be difficult and it is easy to receive false positives&lt;/li&gt;
&lt;li&gt;Test Asychronous code by testing incremental changes in the UI&lt;/li&gt;
&lt;li&gt;Using timers can deliver false positives on UI changes&lt;/li&gt;
&lt;li&gt;Take snapshots of the UI throughout the lifecycle of the User Workflow&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OWASP and Software Security</title>
      <link>https://www.marcelbelmont.com/post/software-security/</link>
      <pubDate>Fri, 18 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/software-security/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#software-security&#34;&gt;Software Security&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#difference-between-software-security-and-application-security&#34;&gt;Difference between Software Security and Application Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#language-based-security&#34;&gt;Language-Based Security&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#objectives-of-language-based-security&#34;&gt;Objectives of Language Based Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#application-level-security&#34;&gt;Application Level Security&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#definition&#34;&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#terms&#34;&gt;Terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#techniques&#34;&gt;Techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#application-threats-or-attacks&#34;&gt;Application threats or attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp&#34;&gt;OWASP&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#background-on-owasp&#34;&gt;Background on OWASP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-core-values&#34;&gt;OWASP Core Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-principles&#34;&gt;OWASP Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-mailing-lists&#34;&gt;OWASP Mailing Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-chapter&#34;&gt;OWASP Chapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-membership&#34;&gt;OWASP Membership&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-projects&#34;&gt;OWASP Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-github-organization&#34;&gt;OWASP Github Organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-member-portal&#34;&gt;OWASP Member Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-top-10&#34;&gt;OWASP Top 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#owasp-top-10-comparison-table-for-2013-vs-2017&#34;&gt;OWASP Top 10 comparsion table for 2013 vs 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#github-repository&#34;&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;software-security&#34;&gt;Software Security&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Software security entails software that continues to function correctly under malicious attack.&lt;/li&gt;
&lt;li&gt;Most engineers acknowledge that security is important but don&amp;rsquo;t know the steps to tackle security&lt;/li&gt;
&lt;li&gt;Software security best practices leverage good software engineering practice

&lt;ul&gt;
&lt;li&gt;Involve thinking about security early in the software lifecycle, knowing and understanding common threats&lt;/li&gt;
&lt;li&gt;Including language-based flaws and pitfalls&lt;/li&gt;
&lt;li&gt;designing for security&lt;/li&gt;
&lt;li&gt;Putting all software components thorough objective risk analyses and testing.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;difference-between-software-security-and-application-security&#34;&gt;Difference between Software Security and Application Security&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.garymcgraw.com/&#34; target=&#34;_blank&#34;&gt;Gary McGraw&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gary McGraw maintains that application security is a reactive approach, taking place once software has been deployed. Software security, on the other hand, involves a proactive approach, taking place within the pre-deployment phase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://www.synopsys.com/blogs/software-security/application-security-vs-software-security/&#34; target=&#34;_blank&#34;&gt;Difference between Software Security and Application Security&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Software security (pre-deployment) activities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Secure software design&lt;/li&gt;
&lt;li&gt;Development of secure coding guidelines for developers to follow&lt;/li&gt;
&lt;li&gt;Development of secure configuration procedures and standards for the deployment phase&lt;/li&gt;
&lt;li&gt;Secure coding that follows established guidelines&lt;/li&gt;
&lt;li&gt;Validation of user input and implementation of a suitable encoding strategy&lt;/li&gt;
&lt;li&gt;User authentication&lt;/li&gt;
&lt;li&gt;User session management&lt;/li&gt;
&lt;li&gt;Function level access control&lt;/li&gt;
&lt;li&gt;Use of strong cryptography to secure data at rest and in transit&lt;/li&gt;
&lt;li&gt;Validation of third-party components&lt;/li&gt;
&lt;li&gt;Arrest of any flaws in software design/architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application security (post-deployment) activities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Post deployment security tests&lt;/li&gt;
&lt;li&gt;Capture of flaws in software environment configuration&lt;/li&gt;
&lt;li&gt;Malicious code detection (implemented by the developer to create backdoor, time bomb)&lt;/li&gt;
&lt;li&gt;Patch/upgrade

&lt;ul&gt;
&lt;li&gt;Meaning that situations like third party software or dependencies needing to be patched&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IP filtering

&lt;ul&gt;
&lt;li&gt;White List Known Good IP addresses instead of leaving a bunch IP addresses open&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lock down executables

&lt;ul&gt;
&lt;li&gt;This in my mind goes more hand in hand with compiled languages but I could be wrong&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Monitoring of programs at runtime to enforce the software use policy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;language-based-security&#34;&gt;Language-Based Security&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Language-based_security&#34; target=&#34;_blank&#34;&gt;Language Based Security&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Language-based security (LBS) is a set of techniques that may be used to strengthen the security of applications on a high level by using the properties of programming languages. LBS is considered to enforce computer security on an application-level, making it possible to prevent vulnerabilities which traditional operating system security is unable to handle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;objectives-of-language-based-security&#34;&gt;Objectives of Language Based Security&lt;/h3&gt;

&lt;p&gt;Objective of Language-based security:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prevent common programming errors such as allowing buffer overflows and illegal information flows to occur&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Provide some proof to the consumer about the security properties of the software&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helps the consumer trust the software without having to check source code for errors.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A compiler, taking source code as input, performs several language specific operations on the code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lexical analysis, preprocessing, parsing, semantic analysis, code generation, and code optimization&lt;/li&gt;
&lt;li&gt;By analyzing the source code and gathering best practices for the language&lt;/li&gt;
&lt;li&gt;The compiler will attempt to correctly translate the high-level code into low-level code

&lt;ul&gt;
&lt;li&gt;Preserving the behavior of the program.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For Dynamic Libraries such as Javasript/Node.js you can use tools such as eslint that help with static analysis and best practices that you should follow&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;application-level-security&#34;&gt;Application Level Security&lt;/h2&gt;

&lt;h3 id=&#34;definition&#34;&gt;Definition&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Encompasses measures taken to improve the security of an application

&lt;ul&gt;
&lt;li&gt;By finding, fixing and preventing security vulnerabilities.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;terms&#34;&gt;Terms&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Asset

&lt;ul&gt;
&lt;li&gt;Data in a database, money in an account, file on the filesystem or any system resource.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Vulnerability

&lt;ul&gt;
&lt;li&gt;A gap in security program that can be exploited by threats to gain unauthorized access to an asset.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Attack

&lt;ul&gt;
&lt;li&gt;An action taken to harm an asset.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Threat

&lt;ul&gt;
&lt;li&gt;Anything that can exploit a vulnerability and obtain, damage, or destroy an asset.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;techniques&#34;&gt;Techniques&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Code review

&lt;ul&gt;
&lt;li&gt;Security engineer who understands the application through manually reviewing the source code notices avenues of exploit.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Blackbox security audit

&lt;ul&gt;
&lt;li&gt;This is testing an application for security vulnerabilities not looking at source code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Design review

&lt;ul&gt;
&lt;li&gt;Thinking about possible threat models before writing code or using a spec that has it detailed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tooling

&lt;ul&gt;
&lt;li&gt;Automated tools that check security vulnerabilities&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;application-threats-or-attacks&#34;&gt;Application threats or attacks&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Category&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Threats / Attacks&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Input Validation&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Buffer overflow; cross-site scripting; SQL injection; canonicalization&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Software Tampering&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Attacker modifies an existing application&amp;rsquo;s runtime behavior to perform unauthorized actions; exploited via binary patching, code substitution, or code extension&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Authentication&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Network eavesdropping ; Brute force attack; dictionary attacks; cookie replay; credential theft&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Authorization&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Elevation of privilege; disclosure of confidential data; data tampering; luring attacks&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Configuration management&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Unauthorized access to administration interfaces; unauthorized access to configuration stores; retrieval of clear text configuration data; lack of individual accountability; over-privileged process and service accounts&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Sensitive information&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Access sensitive code or data in storage; network eavesdropping; code/data tampering&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Session management&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Session hijacking; session replay; man in the middle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Cryptography&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Poor key generation or key management; weak or custom encryption&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Parameter manipulation&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Query string manipulation; form field manipulation; cookie manipulation; HTTP header manipulation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Exception management&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Information disclosure; denial of service&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Auditing and logging&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;User denies performing an operation; attacker exploits an application without trace; attacker covers his or her tracks&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Application_security&#34; target=&#34;_blank&#34;&gt;Application Security&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;owasp&#34;&gt;OWASP&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The Open Web Application Security Project (OWASP)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;background-on-owasp&#34;&gt;Background on OWASP&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Mission is to make software security visible, so that individuals/organizations can make informed decisions.&lt;/li&gt;
&lt;li&gt;Operates as a community of security minded professionals&lt;/li&gt;
&lt;li&gt;OWASP issues software tools and knowledge-based documentation on application security.&lt;/li&gt;
&lt;li&gt;The OWASP Foundation came online on December 1st 2001 it was established as a not-for-profit charitable org&lt;/li&gt;
&lt;li&gt;In the United States on April 21, 2004 to ensure the ongoing availability and support for our work at OWASP.&lt;/li&gt;
&lt;li&gt;OWASP is an international organization and the OWASP Foundation supports OWASP efforts around the world.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;owasp-core-values&#34;&gt;OWASP Core Values&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;OPEN Everything at OWASP is radically transparent from our finances to our code.&lt;/li&gt;
&lt;li&gt;INNOVATION OWASP encourages and supports innovation and experiments for solutions to software security challenges.&lt;/li&gt;
&lt;li&gt;GLOBAL Anyone around the world is encouraged to participate in the OWASP community.&lt;/li&gt;
&lt;li&gt;INTEGRITY OWASP is an honest and truthful, vendor neutral, global community.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;owasp-principles&#34;&gt;OWASP Principles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Free &amp;amp; Open&lt;/li&gt;
&lt;li&gt;Governed by rough consensus &amp;amp; running code&lt;/li&gt;
&lt;li&gt;Abide by a code of ethics (see ethics)&lt;/li&gt;
&lt;li&gt;Not-for-profit&lt;/li&gt;
&lt;li&gt;Not driven by commercial interests&lt;/li&gt;
&lt;li&gt;Risk based approach&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;owasp-mailing-lists&#34;&gt;OWASP Mailing Lists&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://lists.owasp.org/mailman/listinfo&#34; target=&#34;_blank&#34;&gt;Mailing Lists&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-chapter&#34;&gt;OWASP Chapter&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Triangle&#34; target=&#34;_blank&#34;&gt;Triangle OWASP Chapter&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-membership&#34;&gt;OWASP Membership&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Membership&#34; target=&#34;_blank&#34;&gt;OWASP Members&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-projects&#34;&gt;OWASP Projects&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Project&#34; target=&#34;_blank&#34;&gt;OWASP Projects&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-github-organization&#34;&gt;OWASP Github Organization&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/OWASP&#34; target=&#34;_blank&#34;&gt;OWASP Github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-member-portal&#34;&gt;OWASP Member Portal&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Portal&#34; target=&#34;_blank&#34;&gt;Member Portal&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-top-10&#34;&gt;OWASP Top 10&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project#tab=OWASP_Top_10_for_2017_Release_Candidate&#34; target=&#34;_blank&#34;&gt;Top 10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be reviewing the OWASP top 10 list for this workshop&lt;/p&gt;

&lt;p&gt;OWASP Top 10 Most Critical Web Application Security Risks (in the Release Candidate) are:
* Injection
* Broken Authentication and Session Management
* Cross-Site Scripting (XSS)
* Broken Access Control (As it was in 2004)
* Security Misconfiguration
* Sensitive Data Exposure
* Insufficient Attack Protection (NEW)
* Cross-Site Request Forgery (CSRF)
* Using Components with Known Vulnerabilities
* Underprotected APIs (NEW)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/OWASP/Top10/raw/master/2017/OWASP%20Top%2010%20-%202017%20RC1-English.pdf&#34; target=&#34;_blank&#34;&gt;OWASP Top 10 2017 Release Candidate&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;owasp-top-10-comparsion-table-for-2013-vs-2017&#34;&gt;OWASP Top 10 comparsion table for 2013 vs 2017&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;OWASP Top 10 – 2013 (Previous)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;OWASP Top 10 – 2017 (New)&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A1 - Injection&lt;/td&gt;
&lt;td&gt;A1 - Injection&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A2 - Broken Authentication and Session Management&lt;/td&gt;
&lt;td&gt;A2 - Broken Authentication and Session Management&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A3 - Cross-Site Scripting (XSS)&lt;/td&gt;
&lt;td&gt;A3 - Cross-Site Scripting (XSS)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A4 - Insecure Direct Object References - Merged with A7&lt;/td&gt;
&lt;td&gt;A4 - Broken Access Control (Original category in &lt;sup&gt;2003&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2004&lt;/sub&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A5 - Security Misconfiguration&lt;/td&gt;
&lt;td&gt;A5 - Security Misconfiguration&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A6 - Sensitive Data Exposure&lt;/td&gt;
&lt;td&gt;A6 - Sensitive Data Exposure&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A7 - Missing Function Level Access Control - Merged with A4&lt;/td&gt;
&lt;td&gt;A7 – Insufficient Attack Protection (NEW)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A8 – Cross-Site Request Forgery (CSRF)&lt;/td&gt;
&lt;td&gt;A8 – Cross-Site Request Forgery (CSRF)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A9 – Using Components with Known Vulnerabilities&lt;/td&gt;
&lt;td&gt;A9 – Using Components with Known Vulnerabilities&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;A10 – Unvalidated Redirects and Forwards -Dropped&lt;/td&gt;
&lt;td&gt;A10 – UnderprotectedAPIs (NEW)Release NotesRN&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Threat Agents&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Attack Vectors&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Weakness Prevalence&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Weakness Detectability&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Technical Impacts&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Business Impacts&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;App Specific&lt;/td&gt;
&lt;td&gt;Easy&lt;/td&gt;
&lt;td&gt;Widespread&lt;/td&gt;
&lt;td&gt;Easy&lt;/td&gt;
&lt;td&gt;Severe&lt;/td&gt;
&lt;td&gt;App/Business Specific&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;App Specific&lt;/td&gt;
&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;Common&lt;/td&gt;
&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;Moderate&lt;/td&gt;
&lt;td&gt;App/Business Specific&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;App Specific&lt;/td&gt;
&lt;td&gt;Difficult&lt;/td&gt;
&lt;td&gt;Uncommon&lt;/td&gt;
&lt;td&gt;Difficult&lt;/td&gt;
&lt;td&gt;Minor&lt;/td&gt;
&lt;td&gt;App/Business Specific&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;github-repository&#34;&gt;Github Repository&lt;/h2&gt;

&lt;p&gt;If you like this information then please star this repository on Github at &lt;a href=&#34;https://github.com/jbelmont/software-security&#34; target=&#34;_blank&#34;&gt;Software Security&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Review of Design Like a Pro</title>
      <link>https://www.marcelbelmont.com/post/a-review-of-design-like-a-pro/</link>
      <pubDate>Wed, 16 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/a-review-of-design-like-a-pro/</guid>
      <description>

&lt;h1 id=&#34;design-like-a-pro-review&#34;&gt;Design Like a Pro Review&lt;/h1&gt;

&lt;p&gt;This is a review of Mark Miller&amp;rsquo;s Course (Design Like a Pro)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#interesting-points-of-the-course&#34;&gt;Interesting Points of the Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-was-surprising&#34;&gt;What was surprising&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-mark-miller-did-well&#34;&gt;What Mark Miller did well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-could-have-been-done-better&#34;&gt;What could have been done better&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#purchase-the-course&#34;&gt;Purchase the Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;interesting-points-of-the-course&#34;&gt;Interesting Points of the Course&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An interesting fact of the course is how much proximity plays a role with UI.&lt;/li&gt;
&lt;li&gt;If elements of a UI are placed in close proximity, users typically assume they are related&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So if you should group related items in a UI in close proximity&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;contrast&#34;&gt;Contrast&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Contrast is also important in UI

&lt;ul&gt;
&lt;li&gt;For example if you hover a button the contrast should be small not large&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;proximity&#34;&gt;Proximity&lt;/h3&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/gas-station-buttons.jpeg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;In this picture notice that the label of the Gas Type is inside the button&lt;/li&gt;
&lt;li&gt;Mark Miller explains that having the element in close proximity to the action is key&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/elevator-buttons.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;Notice that in this picture the proximity and the layout of the buttons in the elevator are confusing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;borders&#34;&gt;Borders&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Another interesting point made is about Borders

&lt;ul&gt;
&lt;li&gt;Borders Contrast should be low and should be thin&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/bad-html-table.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;Notice that in this table borders are rubbing up next to each other&lt;/li&gt;
&lt;li&gt;The lines are more prominent and the actual data is hard to extract&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/nicer-html-table.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;In this table the borders are thin and the table is much easier to read&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;controls&#34;&gt;Controls&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Another point of the course talks about controls&lt;/li&gt;
&lt;li&gt;Users don&amp;rsquo;t read tons of text if you have to present information then consider a tooltip&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;text&#34;&gt;Text&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There was a section detailing how text can confuse dyslexic readers&lt;/li&gt;
&lt;li&gt;This really goes hand and hand with modern web accesibility design&lt;/li&gt;
&lt;li&gt;If you design UIs with users that may have disabilities in mind then general readers benefit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My key takeaways for text:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don&amp;rsquo;t use black and white instead use gray and off-white&lt;/li&gt;
&lt;li&gt;Use concise sentences instead of long paragraphs.&lt;/li&gt;
&lt;li&gt;Increase Padding in between paragraphs.&lt;/li&gt;
&lt;li&gt;Left-justify text&lt;/li&gt;
&lt;li&gt;Use single spaces after sentences and never double space&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;information-dimension&#34;&gt;Information Dimension&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Serial (through time)&lt;/th&gt;
&lt;th&gt;Parallel (in space)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Takes longer to consume&lt;/td&gt;
&lt;td&gt;Evaluated instantly&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Comparisons are hard&lt;/td&gt;
&lt;td&gt;Comparisons are easy&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Burden on recall&lt;/td&gt;
&lt;td&gt;No burden on recall&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Pacing Issues&lt;/td&gt;
&lt;td&gt;Viewer controls Pace&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Harder to Understand&lt;/td&gt;
&lt;td&gt;Easier to Understand&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see from the table above it is easier to present information in parallel over serial to users&lt;/p&gt;

&lt;h3 id=&#34;graphic-language&#34;&gt;Graphic Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Match known physical items to make symbols easier to read&lt;/li&gt;
&lt;li&gt;Graphic Language should be independent of color&lt;/li&gt;
&lt;li&gt;There should be consistency of colors&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.marcelbelmont.com/media/olympic-graphics.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Notice here in both the simplicity of the icons but the clarity in their message&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can clearly tell each sport in each graphic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-was-surprising&#34;&gt;What was surprising&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I was surprised to learn that simplicity of design seems to be the hardest thing to get right&lt;/li&gt;
&lt;li&gt;Fancy effects don&amp;rsquo;t provide as much value as clarity of intent&lt;/li&gt;
&lt;li&gt;Accomodating to users with disabilities improves overall design&lt;/li&gt;
&lt;li&gt;Proximity of elements natural groups elements so you have to get the right proximity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-mark-miller-did-well&#34;&gt;What Mark Miller did well&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mark Miller know how to clearly explain key design principles that help you build great UIs&lt;/li&gt;
&lt;li&gt;The course is rich with imagery and clear examples on what constitutes good UIs&lt;/li&gt;
&lt;li&gt;There is also a great transition from the Science of Great UI course

&lt;ul&gt;
&lt;li&gt;Incremental steps on each course help facilitate key design points&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-could-have-been-done-better&#34;&gt;What could have been done better&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There wasn&amp;rsquo;t any mention of using Sketch app and instead Adobe Creative Cloud was heavily used&lt;/li&gt;
&lt;li&gt;It would be great to mention tools like Sketch and Omnigraffle&lt;/li&gt;
&lt;li&gt;More opinions on using design tools would be nice although it might detract from the course intent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Overall this course is wonderfully crafted, job well done&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;purchase-the-course&#34;&gt;Purchase the Course&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;http://app.deviq.com/courses/design-like-a-pro&#34; target=&#34;_blank&#34;&gt;Design Like a Pro&lt;/a&gt; to purchase and watch this great course.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Caching, Memoization, and Redis</title>
      <link>https://www.marcelbelmont.com/post/caching-and-memoization/</link>
      <pubDate>Sun, 13 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/caching-and-memoization/</guid>
      <description>

&lt;h1 id=&#34;caching&#34;&gt;Caching&lt;/h1&gt;

&lt;h2 id=&#34;what-is-caching&#34;&gt;What Is Caching?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Caching is the term for storing reusable responses in order to make subsequent requests faster.&lt;/li&gt;
&lt;li&gt;There are different types of caching available.&lt;/li&gt;
&lt;li&gt;Application caches and memory caches are both popular for their ability to speed up certain responses.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;types-of-cache&#34;&gt;Types of Cache&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Disk cache: The page cache in main memory is managed by the operating system kernel.&lt;/li&gt;
&lt;li&gt;Web cache&lt;/li&gt;
&lt;li&gt;Memoization

&lt;ol&gt;
&lt;li&gt;A cache can store data that is computed on demand rather than retrieved from a backing store.&lt;/li&gt;
&lt;li&gt;Memoization is an optimization technique that stores the results of resource-consuming function calls within a lookup table, allowing subsequent calls to reuse the stored results and avoid repeated computation.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;web-caching&#34;&gt;Web Caching&lt;/h2&gt;

&lt;p&gt;Web caching is a core design feature of the HTTP protocol
    * It is meant to minimize network traffic while improving perceived responsiveness of the system as a whole.&lt;/p&gt;

&lt;p&gt;Caches are found at every level of a content&amp;rsquo;s journey from the original server to the browser.&lt;/p&gt;

&lt;p&gt;Web caching works by caching the HTTP responses for requests according to certain rules.&lt;/p&gt;

&lt;p&gt;Subsequent requests for cached content can then be fulfilled from a cache closer to the user instead of sending the request all the way back to the web server.&lt;/p&gt;

&lt;h2 id=&#34;benefits&#34;&gt;Benefits&lt;/h2&gt;

&lt;p&gt;Effective caching aids both content consumers and content providers.&lt;/p&gt;

&lt;p&gt;Some of the benefits that caching brings to content delivery are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Decreased network costs: Content can be cached at various points in the network path between the content consumer and content origin.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the content is cached closer to the consumer, requests will not add network latency&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Improved responsiveness: Caching enables content to be retrieved faster because an entire network round trip is not necessary.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Caches maintained close to the user, like the browser cache, can make this retrieval nearly instantaneous.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Increased performance on the same hardware&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the server where the content originated, more performance can be squeezed from the same hardware by allowing aggressive caching.&lt;/li&gt;
&lt;li&gt;The content owner can leverage the powerful servers along the delivery path to take the brunt of certain content loads.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Availability of content during network interruptions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Certain caches can be used to serve content even when if unavailable for short periods of time from the origin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;terminology&#34;&gt;Terminology&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Origin server: The origin server is the original location of the content.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are acting as the web server administrator, this is the machine that you control.&lt;/li&gt;
&lt;li&gt;It is responsible for serving any content that could not be retrieved from a cache along the request route&lt;/li&gt;
&lt;li&gt;Setting the caching policy for all content.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cache hit ratio: A cache&amp;rsquo;s effectiveness is measured in terms of its cache hit ratio or hit rate.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is a ratio of the requests able to be retrieved from a cache to the total requests made.&lt;/li&gt;
&lt;li&gt;A high cache hit ratio means that a high percentage of the content was able to be retrieved from the cache.  * This is usually the desired outcome for most administrators.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Freshness: Term used to describe whether an item in cache is considered a candidate to serve to a client.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Content in a cache will only be used to respond if it is within the freshness time frame specified by the caching policy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stale content: Items in the cache expire according to the cache freshness settings in the caching policy.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expired content is &amp;ldquo;stale&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expired content cannot be used to respond to client requests. The origin server must be re-contacted to retrieve the new content or at least verify that the cached content is still accurate.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Validation: Stale items in the cache can be validated in order to refresh their expiration time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validation involves checking with the origin server to see if cached content is still up to date&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Invalidation: Invalidation is the process of removing content from the cache before its expiration date.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Triggered if the item is changed on the origin server and an outdated item in cache causes client issues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cacheable-content&#34;&gt;Cacheable Content&lt;/h2&gt;

&lt;p&gt;Items that don&amp;rsquo;t tend to change frequently are good candidates for caching.&lt;/p&gt;

&lt;p&gt;Cache Friendly Content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logos and brand images&lt;/li&gt;
&lt;li&gt;Nav Icons&lt;/li&gt;
&lt;li&gt;Style sheets&lt;/li&gt;
&lt;li&gt;Javascript files&lt;/li&gt;
&lt;li&gt;Downloadable Content&lt;/li&gt;
&lt;li&gt;Media Files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More volatile items to cache:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML pages&lt;/li&gt;
&lt;li&gt;Rotating images&lt;/li&gt;
&lt;li&gt;Heavily modified JavaScript and CSS files&lt;/li&gt;
&lt;li&gt;Content tied to auth (Cookies, Tokens, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some items that should almost never be cached are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sensitive Dat (banking info, social security numbers, credit card numbers)&lt;/li&gt;
&lt;li&gt;user specific information that can change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Web Content Cache Locations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Browser cache: Web browsers themselves maintain a small cache.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browsers sets a policy that dictates the most important items to cache.&lt;/li&gt;
&lt;li&gt;This may be user-specific content or content deemed expensive to download and likely to be requested again.&lt;/li&gt;
&lt;li&gt;We will explore IndexDb and Local Storage&lt;/li&gt;
&lt;li&gt;In memory caching as well&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Intermediary caching proxies: Any server in between the client and infrastructure can cache certain content.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;These caches may be maintained by ISPs or other independent parties.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reverse Cache: Your server infrastructure can implement its own cache for backend services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Content can be served from the point of contact instead of hitting backend servers on each request.

&lt;ul&gt;
&lt;li&gt;For example hitting a database for each route that has cacheable content&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;caching-http-headers&#34;&gt;Caching HTTP Headers&lt;/h2&gt;

&lt;p&gt;Caching policy is dependent upon two different factors:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The caching entity itself gets to decide whether or not to cache acceptable content.&lt;/li&gt;
&lt;li&gt;It can decide to cache less than it is allowed to cache, but never more.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;The majority of caching behavior is determined by the caching policy, which is set by the content owner.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These policies are mainly exercises through the use of specific HTTP headers.&lt;/p&gt;

&lt;p&gt;Cache-focused HTTP Headers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Expires: The Expires header is very straight-forward, although fairly limited in scope.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set a time in the future when the content will expire.&lt;/li&gt;
&lt;li&gt;At this point, any requests for the same content will have to go back to the origin server.&lt;/li&gt;
&lt;li&gt;This header is probably best used only as a fall back.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cache-Control: This is the more modern replacement for the Expires header.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is well supported and implements a much more flexible design.&lt;/li&gt;
&lt;li&gt;In almost all cases, this is preferable to Expires, but it may not hurt to set both values.&lt;/li&gt;
&lt;li&gt;We will discuss the specifics of the options you can set with Cache-Control a bit later.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Etag: The Etag header is used with cache validation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The origin can provide a unique Etag for an item when it initially serves the content.&lt;/li&gt;
&lt;li&gt;When a cache needs to validate the content it has on-hand upon expiration, it can send back the Etag it has for the content.&lt;/li&gt;
&lt;li&gt;The origin will either tell the cache that the content is the same, or send the updated content and new Etag&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Last-Modified: Specifies the last time that the item was modified.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This may be used as part of the validation strategy to ensure fresh content.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Content-Length: This header is important to set when defining caching policies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Certain software will refuse to cache content if it does not know in advanced the size of the content&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Vary: A cache will use the requested host and the path to the resource as the key to store the cache item.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Vary header can be used to tell caches to pay attention to an additional header when deciding whether a request is for the same item.&lt;/li&gt;
&lt;li&gt;Tells caches to key by the Accept-Encoding header as well, so that the cache will know to differentiate between compressed and uncompressed content.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cache-control-flags&#34;&gt;Cache-Control Flags&lt;/h2&gt;

&lt;p&gt;Cache-Control options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;no-cache: Specifies that any cached content must be re-validated on each request before being served to client.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contents is marked as stale immediately, but uses revalidation techniques to avoid re-downloading again&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;no-store: This instruction indicates that the content cannot be cached in any way.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is appropriate to set if the response represents sensitive data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;public: This marks the content as public, meaning it can be cached by the browser and any intermediate caches.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For requests that HTTP authentication, responses are marked private by default.&lt;/li&gt;
&lt;li&gt;This header overrides that setting.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More options can be found at &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&#34; target=&#34;_blank&#34;&gt;Cache Control&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Options can be used in different ways to achieve various caching behavior.&lt;/p&gt;

&lt;h2 id=&#34;developing-a-caching-strategy&#34;&gt;Developing a Caching Strategy&lt;/h2&gt;

&lt;p&gt;Ideally everything would be cached and your servers would only be contacted to validate content occasionally.&lt;/p&gt;

&lt;p&gt;This doesn&amp;rsquo;t often happen in practice though, so you should try to set some sane caching policies that aim to balance between implementing long-term caching and responding to the demands of a changing site.&lt;/p&gt;

&lt;h2 id=&#34;common-issues-with-caching&#34;&gt;Common Issues with Caching&lt;/h2&gt;

&lt;p&gt;There are many situations where caching cannot or should not be implemented due to how the content is produced&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dynamic content generated by users&lt;/li&gt;
&lt;li&gt;Sensitive information such as banking information, etc.&lt;/li&gt;
&lt;li&gt;Older versions of your content are already out even though new versions have been published.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;general-recommendations&#34;&gt;General Recommendations&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Specific directories for images, css, and shared content&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Placing content into dedicated directories will allow you to easily refer to them from any page on your site.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the same URL to refer to the same items&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caches key off of both the host and the path to the content requested&lt;/li&gt;
&lt;li&gt;Ensure that you refer to your content in the same way on all of your pages.&lt;/li&gt;
&lt;li&gt;The previous recommendation makes this significantly easier.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use CSS image sprites where possible&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sprites for items like icons and navigation decrease the number of round trips needed to render your site&lt;/li&gt;
&lt;li&gt;Allowing your site to cache that single sprite for a long time.&lt;/li&gt;
&lt;li&gt;Use Single SVG file instead of multiple svg as well&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Host scripts and external resources locally where possible&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you utilize javascript scripts and other external resources, consider hosting those resources on your own dedicated servers if the correct headers are not being provided upstream.&lt;/li&gt;
&lt;li&gt;Keep up to date with downstream changes however so you can update your local copy&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fingerprint cache items&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For static content like CSS and Javascript files, it may be appropriate to fingerprint each item.&lt;/li&gt;
&lt;li&gt;This means adding a unique identifier to the filename (often a hash of the file) so that if the resource is modified, the new resource name can be requested, causing the requests to correctly bypass the cache.&lt;/li&gt;
&lt;li&gt;There are a variety of tools that can assist in creating fingerprints and modifying the references to them within HTML documents.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow all caches to store generic assets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static content and content that is not user-specific should be cached at all points in the delivery chain.&lt;/li&gt;
&lt;li&gt;This will allow intermediary caches to respond with the content for multiple users.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow browsers to cache user-specific assets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For per-user content, it is often acceptable and useful to allow caching within the user&amp;rsquo;s browser.&lt;/li&gt;
&lt;li&gt;Caching in the browser will allow for instant retrieval for users during subsequent visits.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make exceptions for essential time-sensitive content&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sites that have a shopping cart should reflect the items in the cart immediately.

&lt;ul&gt;
&lt;li&gt;The no-cache or no-store options can be set in the Cache-Control header to achieve this.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Always provide validators&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validators allow stale content to be refreshed without having to download the entire resource again.&lt;/li&gt;
&lt;li&gt;Setting the Etag and the Last-Modified headers allow caches to validate their content and re-serve it if it has not been modified at the origin, further reducing load.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set long freshness times for supporting content&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Items like images and css that don&amp;rsquo;t change often&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set short freshness times for parent content&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The HTML itself will be downloaded frequently, allowing it to respond to changes rapidly.&lt;/li&gt;
&lt;li&gt;The supporting content can then be cached aggressively.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The key is to strike a balance that favors aggressive caching where possible while leaving opportunities to invalidate entries in the future when changes are made.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each Site will likely have the following items:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Aggressively cached items&lt;/li&gt;
&lt;li&gt;Cached items with a short freshness time and the ability to re-validate&lt;/li&gt;
&lt;li&gt;Items that should not be cached at all&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;The goal is to move content into the first and second category when possible while maintaining an acceptable level of accuracy.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;memoization&#34;&gt;Memoization&lt;/h2&gt;

&lt;p&gt;Memoization is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34; target=&#34;_blank&#34;&gt;Memoization&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The term &amp;ldquo;memoization&amp;rdquo; was coined by Donald Michie in 1968[5] and is derived from the Latin word &amp;ldquo;memorandum&amp;rdquo; (&amp;ldquo;to be remembered&amp;rdquo;), usually truncated as &amp;ldquo;memo&amp;rdquo; in the English language, and thus carries the meaning of &amp;ldquo;turning [the results of] a function into something to be remembered.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A memoized function &amp;ldquo;remembers&amp;rdquo; the results corresponding to some set of specific inputs.&lt;/p&gt;

&lt;p&gt;Subsequent Function calls with remembered inputs return the remembered result rather than recalculating the result
Thus eliminating the primary cost of a call with given parameters from all but the first call made to the function.&lt;/p&gt;

&lt;p&gt;A function can only be memoized if it is referentially transparent
if calling the function has exactly the same effect as replacing that function call with its return value.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Memoization is a run-time rather than compile-time optimization.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Memoization is heavily used in compilers for functional programming languages, which often use call by name evaluation strategy.&lt;/p&gt;

&lt;p&gt;Memoization incurs a higher memory overhead since we must store our cached results so that we can later recall them
Therefore memoization only makes sense for functions that are computationally expensive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jsfiddle.net/jbelmont/ane0p1ra/10/&#34; target=&#34;_blank&#34;&gt;jsFiddle Memoization Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://es6console.com/j2npui2h/&#34; target=&#34;_blank&#34;&gt;ES6 Console Example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;web-sql&#34;&gt;Web SQL&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/webdatabase/&#34; target=&#34;_blank&#34;&gt;Web SQL&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;

&lt;p&gt;There are following three core methods defined in the spec that I.m going to cover in this tutorial −
* openDatabase − This method creates the database object either using existing database or creating new one.
* transaction − This method give us the ability to control a transaction and performing either commit or roll-back based on the situation.
* executeSql − This method is used to execute actual SQL query.&lt;/p&gt;

&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function prepareDatabase(ready, error) {
  return openDatabase(&#39;documents&#39;, &#39;1.0&#39;, &#39;Offline document storage&#39;, 5*1024*1024, function (db) {
    db.changeVersion(&#39;&#39;, &#39;1.0&#39;, function (t) {
      t.executeSql(&#39;CREATE TABLE docids (id, name)&#39;);
    }, error);
  });
}

function showDocCount(db, span) {
  db.readTransaction(function (t) {
    t.executeSql(&#39;SELECT COUNT(*) AS c FROM docids&#39;, [], function (t, r) {
      span.textContent = r.rows[0].c;
    }, function (t, e) {
      // couldn&#39;t read database
      span.textContent = &#39;(unknown: &#39; + e.message + &#39;)&#39;;
    });
  });
}

prepareDatabase(function(db) {
  // got database
  var span = document.getElementById(&#39;doc-count&#39;);
  showDocCount(db, span);
}, function (e) {
  // error getting database
  alert(e.message);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;plunker-playground&#34;&gt;Plunker Playground&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://plnkr.co/edit/znJwyXsqVvHVegqS7Vrd?p=preview&#34; target=&#34;_blank&#34;&gt;https://plnkr.co/edit/znJwyXsqVvHVegqS7Vrd?p=preview&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;indexdb&#34;&gt;IndexDB&lt;/h2&gt;

&lt;h2 id=&#34;higher-level-overview-of-indexdb&#34;&gt;Higher Level Overview of IndexDB&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This API uses indexes to enable high-performance searches of this data.&lt;/li&gt;
&lt;li&gt;Web Storage is useful for storing smaller amounts of data, but less useful for storing larger amounts of structured data.

&lt;ul&gt;
&lt;li&gt;IndexedDB provides a solution for this&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;accessing-indexdb&#34;&gt;Accessing IndexDB&lt;/h2&gt;

&lt;p&gt;In Chrome you can inspect &lt;code&gt;IndexDb&lt;/code&gt; in the Application Tab in the Developer Tools&lt;/p&gt;

&lt;p&gt;We will look at indexdb in the running UI application&lt;/p&gt;

&lt;h2 id=&#34;running-the-application&#34;&gt;Running the application&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Visit &lt;a href=&#34;https://github.com/jbelmont/caching-and-memoization/blob/master/docs/indexdb.md&#34; target=&#34;_blank&#34;&gt;Caching and Memoization Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm run dev&lt;/code&gt; in order to start the application&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;local-storage&#34;&gt;Local Storage&lt;/h2&gt;

&lt;h3 id=&#34;local-storage-api&#34;&gt;Local Storage API&lt;/h3&gt;

&lt;p&gt;Methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getItem&lt;/li&gt;
&lt;li&gt;setItem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&#34; target=&#34;_blank&#34;&gt;Local Storage&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;jsfiddle-example&#34;&gt;JSFiddle Example&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://jsfiddle.net/jbelmont/ow6zLsdk/59/&#34; target=&#34;_blank&#34;&gt;Local Storage&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;redis&#34;&gt;Redis&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/download&#34; target=&#34;_blank&#34;&gt;Redis Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://try.redis.io/&#34; target=&#34;_blank&#34;&gt;Redis REPL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jbelmont/caching-and-memoization&#34; target=&#34;_blank&#34;&gt;Caching and Memoization Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redis is not a plain key-value store, it is actually a data structures server, supporting different kinds of values.&lt;/p&gt;

&lt;p&gt;Redis Data Structures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Binary-safe strings.&lt;/li&gt;
&lt;li&gt;Lists: collections of string elements sorted according to the order of insertion. They are basically linked lists.&lt;/li&gt;
&lt;li&gt;Sets: collections of unique, unsorted string elements.&lt;/li&gt;
&lt;li&gt;Sorted sets, similar to Sets but where every string element is associated to a floating number value, called score.&lt;/li&gt;
&lt;li&gt;Hashes, which are maps composed of fields associated with values. Both the field and the value are strings.&lt;/li&gt;
&lt;li&gt;Bit arrays (or simply bitmaps): it is possible, using special commands, to handle String values like an array of bits&lt;/li&gt;
&lt;li&gt;HyperLogLogs: this is a probabilistic data structure which is used in order to estimate the cardinality of a set.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;redis-database&#34;&gt;Redis Database&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In Redis, databases are simply identified by a number with the default database being number 0.&lt;/li&gt;
&lt;li&gt;If you want to change to a different database you can do so via the select command.&lt;/li&gt;
&lt;li&gt;In the command line interface, type select 1.&lt;/li&gt;
&lt;li&gt;Redis should reply with an OK message and your prompt should change to something like &lt;code&gt;redis 127.0.0.1:6379[1]&amp;gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you want to switch back to the default database, just enter select 0 in the command line interface&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;redis-commands&#34;&gt;Redis Commands&lt;/h2&gt;

&lt;p&gt;Redis commands are grouped by functionality&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sets

&lt;ul&gt;
&lt;li&gt;Unique Elements.&lt;/li&gt;
&lt;li&gt;Available commands: sadd, scard, sismember&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lists:

&lt;ul&gt;
&lt;li&gt;collections of string elements&lt;/li&gt;
&lt;li&gt;Available commands: llen, lpush&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Keys&lt;/li&gt;
&lt;li&gt;Hashes

&lt;ul&gt;
&lt;li&gt;consist of key and value pairs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find all the available Redis Commands here &lt;a href=&#34;https://redis.io/commands&#34; target=&#34;_blank&#34;&gt;Redis Commands&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can filter by functionality because the default is to show all the Redis Commands&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;redis-clients&#34;&gt;Redis Clients&lt;/h2&gt;

&lt;p&gt;You can find all the available Redis Client Libraries here &lt;a href=&#34;https://redis.io/clients&#34; target=&#34;_blank&#34;&gt;Redis Clients&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The particular client we will be using for the workshop is &lt;a href=&#34;https://github.com/NodeRedis/node_redis&#34; target=&#34;_blank&#34;&gt;Node Redis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redis breaks out uses for data structures according to how they should be used albeit lists, hashes, scalars, and sets&lt;/p&gt;

&lt;p&gt;This means that if you have JSON object in Redis you can&amp;rsquo;t just store like an json object
Also nested json objects should either be stringified with &lt;code&gt;JSON.stringify(obj)&lt;/code&gt; or used with a hash data structure&lt;/p&gt;

&lt;h2 id=&#34;querying-redis&#34;&gt;Querying Redis&lt;/h2&gt;

&lt;p&gt;Redis stores everything as a key so you can&amp;rsquo;t use it like you would think as a normal query language&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT * from Books where Books.id = 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A type of query such as this wouldn&amp;rsquo;t work in Redis&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use lots of key-value pairs in Redis.&lt;/li&gt;
&lt;li&gt;So feel free to store each row of the table in a different row.&lt;/li&gt;
&lt;li&gt;Use Redis&amp;rsquo; hash map data type&lt;/li&gt;
&lt;li&gt;Form key name from primary key values of the table by a separator (such as &amp;ldquo;:&amp;ldquo;)&lt;/li&gt;
&lt;li&gt;Store the remaining fields as a hash&lt;/li&gt;
&lt;li&gt;When you want to query a single row, directly form the key and retrieve its results&lt;/li&gt;
&lt;li&gt;When you want to query a range, use wild char &amp;ldquo;*&amp;rdquo; towards your key.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;memory-and-persistence-in-redis&#34;&gt;Memory and Persistence in Redis&lt;/h2&gt;

&lt;p&gt;Redis is an in-memory persistent store&lt;/p&gt;

&lt;p&gt;Redis keeps all your data in memory so there is an associated cost for this in terms of Server RAM&lt;/p&gt;

&lt;h2 id=&#34;redis-data-structures&#34;&gt;Redis Data Structures&lt;/h2&gt;

&lt;h4 id=&#34;strings&#34;&gt;Strings&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/data-types#strings&#34; target=&#34;_blank&#34;&gt;String Data Type&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/commands#string&#34; target=&#34;_blank&#34;&gt;String Commands&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; set movies:rocky &#39;{ &amp;quot;name&amp;quot;: rocky, &amp;quot;characters&amp;quot;: [&amp;quot;Rocky Balboa&amp;quot;, &amp;quot;Paulie&amp;quot;, &amp;quot;Adrien&amp;quot;] }&#39;
OK

&amp;gt; get movies:rocky
&amp;quot;{ \&amp;quot;name\&amp;quot;: rocky, \&amp;quot;characters\&amp;quot;: [\&amp;quot;Rocky Balboa\&amp;quot;, \&amp;quot;Paulie\&amp;quot;, \&amp;quot;Adrien\&amp;quot;] }&amp;quot;

&amp;gt; strlen movies:rocky
(integer) 69

&amp;gt; append movies:rocky &amp;quot;Yo Adrian&amp;quot;
(integer) 78

&amp;gt; get movies:rocky
&amp;quot;{ \&amp;quot;name\&amp;quot;: rocky, \&amp;quot;characters\&amp;quot;: [\&amp;quot;Rocky Balboa\&amp;quot;, \&amp;quot;Paulie\&amp;quot;, \&amp;quot;Adrien\&amp;quot;] }Yo Adrian&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice above here that the string Yo Adrian was appended to the JSON object which doesn&amp;rsquo;t really make sense
A JSON object can&amp;rsquo;t really be represented as a string&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;127.0.0.1:6379[1]&amp;gt; help incr
INCR key
summary: Increment the integer value of a key by one
since: 1.0.0
group: string

127.0.0.1:6379[1]&amp;gt; incr random:num
(integer) 1

127.0.0.1:6379[1]&amp;gt; incr random:num
(integer) 2

127.0.0.1:6379[1]&amp;gt; help incrby
INCRBY key increment
summary: Increment the integer value of a key by the given amount
since: 1.0.0
group: string

127.0.0.1:6379[1]&amp;gt; incrby num:incr 10
(integer) 10

127.0.0.1:6379[1]&amp;gt; incrby num2:incr 25
(integer) 25

127.0.0.1:6379[1]&amp;gt; incr movies:rocky
(error) ERR value is not an integer or out of range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notice here that trying to increment movies:rocky created a Redis error which makes sense movies:rocky is a string&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&#34;exercise&#34;&gt;Exercise&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Implement redis command &lt;code&gt;incr&lt;/code&gt; using node_redis client library &lt;a href=&#34;https://github.com/jbelmont/node_redis&#34; target=&#34;_blank&#34;&gt;Node Redis&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;open &lt;code&gt;playground/strings.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open test/unit/strings.test.js&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Write a test with your new function&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Run your test with command &lt;code&gt;npm test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hashes&#34;&gt;Hashes&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/data-types#hashes&#34; target=&#34;_blank&#34;&gt;Hash Data Type&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/commands#hash&#34; target=&#34;_blank&#34;&gt;Hash Commands&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hashes are like strings except you have a field value&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;127.0.0.1:6379[1]&amp;gt; hset users:user name bob
(integer) 1

127.0.0.1:6379[1]&amp;gt; hget users:user name
&amp;quot;bob&amp;quot;

127.0.0.1:6379[1]&amp;gt; hmset movie:fields name &amp;quot;Rocky&amp;quot; rating 5 year 1976
OK

127.0.0.1:6379[1]&amp;gt; HGETALL movie:fields
1) &amp;quot;name&amp;quot;
2) &amp;quot;Rocky&amp;quot;
3) &amp;quot;rating&amp;quot;
4) &amp;quot;5&amp;quot;
5) &amp;quot;year&amp;quot;
6) &amp;quot;1976&amp;quot;

127.0.0.1:6379[1]&amp;gt; hkeys movie:fields
1) &amp;quot;name&amp;quot;
2) &amp;quot;rating&amp;quot;
3) &amp;quot;year&amp;quot;

127.0.0.1:6379[1]&amp;gt; hkeys movie:fields
1) &amp;quot;name&amp;quot;
2) &amp;quot;rating&amp;quot;
3) &amp;quot;year&amp;quot;

127.0.0.1:6379[1]&amp;gt; hdel movie:fields rating
(integer) 1

127.0.0.1:6379[1]&amp;gt; hkeys movie:fields
1) &amp;quot;name&amp;quot;
2) &amp;quot;year&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we were able to set multiple fields with the Redis command &lt;code&gt;hmset&lt;/code&gt; and get all the values with &lt;code&gt;hgetall&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hashes give you more control than regular strings because you can map values instead of one scalar value&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&#34;exercise-1&#34;&gt;Exercise&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Implement redis command &lt;code&gt;hdel&lt;/code&gt; using node_redis client library &lt;a href=&#34;https://github.com/jbelmont/node_redis&#34; target=&#34;_blank&#34;&gt;Node Redis&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;open &lt;code&gt;playground/hashes.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open test/unit/hashes.test.js&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Write a test with your new function&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Run your test with command &lt;code&gt;npm test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;lists&#34;&gt;Lists&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/data-types#lists&#34; target=&#34;_blank&#34;&gt;List Data Type&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/commands#list&#34; target=&#34;_blank&#34;&gt;List Commands&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;127.0.0.1:6379&amp;gt; lpush users &amp;quot;soldier&amp;quot; &amp;quot;John Rambo&amp;quot; &amp;quot;123-45-5678&amp;quot; &amp;quot;Sergeant First Class&amp;quot;
(integer) 4

127.0.0.1:6379&amp;gt; lindex users 0
&amp;quot;Sergeant First Class&amp;quot;

127.0.0.1:6379&amp;gt; lindex users 1
&amp;quot;123-45-5678&amp;quot;

127.0.0.1:6379&amp;gt; lindex users 2
&amp;quot;John Rambo&amp;quot;

127.0.0.1:6379&amp;gt; lindex users 3
&amp;quot;soldier&amp;quot;

127.0.0.1:6379[1]&amp;gt; lpop users
&amp;quot;Sergeant First Class&amp;quot;

127.0.0.1:6379&amp;gt; llen users
(integer) 3

127.0.0.1:6379[1]&amp;gt; rpop users
&amp;quot;soldier&amp;quot;

127.0.0.1:6379&amp;gt; rpop users
&amp;quot;soldier&amp;quot;
127.0.0.1:6379&amp;gt; llen users
(integer) 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice here that we pushed 4 strings onto the list &lt;code&gt;users&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lindex&lt;/code&gt; takes a key and a index and returns the value if found else it returns &lt;code&gt;nil&lt;/code&gt; so the lookup:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lindex users 2&lt;/code&gt; return &amp;ldquo;John Rambo&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Notice that &lt;code&gt;rpop&lt;/code&gt; removes and returns the last element of the list stored at &lt;code&gt;key&lt;/code&gt; so when we run &lt;code&gt;llen&lt;/code&gt; the list has been reduced by 1.&lt;/p&gt;

&lt;p&gt;Conversely &lt;code&gt;lpop&lt;/code&gt; removes and returns the first element of the list stored at &lt;code&gt;key&lt;/code&gt; so when we run &lt;code&gt;llen&lt;/code&gt; again the list is now length of 2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement redis command &lt;code&gt;llen&lt;/code&gt; or &lt;code&gt;rpop&lt;/code&gt; using node_redis client library &lt;a href=&#34;https://github.com/jbelmont/node_redis&#34; target=&#34;_blank&#34;&gt;Node Redis&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;open &lt;code&gt;playground/list.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open test/unit/list.test.js&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Write a test with your new function&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Run your test with command &lt;code&gt;npm test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sets&#34;&gt;Sets&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/data-types#sets&#34; target=&#34;_blank&#34;&gt;Set Data Type&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/commands#set&#34; target=&#34;_blank&#34;&gt;Set Commands&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sets are great for tagging or tracking any other properties of a value for which duplicates don’t make any sense&lt;/li&gt;
&lt;li&gt;Sets are also greate when you want to apply set operations such as intersections and unions&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;127.0.0.1:6379&amp;gt; sadd movies &amp;quot;Rocky&amp;quot;
(integer) 1

127.0.0.1:6379&amp;gt; sadd movies &amp;quot;The Matrix&amp;quot;
(integer) 1

127.0.0.1:6379&amp;gt; sadd movies &amp;quot;Chinese Connection&amp;quot;
(integer) 1

127.0.0.1:6379&amp;gt; scard movies
(integer) 3

127.0.0.1:6379&amp;gt; sadd movies2 &amp;quot;Rocky&amp;quot;
(integer) 1

127.0.0.1:6379&amp;gt; sadd movies2 &amp;quot;Rambo&amp;quot;
(integer) 1

127.0.0.1:6379&amp;gt; sadd movies2 &amp;quot;Chinese Connection&amp;quot;
(integer) 1

127.0.0.1:6379&amp;gt; sdiff movies movies2
1) &amp;quot;The Matrix&amp;quot;

127.0.0.1:6379&amp;gt; sinter movies movies2
1) &amp;quot;Rocky&amp;quot;
2) &amp;quot;Chinese Connection&amp;quot;

127.0.0.1:6379&amp;gt; sunion movies movies2
1) &amp;quot;The Matrix&amp;quot;
2) &amp;quot;Chinese Connection&amp;quot;
3) &amp;quot;Rocky&amp;quot;
4) &amp;quot;Rambo&amp;quot;

127.0.0.1:6379&amp;gt; sismember movies &amp;quot;Rocky&amp;quot;
(integer) 1

127.0.0.1:6379&amp;gt; smembers movies2
1) &amp;quot;Rambo&amp;quot;
2) &amp;quot;Rocky&amp;quot;
3) &amp;quot;Chinese Connection&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice here that created 2 different sets &lt;code&gt;movies&lt;/code&gt; and &lt;code&gt;movies2&lt;/code&gt; and we were able to do set operations on them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sinter&lt;/code&gt; returns the intersection between 2 or more sets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sdiff&lt;/code&gt; returns the set difference between 2 or more sets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sunion&lt;/code&gt; returns the all the movies that exist in the specified sets or more plainly the union between the sets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scard&lt;/code&gt; returns the total number of elements or &lt;code&gt;cardinality&lt;/code&gt; of the set&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sismember&lt;/code&gt; returns 1 (i.e. true) if a value exists in the set&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smembers&lt;/code&gt; returns all the values in the set&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sadd&lt;/code&gt; adds one or more members to a set&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read more commands at &lt;a href=&#34;https://redis.io/commands#set&#34; target=&#34;_blank&#34;&gt;Redis Set Commands&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement redis command &lt;code&gt;sismember&lt;/code&gt; or &lt;code&gt;sunion&lt;/code&gt; using node_redis client library &lt;a href=&#34;https://github.com/jbelmont/node_redis&#34; target=&#34;_blank&#34;&gt;Node Redis&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;open &lt;code&gt;playground/set.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open test/unit/set.test.js&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Write a test with your new function&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Run your test with command &lt;code&gt;npm test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sorted-sets&#34;&gt;Sorted Sets&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/data-types#sorted-sets&#34; target=&#34;_blank&#34;&gt;Sorted Set Data Type&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/commands#sorted_set&#34; target=&#34;_blank&#34;&gt;Sorted Set Commands&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redis Sorted Sets are, similarly to Redis Sets, non repeating collections of Strings&lt;/li&gt;
&lt;li&gt;The difference is that every member of a Sorted Set is associated with score

&lt;ul&gt;
&lt;li&gt;The score helps order the set,&lt;/li&gt;
&lt;li&gt;From the smallest to the greatest score&lt;/li&gt;
&lt;li&gt;While members are unique, scores may be repeated.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;127.0.0.1:6379&amp;gt; zadd grades 95 britney 85 dave 93 ashley 100 zhou
(integer) 4

127.0.0.1:6379&amp;gt; zcard grades
(integer) 4

127.0.0.1:6379&amp;gt; zrange grades 0 -1
1) &amp;quot;dave&amp;quot;
2) &amp;quot;ashley&amp;quot;
3) &amp;quot;britney&amp;quot;
4) &amp;quot;zhou&amp;quot;

127.0.0.1:6379&amp;gt; zrevrank grades dave
(integer) 3

127.0.0.1:6379&amp;gt; zrevrank grades zhou
(integer) 0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zadd&lt;/code&gt; added 4 members to the grades sorted set&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zcard&lt;/code&gt; returned the cardinality value of 4&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zrange&lt;/code&gt; returned the lowest to highest members in the sorted set&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;zrevrank&lt;/code&gt; returned the index of a member in a sorted set, with scores ordered from high to low&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Implement redis command &lt;code&gt;zcard&lt;/code&gt; using node_redis client library &lt;a href=&#34;https://github.com/jbelmont/node_redis&#34; target=&#34;_blank&#34;&gt;Node Redis&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;open &lt;code&gt;playground/sortedSet.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;open test/unit/sortedSet.test.js&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write a test with your new function&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run your test with command &lt;code&gt;npm test&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;github-repository&#34;&gt;Github Repository&lt;/h2&gt;

&lt;p&gt;If you like this information then please star this repository on Github at &lt;a href=&#34;https://github.com/jbelmont/caching-and-memoization&#34; target=&#34;_blank&#34;&gt;Caching and Memoization&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Review of the Science Of Great UI</title>
      <link>https://www.marcelbelmont.com/post/a-review-of-science-of-great-ui/</link>
      <pubDate>Tue, 01 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/a-review-of-science-of-great-ui/</guid>
      <description>

&lt;h1 id=&#34;the-science-of-great-ui-review&#34;&gt;The Science of Great UI Review&lt;/h1&gt;

&lt;p&gt;This repository is a review of Mark Miller&amp;rsquo;s Course (The Science of Great UI)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#converting-light-into-understanding&#34;&gt;Converting Light into Understanding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#certainty-,-ambiguity-,-context&#34;&gt;Certainty, Ambiguity, Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#grouping&#34;&gt;Grouping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#symbols&#34;&gt;Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cognitive-load&#34;&gt;Cognitive Load&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#granularity&#34;&gt;Granularity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visual-search&#34;&gt;Visual Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#background-and-foreground-part-1&#34;&gt;Background and Foreground (part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#noise-,-weak-signal-,-and-clarity&#34;&gt;Noise, Weak Signal, and Clarity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#recognition-vs.-recall-,-orienteering-,-and-paths&#34;&gt;Recognition vs. Recall, Orienteering, and Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#responsiveness-&amp;amp;-the-feedback-loop&#34;&gt;Responsiveness &amp;amp; The Feedback Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#discoverability&#34;&gt;Discoverability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wrapping-up-efficiency-in-thought-and-motion&#34;&gt;Wrapping Up Efficiency in Thought and Motion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#personal-thoughts&#34;&gt;Personal Thoughts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#purchase-the-course&#34;&gt;Purchase the Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mark Miller discusses high level concepts that the course will review&lt;/li&gt;
&lt;li&gt;Miller also talks about a concept called Dark Design patterns very briefly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;converting-light-into-understanding&#34;&gt;Converting Light into Understanding&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Interesting facts about the eye and brain are discussed&lt;/li&gt;
&lt;li&gt;The fovea is responsible for sharp central vision (also called foveal vision)

&lt;ul&gt;
&lt;li&gt;Necessary in humans for activities where visual detail is of primary importance, such as reading and driving&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rods in Human eye

&lt;ul&gt;
&lt;li&gt;120 Million&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cones in Human eye

&lt;ul&gt;
&lt;li&gt;7 million&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fovea and rapid eye movement help make a visual field&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Most of what we think is true is a series of shortcuts designed to keep us alive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;certainty-ambiguity-context&#34;&gt;Certainty, Ambiguity, Context&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ambiguity makes &lt;strong&gt;certainty&lt;/strong&gt; impossible&lt;/li&gt;
&lt;li&gt;Sufficient context is the cure for ambiguity&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Blivet&lt;/strong&gt; Anti-pattern happens when an ambiguous presentation is adjoined by conflicting &lt;strong&gt;context&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;To fix the Blivet Anti-pattern, remove the conflicting &lt;strong&gt;context&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RTFM&lt;/strong&gt; (Read the Freaking Manual) design smell occurs when there is excessive/redundant instructions on how to use (or not use) the UI.&lt;/li&gt;
&lt;li&gt;When the RTFM design smell is present, see if the UI can be &lt;strong&gt;simplified&lt;/strong&gt; (to no longer need the instructions).&lt;/li&gt;
&lt;li&gt;If you can&amp;rsquo;t fix the RTFM design smell, edit the instructions to use &lt;strong&gt;fewer&lt;/strong&gt; words.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;grouping&#34;&gt;Grouping&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grouping is something the mind naturally wants to do

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s part of our attempts to reduce complexity&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s like a natural compression algorithm in our head&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We can group in a variety of ways to make it easier for humans

&lt;ul&gt;
&lt;li&gt;Containers&lt;/li&gt;
&lt;li&gt;Proximity&lt;/li&gt;
&lt;li&gt;Color (opacity, brightness, saturation)&lt;/li&gt;
&lt;li&gt;Symmetry&lt;/li&gt;
&lt;li&gt;Continuity (along a continuous line or curve)&lt;/li&gt;
&lt;li&gt;Shape&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;symbols&#34;&gt;Symbols&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A simple image that represents something bigger, like an idea&lt;/li&gt;
&lt;li&gt;Complex detailed symbols take more time to parse than simple ones&lt;/li&gt;
&lt;li&gt;To make it easier to &lt;strong&gt;recognize&lt;/strong&gt; symbols, they should be &lt;strong&gt;distinct&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Our minds have a huge capacity to associate meaning to symbols

&lt;ul&gt;
&lt;li&gt;Consider the alphabet&lt;/li&gt;
&lt;li&gt;In english, 52 letters (Upper and Lower characters)&lt;/li&gt;
&lt;li&gt;In Chinese roughly 30,000 to 80,0000 characters&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cognitive-load&#34;&gt;Cognitive Load&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sharp corners seem to inspire a slightly higher cognitive load in the brain.&lt;/li&gt;
&lt;li&gt;We tend to see sharp corners as more salient &lt;strong&gt;(important)&lt;/strong&gt; than obtuse corners.&lt;/li&gt;
&lt;li&gt;Use sharp corners for important corners &lt;strong&gt;(a point)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Use rounded corners for everything else.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;granularity&#34;&gt;Granularity&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We can increase overall message capacity by &lt;strong&gt;combining&lt;/strong&gt; channels&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This increases channel bit capacity, but it is not an additive operation.&lt;/li&gt;
&lt;li&gt;(Other limits on our ability to handle complexity can also be at play)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We may be able to reduce communication errors by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding &lt;strong&gt;redundant channels&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Adding &lt;strong&gt;reference points&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Parts of Speech:

&lt;ul&gt;
&lt;li&gt;Nouns&lt;/li&gt;
&lt;li&gt;Pronouns&lt;/li&gt;
&lt;li&gt;Adjectives&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Channel capacity limits will be a constraining force on other guidelines.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;visual-search&#34;&gt;Visual Search&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sampling Density inside the fovea is high.&lt;/li&gt;
&lt;li&gt;As we move farther from the fovea:

&lt;ul&gt;
&lt;li&gt;Sampling density diminishes&lt;/li&gt;
&lt;li&gt;We lose color perception&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Peripheral vision detects motion and helps you balance and move through space.&lt;/li&gt;
&lt;li&gt;Our brains can search the entire visual field using parallel processes.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Visual searches that heavily utilize our brain&amp;rsquo;s cognitive powers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can operate only on a restricted portion of the visual field.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When designing icons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid thin lines and tiny details&lt;/li&gt;
&lt;li&gt;Thick lines and filled shapes are more easily seen in the periphery.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;background-and-foreground-part-1&#34;&gt;Background and Foreground Part 1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Backgrounds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Should be a solid color&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Emphasis should match &lt;strong&gt;Information Relevance&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constrained by Channel Capacity Limits&lt;/li&gt;
&lt;li&gt;No more than 3 levels in the brightness channel&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Background Color&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reference Points and Relativity&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Minimum Distance for Readability&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Color and Perceived Brightness&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;noise-weak-signal-and-clarity&#34;&gt;Noise, Weak Signal, and Clarity&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hindering Clarity are 2 things:&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Visual Noise&lt;/li&gt;
&lt;li&gt;Weak Signal&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;recognition-vs-recall-orienteering-and-paths&#34;&gt;Recognition vs. Recall, Orienteering, and Paths&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Long Paths:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are harder to remember (increased cognitive load, increased likelihood of mistakes)&lt;/li&gt;
&lt;li&gt;Take longer to perform&lt;/li&gt;
&lt;li&gt;More movement, more thought&lt;/li&gt;
&lt;li&gt;Can induce fatigue&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Narrow paths:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are harder to perform (require more precision)&lt;/li&gt;
&lt;li&gt;Increase likelihood of mistakes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Strenuous/steep paths:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Induce more fatigue&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Erratic paths (require context shifts)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;responsiveness-the-feedback-loop&#34;&gt;Responsiveness &amp;amp; The Feedback Loop&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mark Miller discusses a tool that he built which you can find at github &lt;a href=&#34;https://github.com/MillerMark/FeedbackLoopExplorer&#34; target=&#34;_blank&#34;&gt;HERE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;discoverability&#34;&gt;Discoverability&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Discoverability should be fluid and in parallel (avoid modal instruction)&lt;/li&gt;
&lt;li&gt;Discoverability should be close in proximity to the content of interest.&lt;/li&gt;
&lt;li&gt;Discoverability content should be concise and clear.&lt;/li&gt;
&lt;li&gt;Use images (especially when the text can become more concise)&lt;/li&gt;
&lt;li&gt;Live preview is the best discoverability&lt;/li&gt;
&lt;li&gt;When you invent new UI:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Set aside time&lt;/strong&gt; in the &lt;strong&gt;schedule&lt;/strong&gt; to design and implement good discoverability.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wrapping-up-efficiency-in-thought-and-motion&#34;&gt;Wrapping Up Efficiency in Thought and Motion&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Discuss how our brains work and interact with the world.&lt;/li&gt;
&lt;li&gt;Some short clips with music are presented.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A pdf is given at the end with more condensed notes on all the videos is given.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;personal-thoughts&#34;&gt;Personal Thoughts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Very impressive collection of strategies are presented, I am very intrigued with all the findings and think others will enjoy the course as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;purchase-the-course&#34;&gt;Purchase the Course&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://app.deviq.com/courses/the-science-of-great-ui&#34; target=&#34;_blank&#34;&gt;Science of Great UI&lt;/a&gt; to purchase and watch this great course.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Here are my review notes &lt;a href=&#34;https://t.co/ERNo7ue7ik&#34;&gt;https://t.co/ERNo7ue7ik&lt;/a&gt; for the science of &lt;a href=&#34;https://twitter.com/greatui&#34;&gt;@greatui&lt;/a&gt;  which come straight from the course &lt;a href=&#34;https://t.co/Lep7cOUIOs&#34;&gt;https://t.co/Lep7cOUIOs&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jean-Marcel Belmont (@jbelmont80) &lt;a href=&#34;https://twitter.com/jbelmont80/status/891414055222685696&#34;&gt;July 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>A Review of No Silver Bullet paper</title>
      <link>https://www.marcelbelmont.com/post/no_silver_bullet/</link>
      <pubDate>Mon, 10 Apr 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/no_silver_bullet/</guid>
      <description>

&lt;h1 id=&#34;no-silver-bullet-essence-and-accident-in-software-engineering&#34;&gt;No Silver Bullet Essence and Accident in Software Engineering&lt;/h1&gt;

&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#does-it-have-to-be-hard&#34;&gt;Does It Have To Be Hard&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#complexity&#34;&gt;Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conformity&#34;&gt;Conformity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changeability&#34;&gt;Changeability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#invisibility&#34;&gt;Invisibility&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#past-breakthroughs-solved-accidental-difficulties&#34;&gt;Past Breakthroughs Solved Accidental Difficulties&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#high-level-languages&#34;&gt;High-level languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#time-sharing&#34;&gt;Time-sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unified-programming-environments&#34;&gt;Unified programming environments&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hopes-for-the-silver&#34;&gt;Hopes for the Silver&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ada-and-other-high-level-language-advances&#34;&gt;Ada and other high-level language advances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#object-oriented-programming&#34;&gt;Object-oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#artificial-intelligence&#34;&gt;Artificial intelligence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#expert-systems&#34;&gt;Expert systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#automatic-programming&#34;&gt;Automatic programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#graphical-programming&#34;&gt;Graphical Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#program-verification&#34;&gt;Program verification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#environments-and-tools&#34;&gt;Environments and tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#workstations&#34;&gt;Workstations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#promising-attacks-on-the-conceptual-essence&#34;&gt;Promising Attacks on the Conceptual Essence&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#buy-versus-build&#34;&gt;Buy versus build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#requirements-refinement-and-rapid-prototyping&#34;&gt;Requirements refinement and rapid prototyping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#incremental-development-grow-not-build-software&#34;&gt;Incremental development grow not build software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#great-designers&#34;&gt;Great designers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There is no single development, in either technology or management technique, which by itself promises even one  order of magnitude improvement in productivity, in reliability, in simplicity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Innovations in the software can yield an &amp;ldquo;order-of-magnitude&amp;rdquo; improvement&lt;/li&gt;
&lt;li&gt;Example given in medicine where doctors where taught the benefits of cleanliness improving health of patients

&lt;ul&gt;
&lt;li&gt;In the same way improving processes in software can help improve software step by step&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;does-it-have-to-be-hard&#34;&gt;Does It Have To Be Hard&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Software can&amp;rsquo;t hope to see the gains that hardware has seen with improved chip design every 2 years.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Software construction really can&amp;rsquo;t be compared with hardware constructions.

&lt;ol&gt;
&lt;li&gt;Hardware advances in the last 30 years cannot be compared to any other technology&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Difficulties in Software:
&amp;gt; I believe the hard part of building software to be the specification, design, and testing of this conceptual construct, not the labor of representing it and testing the fidelity of the representation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Syntax errors in software pale in comparison to conceptual errors in a system&lt;/li&gt;
&lt;li&gt;There is no silver bullet&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;complexity&#34;&gt;Complexity&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Computers themselves are among the most complicated things humans build&lt;/li&gt;
&lt;li&gt;Software Construction is more than merely putting parts together

&lt;ul&gt;
&lt;li&gt;Elements of a software system interact in nonlinear ways&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Example given in mathematics where advances in math came for 3 straight centuries because of simplified models&lt;/li&gt;
&lt;li&gt;Complexities in Software Construction create the following issues:

&lt;ul&gt;
&lt;li&gt;Communication among team members&lt;/li&gt;
&lt;li&gt;In turn produces product flaws, cost overruns, schedule delays&lt;/li&gt;
&lt;li&gt;Complexity in understanding all possible states of a system and enumerating the states of a system&lt;/li&gt;
&lt;li&gt;This drives unreliability&lt;/li&gt;
&lt;li&gt;Complexity thereby make programs hard to use&lt;/li&gt;
&lt;li&gt;Complexity makes programs harder to extend newer functionality and consequently introducing side effects&lt;/li&gt;
&lt;li&gt;Complexity also makes security of a software system more difficult to understand&lt;/li&gt;
&lt;li&gt;Complexity also makes management more difficult&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;conformity&#34;&gt;Conformity&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Software engineers face added complexity because they must conform to decisions made by others&lt;/li&gt;
&lt;li&gt;Conforming to other software components itself makes software systems more complex&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;changeability&#34;&gt;Changeability&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Since software is much more malleable and easier to change this by itself introduces more challenges&lt;/li&gt;
&lt;li&gt;Users of a software system find new uses for software and thereby introduce new complexities&lt;/li&gt;
&lt;li&gt;A combination of users of a software system, laws introduced, and new software machinery add difficulties as well&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;invisibility&#34;&gt;Invisibility&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Software is inherently invisible and hard to visualize if even possible&lt;/li&gt;
&lt;li&gt;Attempts to visualize a system become difficult because of all the working pieces&lt;/li&gt;
&lt;li&gt;Since software cannot be easily visualized this in turn adds more complexity to systems&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;past-breakthroughs-solved-accidental-difficulties&#34;&gt;Past Breakthroughs Solved Accidental Difficulties&lt;/h2&gt;

&lt;p&gt;The 3 Steps in software that have helped accidental difficulties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;High-level Languages&lt;/li&gt;
&lt;li&gt;Time-sharing&lt;/li&gt;
&lt;li&gt;Unified programming environments&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;high-level-languages&#34;&gt;High-level languages&lt;/h4&gt;

&lt;p&gt;High-level languages helps in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alleviates accidental complexity&lt;/li&gt;
&lt;li&gt;Diminish complexities that arose from programming in assembly language and understanding machine code&lt;/li&gt;
&lt;li&gt;Improve processes by the use of higher level concepts such as data structures and data types&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;time-sharing&#34;&gt;Time-sharing&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Reduced compilation and execution times of software systems help keep program logic in context

&lt;ul&gt;
&lt;li&gt;This is true because a shorter feedback loop helps engineers keep focused on the task at hand&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;unified-programming-environments&#34;&gt;Unified programming environments&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Development of Unix and Interlisp helped with using software programs together and improving productivity&lt;/li&gt;
&lt;li&gt;Unified file formats, and integrated libraries helped immeasurably as well&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hopes-for-the-silver&#34;&gt;Hopes for the Silver&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Looking at possible silve bullets&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;ada-and-other-high-level-language-advances&#34;&gt;Ada and other high-level language advances&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Ada is touted as a very influential programming language&lt;/li&gt;
&lt;li&gt;Ada&amp;rsquo;s philosophy more than its features as a language have been influential&lt;/li&gt;
&lt;li&gt;Fred Brooks makes a prediction that Ada will have an impact by training engineers with modern software practices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;object-oriented-programming&#34;&gt;Object-oriented programming&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Argues that object-oriented programming (OOP) helps remove boilerplate of previous software constructs&lt;/li&gt;
&lt;li&gt;OOP helps with higher-order design of software systems&lt;/li&gt;
&lt;li&gt;Argues that OOP can only help if some of the troubles of &lt;code&gt;type specification&lt;/code&gt; is reduced in systems&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;artificial-intelligence&#34;&gt;Artificial intelligence&lt;/h4&gt;

&lt;p&gt;Brooks examines argument made by &lt;code&gt;Parnas&lt;/code&gt; on AI&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The use of computers to solve problems that previously could only be solved by applying human intelligence.

&lt;ol&gt;
&lt;li&gt;Argument is made that what people consider is AI today can rapidly change, kind of like a floating goal.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The use of a specific set of programming techniques knows as heuristic or rule-based programming.

&lt;ol&gt;
&lt;li&gt;Not detail expounded on rule based systems but I can surmise that there are unspoken challenges since this requires expert knowledge that must be gleaned from an actual expert&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;expert-systems&#34;&gt;Expert systems&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Inference engines offer advantages over deterministic logic through application independence and varied use&lt;/li&gt;
&lt;li&gt;Rule sets can encode universal ideas that can be applied to different applications thereby distributing complexity&lt;/li&gt;
&lt;li&gt;Argues that separation of application complexity from the software program itself is an important advance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Applications for software tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Suggest interface rules&lt;/li&gt;
&lt;li&gt;Help with testing strategies&lt;/li&gt;
&lt;li&gt;Optimization strategies&lt;/li&gt;
&lt;li&gt;Argues that rule-based systems should become more hierarchically modularized in the same that a system does&lt;/li&gt;
&lt;li&gt;Argues that test case generation is work that has to be done anyways and rules can help maintenance of a system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Difficulties in Expert Systems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Difficult going from program structure specification to the semi-automatic generation of diagnostic rules&lt;/li&gt;
&lt;li&gt;Knowledge Acquisation is difficult for several reasons:

&lt;ol&gt;
&lt;li&gt;Finding experts that are articulate enough and understand why they do things.&lt;/li&gt;
&lt;li&gt;Extracting information from experts in order to distill into the rule bases is another&lt;/li&gt;
&lt;li&gt;Experts are required&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Distilling knowledge to inexperienced programmers from the best programmers is also no simple task.&lt;/li&gt;
&lt;li&gt;A tool that disseminates this knowledge is extremely important&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;automatic-programming&#34;&gt;Automatic programming&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;In short, automatic programming always has been a euphemism for programming with a higher-level language than was presently available to the programmer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Automatic Programming favorable qualities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The problems are readily characterized by relatively few parameters.&lt;/li&gt;
&lt;li&gt;There are many known methods of solution to provide a library of alternatives.&lt;/li&gt;
&lt;li&gt;Extensive analysis has led to explicit rules for selecting solution techniques, given problem parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Argues that such programming seems difficult to even achieve&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;graphical-programming&#34;&gt;Graphical Programming&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Argues that uses of flow-chart is a poor abstraction of software construction&lt;/li&gt;
&lt;li&gt;Argues that it is a useless design tool used by programmers since it is used after writing programs not before&lt;/li&gt;
&lt;li&gt;Argues that desktop computer sophistication is a hindrance to software systems underlying complexity

&lt;ul&gt;
&lt;li&gt;As this was written in 1986 many advances have occurred with software so not sure about this point&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Argues that software is very difficult to visualize

&lt;ul&gt;
&lt;li&gt;The following graphical tools:&lt;/li&gt;
&lt;li&gt;Diagram control flow, varible scope nesting, variable cross-references, data flow, hierarchical data structures&lt;/li&gt;
&lt;li&gt;Even with these tools it is difficult to get a global overview of a software system.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A software systems cannot be visualized in the same way that hardware systems can&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;program-verification&#34;&gt;Program verification&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Argues that Program verification is powerful but labor intensive and very few programs have been proven correct&lt;/li&gt;
&lt;li&gt;Argues that program verification can only assert that a program meets its specification&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The hardest part of the software task is arriving at a complete and consistent specification, and much of the essence of building a program is in fact the debugging of the specification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;environments-and-tools&#34;&gt;Environments and tools&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Smart Editors at most can help with syntactic errors and simple semantic errors&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Integrated Database Systems&amp;rdquo; that keep track of details that programmer&amp;rsquo;s must understand

&lt;ul&gt;
&lt;li&gt;I am assuming here that &amp;ldquo;Object Relational Mappers&amp;rdquo; could be considered nice tools to extract business logic&lt;/li&gt;
&lt;li&gt;Examples like linq instead of using Stored Procedures and Table Triggers&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;workstations&#34;&gt;Workstations&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The point is made that even with factor of 10 speed increases in developer workstations you still have think time

&lt;ul&gt;
&lt;li&gt;Think time being the time a developer uses modelling out business logic and program flow I assume&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;promising-attacks-on-the-conceptual-essence&#34;&gt;Promising Attacks on the Conceptual Essence&lt;/h2&gt;

&lt;p&gt;Productivity Equation:&lt;/p&gt;

&lt;p&gt;$$ \sum(Frequency)_i x (Time)_i $$&lt;/p&gt;

&lt;p&gt;Focusing on the task at hand or the conceptual essence is not the silver bullet as well&lt;/p&gt;

&lt;h4 id=&#34;buy-versus-build&#34;&gt;Buy versus build&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It is cheaper to buy production ready software than try to write homegrown software

&lt;ul&gt;
&lt;li&gt;Argues that a software system costing $100,000 could be roughly equivalent to a yearly salary of a developer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Argument made that the ratio of hardware/software cost has changed dramatically

&lt;ul&gt;
&lt;li&gt;if you spent 2 million on a piece of hardware then spending another $250,000 on software is a drop in the bucket&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Development of spreadsheet and office technologies has enabled the mainline computer user to find new uses

&lt;ul&gt;
&lt;li&gt;Argues such office software has the possibility of being a force multiplier in advances through novel uses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;requirements-refinement-and-rapid-prototyping&#34;&gt;Requirements refinement and rapid prototyping&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Clients find it hard to nail down the exact requirements that they want&lt;/li&gt;
&lt;li&gt;Will often take multiple versions of a prototype to nail down what the client wants&lt;/li&gt;
&lt;li&gt;Points out that rapid prototype tools can assist greatly in solving software problems&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The  purpose  of  the  prototype  is  to  make  real  the  conceptual  structure  specified,  so  that  the  client  can  test  it  for  consistency  and  usability&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Iterative development and the use of prototypes is key to building satisfactory software system&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;incremental-development-grow-not-build-software&#34;&gt;Incremental development grow not build software&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Calls for iterative development in software

&lt;ul&gt;
&lt;li&gt;Flesh out details bit by bit in a system&lt;/li&gt;
&lt;li&gt;I would argue that TDD can help with such things by facilitating with incremental design&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;That is, the system should first be made to run, even though it does nothing useful except call the proper set of dummy subprograms.  Then, bit-by-bit it is fleshed out, with the subprograms in turn being developed into actions or calls to empty stubs in the level below&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The main point is see in this section is that having a running system at all times keeps you focused and attentive&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;great-designers&#34;&gt;Great designers&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Good design can help drive quality of a system

&lt;ul&gt;
&lt;li&gt;Organizations like the Software Engineering Institute help promote good software systems&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Argues that great design minds (meaning individuals) can accomplish more than a committee of designers&lt;/li&gt;
&lt;li&gt;Find ways to nurture highly creative minds as they can pave the way to the future

&lt;ul&gt;
&lt;li&gt;Examples are given with Unix, SmallTalk, Fortran and others that were largely individual efforts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Argues that organizations must cultivate great designers just like they would with management prospects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Highlights the following ways to grow great designers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Systematically identify top designers as early as possible. The best are often not the most experienced&lt;/li&gt;
&lt;li&gt;Assign a career mentor to be responsible for the development of the prospect, and keep a careful career file&lt;/li&gt;
&lt;li&gt;Devise and maintain a career development plan for each prospect&lt;/li&gt;
&lt;li&gt;including carefully selected apprenticeships with top designers, episodes of advanced formal education&lt;/li&gt;
&lt;li&gt;short courses, all interspersed with solo design and technical leadership assignments&lt;/li&gt;
&lt;li&gt;Provide opportunities for growing designers to interact with and stimulate each other&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Review of Little Manual of API Design paper</title>
      <link>https://www.marcelbelmont.com/post/api-design/</link>
      <pubDate>Fri, 10 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/api-design/</guid>
      <description>

&lt;h1 id=&#34;the-little-manual-of-api-design&#34;&gt;The Little Manual of API Design&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://people.mpi-inf.mpg.de/~jblanche/&#34; target=&#34;_blank&#34;&gt;Jasmin Blanchette&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#characteristics-of-good-apis&#34;&gt;Characteristics of Good APIs&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#easy-to-learn-and-memorize&#34;&gt;Easy to learn and memorize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#leads-to-readable-code&#34;&gt;Leads to readable code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hard-to-misuse&#34;&gt;Hard to misuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#easy-to-extend&#34;&gt;Easy to extend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete&#34;&gt;Complete&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-design-process&#34;&gt;The Design Process&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#know-the-requirements&#34;&gt;Know the requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#write-use-cases-before-you-write-any-other-code&#34;&gt;Write use cases before you write any other code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#look-for-similar-apis-in-the-same-library&#34;&gt;Look for similar APIs in the same library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#define-the-api-before-you-implement-it&#34;&gt;Define the API before you implement it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#have-your-peers-review-your-api&#34;&gt;Have your peers review your API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#write-several-examples-against-the-api&#34;&gt;Write several examples against the API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prepare-for-extensions&#34;&gt;Prepare for extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#don&#39;-t-publish-internal-apis-without-review&#34;&gt;Don’t publish internal APIs without review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#when-in-doubt-,-leave-it-out&#34;&gt;When in doubt, leave it out&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#design-guidelines&#34;&gt;Design Guidelines&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#choose-self-explanatory-names-and-signatures&#34;&gt;Choose self-explanatory names and signatures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#choose-unambiguous-names-for-related-things&#34;&gt;Choose unambiguous names for related things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#beware-of-false-consistency&#34;&gt;Beware of false consistency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#avoid-abbreviations&#34;&gt;Avoid abbreviations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prefer-specific-names-to-general-names&#34;&gt;Prefer specific names to general names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#don&#39;-t-be-a-slave-of-an-underlying-api&#39;-s-naming-practices&#34;&gt;Don&amp;rsquo;t be a slave of an underlying API&amp;rsquo;s naming practices&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Semantics

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#choose-good-defaults&#34;&gt;Choose good defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#avoid-making-your-apis-overly-clever&#34;&gt;Avoid making your apis overly clever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pay-attention-to-edge-cases&#34;&gt;Pay attention to edge cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#be-careful-when-defining-virtual-apis&#34;&gt;Be careful when defining virtual APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Structural

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#strive-for-property-based-apis&#34;&gt;Strive for property-based APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-best-api-is-no-api&#34;&gt;The best API is no API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bread-crumb-navigation&#34;&gt;Bread Crumb Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#github-repository&#34;&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An application programming interface, or API, is the set of symbols that are exported and available to the users of a library to write their applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://people.csail.mit.edu/dnj/&#34; target=&#34;_blank&#34;&gt;Daniel Jackson&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Software is built on abstractions. Pick the right ones, and pro-gramming will flow naturally from design;
modules will havesmall and simple interfaces; and new functionality will more likely fit in without extensive reorganization.
Pick the wrongones, and programming will be a series of nasty surprises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;characteristics-of-good-apis&#34;&gt;Characteristics of Good APIs&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Easy to learn and memorize&lt;/li&gt;
&lt;li&gt;Leads to readable code&lt;/li&gt;
&lt;li&gt;Hard to misuse&lt;/li&gt;
&lt;li&gt;Easy to extend&lt;/li&gt;
&lt;li&gt;Complete&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;API authors should strive for &amp;ldquo;minimal&amp;rdquo; and &amp;ldquo;consistent&amp;rdquo; APIs only to the extent that it helps the list above.&lt;/p&gt;

&lt;p&gt;APIs should be consistent in the sense that similar concepts should be named the same while different concepts should have different names&lt;/p&gt;

&lt;h3 id=&#34;easy-to-learn-and-memorize&#34;&gt;Easy to learn and memorize&lt;/h3&gt;

&lt;p&gt;Implementation of &lt;code&gt;md5&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function md5({ str, encoding = &#39;hex&#39; }) {
  return crypto
    .createHash(&#39;md5&#39;)
    .update(str)
    .digest(encoding);
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unit test for &lt;code&gt;md5&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;test(&#39;mdf5 should compute challenge when given ha2, nonce, cnonce, and qop&#39;, assert =&amp;gt; {
  const md5 = require(&#39;../../utils/md5&#39;).md5;
  const ha2 = md5({
    str: &#39;GET:/api/v1/digestScheme&#39;
  });
  const actual = md5({
    str: `${ha2}:${process.env.NONCE}:${process.env.NONCE}:auth`
  });
  const expected = &#39;adc91a91ffaa68815d5a5d8e4ed8d9e9&#39;;
  assert.is(actual, expected, `should return ${expected}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the &lt;code&gt;md5&lt;/code&gt; function takes an object with a property of &lt;code&gt;str&lt;/code&gt; and a string value.&lt;/p&gt;

&lt;p&gt;I named this function in my api &lt;code&gt;md5&lt;/code&gt; because it computes a hash value when given a string value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A minimal API is easy to memorize because there is little to remember.&lt;/li&gt;
&lt;li&gt;A consistent API is easy to memorize because you can reapply what you learned in one part of the API when using a different part.&lt;/li&gt;
&lt;li&gt;An API is not only the names of the classes and methods that compose it, but also their intended semantics.&lt;/li&gt;
&lt;li&gt;An easy-to-learn API makes it possible to write the “hello world” example in just a few easy lines of code and to expand it incrementally to obtain more complex programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;An easy-to-learn API features consistent naming conventions and patterns,economy of concepts, and predictability. It uses the same name for the sameconcept, and different names for different concepts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MD5&#34; target=&#34;_blank&#34;&gt;MD5&lt;/a&gt;
&amp;gt; The MD5 algorithm is a widely used hash function producing a 128-bit hash value. Although MD5 was initially designed to be used as a cryptographic hash function, it has been found to suffer from extensive vulnerabilities. It can still be used as a checksum to verify data integrity, but only against unintentional corruption.&lt;/p&gt;

&lt;h3 id=&#34;leads-to-readable-code&#34;&gt;Leads to readable code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Readable code is easier to document and maintain.&lt;/li&gt;
&lt;li&gt;Readable code is always at the right level of abstraction.

&lt;ul&gt;
&lt;li&gt;it neither hides important things nor forces the programmer to specify irrelevant information&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implement decode unsigned JSON web token function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function decodeUnsignedJWT(jwt) {
  const [
    headerB64,
    payloadB64
   ] = jwt.split(&#39;.&#39;);
  const headerStr = new Buffer(headerB64, &#39;base64&#39;).toString();
  const payloadStr = new Buffer(payloadB64, &#39;base64&#39;).toString();
  return {
    header: JSON.parse(headerStr),
    payload: JSON.parse(payloadStr)
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unit test for decodeUnsignedJWT function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;test(&#39;decode should return base64 decoded string&#39;, assert =&amp;gt; {
  const header = {
    alg: &#39;HS256&#39;
  };

  const payload = {
    name: &#39;John Rambo&#39;,
    rank: &#39;Sergeant&#39;,
    branch: &#39;Army&#39;
  };

  const encodeUnsignedJWT = require(&#39;../../utils/encode&#39;).encodeUnsignedJWT;
  const encoded = encodeUnsignedJWT({
    header,
    payload
  });

  const decodeUnsignedJWT = require(&#39;../../utils/decode&#39;).decodeUnsignedJWT;
  const actual = decodeUnsignedJWT(encoded);
  const expected = {
    header: &#39;{&amp;quot;alg&amp;quot;:&amp;quot;HS256&amp;quot;}&#39;,
    payload: &#39;{&amp;quot;name&amp;quot;:&amp;quot;John Rambo&amp;quot;,&amp;quot;rank&amp;quot;:&amp;quot;Sergeant&amp;quot;,&amp;quot;branch&amp;quot;:&amp;quot;Army&amp;quot;}&#39;
  };
  assert.deepEqual(actual, expected, `should return ${expected}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hard-to-misuse&#34;&gt;Hard to Misuse&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A well-designed API makes it easier to write correct code than incorrect code, and encourages good programming practices.
It does not needlessly force the user to call methods in a strict order or to be aware of implicit side effects or semantic oddities.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Make an API hard to misuse by eliminating redundancy. For example, an addItem(Item) method that lets the user write.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mySet = new Set();
mySet.add(1);
mySet.add(5);
mySet.add(&#39;some text&#39;);
mySet.keys() // SetIterator {1, 5, &amp;quot;some text&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above is some new ES2015 syntax in JavaScript for creating Sets.
The Set object lets you store unique values of any type, whether primitive values or object references.&lt;/p&gt;

&lt;p&gt;As the paper states you want to design an api that is hard to use and in this case a set is good in order to have unique values and avoid duplicate values which can be problematic at times.&lt;/p&gt;

&lt;h3 id=&#34;easy-to-extend&#34;&gt;Easy to extend&lt;/h3&gt;

&lt;p&gt;APIs should be easy to extend as new classes/function get added over time. Parameters get added/removed from function signatures.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;

const {join} = require(&#39;path&#39;);
const {readFileSync} = require(&#39;fs&#39;);

const winston = require(&#39;winston&#39;);
const jwt = require(&#39;jsonwebtoken&#39;);

const {responseCodes} = require(&#39;../constants&#39;);

const PATH = &#39;/api/v1/&#39;;

const createToken = (req, res, next) =&amp;gt; {
    // sign with RSA SHA256
  const cert = readFileSync(join(__dirname, &#39;../ca/ca.key&#39;));

  const {name} = req.body;

    // sign asynchronously
  jwt.sign({ name }, cert, { algorithm: &#39;RS256&#39; }, (err, token) =&amp;gt; {
    if (err) {
      winston.log(&#39;error&#39;, &#39;Error Creating json web token&#39;, {err});
      res.send(err);
    }
    res.send(responseCodes[&#39;created&#39;], {
      adminToken: token
    });
    return next();
  });
};


module.exports = (app) =&amp;gt; {
  app.post(`${PATH}/createToken`, createToken);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I have an endpoint to sign a jwt with an expiration date which returns the following payload.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;adminToken&amp;quot;: &amp;quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.
                 eyJuYW1lIjoiYWRtaW5Ub2tlbiIsImlhdCI6MTQ4NjYwNDU3OX0.
                 Pg7HOKIwn6HietMotYbwIvSGqvOcoUSNegQXW_BN-C5rQu9ZXyJnz6iK-L2JzLqlzAApuB1ria5TcN0HkrZQ3aBrIflvjv96W5M_51GEwXxpQ1wTSA-T6ZRBzanq7b_RRhB_TEsezf7hf87U-N6nWnV9EKo1LAf_fAo53-7mXTVAJyG39n2NxJfkJ9btvcq8BLZN68AF-WFpsPTtujQV2kA9sI9ApeTdh_7qgLTkm8Iup7rwDrtnA2TNidgqjnMSgKsHYdtvc1_guxp6LJ2lVeF0XgmMVqw6-EFfa4w15azEF-bJYHn23f_GobpRZsR7_YvWLN5dt1NU56JT2Nip3Q&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can easily extend the api to do more things with jwt&amp;rsquo;s by just adding HTTP methods to module.exports&lt;/p&gt;

&lt;h3 id=&#34;complete&#34;&gt;Complete&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ideally an api would be complete and your users can do everything that they want to do.&lt;/li&gt;
&lt;li&gt;Realistically this does not always happen but if you can provide a way for your users to extend the api or customize it then it can help an API be complete.&lt;/li&gt;
&lt;li&gt;API completeness is something that can occur incrementally over time through extension as mentioned above.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-design-process&#34;&gt;The Design Process&lt;/h2&gt;

&lt;h3 id=&#34;know-the-requirements&#34;&gt;Know the requirements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Before setting out to design an API, you should have a clear understanding of the requirements.&lt;/li&gt;
&lt;li&gt;Usually you will have to do some requirements analysis

&lt;ol&gt;
&lt;li&gt;Ask your collegues, users, your boss etc. in order to get a better picture&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;write-use-cases-before-you-write-any-other-code&#34;&gt;Write use cases before you write any other code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avoid diving into implementation from the very start of api design.

&lt;ol&gt;
&lt;li&gt;APIs designed in this way don&amp;rsquo;t take users of your API into account&lt;/li&gt;
&lt;li&gt;The API Implementation should adapt to the users oof you API.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Write some code snippets based on your requirements analysis.&lt;/li&gt;
&lt;li&gt;I would suggest writing some unit tests though the author doesn&amp;rsquo;t explicitly mention this.&lt;/li&gt;
&lt;li&gt;Using the principles of TDD your API will take shape

&lt;ol&gt;
&lt;li&gt;Add a test&lt;/li&gt;
&lt;li&gt;Run all tests and see if the new test fails&lt;/li&gt;
&lt;li&gt;Write the code&lt;/li&gt;
&lt;li&gt;Run tests&lt;/li&gt;
&lt;li&gt;Refactor code&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;look-for-similar-apis-in-the-same-library&#34;&gt;Look for similar APIs in the same library&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Author argues that similar APIs have the added benefit that users familiar with one method/class can easily learn another method/class if they are similar.&lt;/li&gt;
&lt;li&gt;Author adds the caveat that you shouldn&amp;rsquo;t blindly follow an already existing API but instead look for improvements and/or fix bad APIs and then mimic then elsewhere.&lt;/li&gt;
&lt;li&gt;If you are writing a newer version of the API, then you should the API you are replacing very well, otherwise you run the risk of introducing new design flaws for old flaws&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;define-the-api-before-you-implement-it&#34;&gt;Define the API before you implement it&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;For a library with thousands of users, it is much better if the implementation is tricky and the API is straightforward than the other way around.&lt;/li&gt;
&lt;li&gt;APIs will typically outlast their implementations (e.g., UNIX/POSIX, OpenGL).&lt;/li&gt;
&lt;li&gt;As you implement the API or write unit tests for your implementation, you will most probably find flaws or undefined corner cases in your original design.

&lt;ol&gt;
&lt;li&gt;I would argue here that if you are following Test-Driven Development that you can find corner cases possibly earlier and avoid abstractions from leaking out into your api.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;have-your-peers-review-your-api&#34;&gt;Have your peers review your API&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Look for feedback.&lt;/li&gt;
&lt;li&gt;Ask for feedback.&lt;/li&gt;
&lt;li&gt;Beg for feedback.&lt;/li&gt;
&lt;li&gt;Show your APIs to your peers, and collect all the feedback you get.&lt;/li&gt;
&lt;li&gt;Try to momentarily forget how much work it would be to implement the requested changes.&lt;/li&gt;
&lt;li&gt;The more facts you possess, the better thechances that you will design a good API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some thoughts about this that I have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open a pull request in whatever version control system that you like (eg. Github, Gitlab, Bitbucket, etc)

&lt;ol&gt;
&lt;li&gt;Add reviewers if you can and ask for people&amp;rsquo;s thoughts on what you worked.&lt;/li&gt;
&lt;li&gt;Depending on what you are working can really save you from costly design decisions in the future.&lt;/li&gt;
&lt;li&gt;One thing I liked about how Jose Valim (Creator of Elixir) is how collaborative he has been with the Elixir Programming Language by seeking out advice from others.&lt;/li&gt;
&lt;li&gt;I believe more feedback can help avoid mistakes in the future.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;write-several-examples-against-the-api&#34;&gt;Write several examples against the API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;After you designed an API, you should write a few examples that use the API.&lt;/li&gt;
&lt;li&gt;Often, you can obtain examples simply by fleshing out the use cases defined earlier

&lt;ol&gt;
&lt;li&gt;Once again I typically use the unit tests that I write for my classes/functions as later examples.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ask others to write unit tests of your examples and an added bonus is they can describe any roadblocks they ran into.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;prepare-for-extensions&#34;&gt;Prepare for extensions&lt;/h3&gt;

&lt;p&gt;Expect your API to be extended in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;By the maintainers of the API, who will add to it (and occasionally deprecate parts of the API).&lt;/li&gt;
&lt;li&gt;By users, who will write subclasses to customize the behavior of its components

&lt;ol&gt;
&lt;li&gt;In a language like you JavaScript you can somewhat achieve this by making &lt;code&gt;BaseClass.prototype&lt;/code&gt; is copied into &lt;code&gt;ChildClass.prototype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Although Kyle Simpson has an interesting take on this for JavaScript coining the term Object linked with other Objects (OLOO).&lt;/li&gt;
&lt;li&gt;Essentially you delegate methods back to the original objects&lt;/li&gt;
&lt;li&gt;Example delegating a method in an array back to the &lt;code&gt;Array.prototype&lt;/code&gt;, it walks up the prototype chain to find the used method.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;don-t-publish-internal-apis-without-review&#34;&gt;Don&amp;rsquo;t publish internal APIs without review&lt;/h3&gt;

&lt;p&gt;Author points out that you should carefully review internal APIs before releasing them out into the public
because once your APIs are public it becomes more difficult to update bad method names once people are using them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I would also add here that if you have a solid code review process you can get feedback like this early on,
especially if you make any code changes via a pull request and add multiple reviewers.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;when-in-doubt-leave-it-out&#34;&gt;When in doubt, leave it out&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you are in doubt about adding any functionality in your API, then leave it out, mark it as internal and reconsider at a later time.&lt;/li&gt;
&lt;li&gt;Wait for feedback from users.

&lt;ol&gt;
&lt;li&gt;Author makes good point that you can&amp;rsquo;t always add every feature that users want.&lt;/li&gt;
&lt;li&gt;Author suggest a rule of thumb to wait for 3 independent request for the same feature before implementing it.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;design-guidelines&#34;&gt;Design Guidelines&lt;/h2&gt;

&lt;p&gt;Author highlights the fact that in the end, you must think through API design and guidelines cannot substitute this.&lt;/p&gt;

&lt;h3 id=&#34;choose-self-explanatory-names-and-signatures&#34;&gt;Choose self-explanatory names and signatures&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pick names that are self-explanatory and can read like English.&lt;/li&gt;
&lt;li&gt;The arguments of a function/method should be evident at the call site.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function decodeUnsignedJWT(jwt) {
  const [
    headerB64,
    payloadB64
   ] = jwt.split(&#39;.&#39;);
  const headerStr = new Buffer(headerB64, &#39;base64&#39;).toString();
  const payloadStr = new Buffer(payloadB64, &#39;base64&#39;).toString();
  return {
    header: JSON.parse(headerStr),
    payload: JSON.parse(payloadStr)
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The argument jwt indicates that this is a JSON Web Token (jwt).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Author argues that you should strive for consistency in naming and he also argues that consistency is important when fixing the order of parameters

&lt;ol&gt;
&lt;li&gt;If rectangles have the following signature &lt;code&gt;Rectangle(x, y, width, height)&lt;/code&gt; then changing the order can break your API.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would argue here instead to use an object that way the order of the parameters isn&amp;rsquo;t affected and adding a parameter anywhere from a caller won&amp;rsquo;t affect the function.
Here is an example function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Demeter(soldier) {
  this.name = soldier.name || &#39;&#39;;
  this.rank = soldier.rank || &#39;private&#39;;
  this.specialty = soldier.specialty || [];
  this.years = soldier.years || 0;
  this.job = soldier.job || &#39;firefighter&#39;;
  this.getInformation = function(newSoldier) {
    return Object.assign(
      {},
      { name: this.name, rank: this.rank, specialty: this.specialty, years: this.years },
      { exercise: newSoldier.exercise, branch: newSoldier.branch }
    );
  };
  this.civilianPlan = {
    printPlan: function() {
      return `Civilian Job Plan: ${this.job}`;
    }.bind(this)
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Demeter.prototype.soldierStats = function(newSoldier) {
  return {
    height: newSoldier.height,
    weight: newSoldier.weight,
    gender: newSoldier.gender,
    age: newSoldier.age
  };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Good naming also require that you know the audience.

&lt;ol&gt;
&lt;li&gt;You will need to use names that are consistent with the industry:

&lt;ol&gt;
&lt;li&gt;For example for auto parts supply application using jargon names consistent with auto parts would be good.&lt;/li&gt;
&lt;li&gt;When you do this you should have good documentation.&lt;/li&gt;
&lt;li&gt;If it is a high-level API meaning users are not as familiar than jargon should be used sparingly.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Parameter names are important in an API as a lot of users will be looking for intellisense if they are using an IDE.

&lt;ol&gt;
&lt;li&gt;Avoid single-letter parameter names but there are always exceptions.

&lt;ol&gt;
&lt;li&gt;Namely if you are finding the slope of a line &lt;code&gt;y = mx + b&lt;/code&gt; then x, y, b, and m would be appropriate parameter names.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;choose-unambiguous-names-for-related-things&#34;&gt;Choose unambiguous names for related things&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If two or more concepts need to be clearly differentiated then choose names that map clearly to the concepts they denote.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Square() {}

Square.prototype.setSide = function(side) {
  this.side = side;
};

Square.prototype.area = function() {
  return Math.pow(this.side, 2);
};

function Rectangle() {}

Rectangle.prototype.setWidth = function(width) {
  this.width = width;
};

Rectangle.prototype.setHeight = function(height) {
  this.height = height;
};

Rectangle.prototype.area = function() {
  return this.width * this.height;
};

function Circle() {}

Circle.prototype.setPI = function(PI) {
  this.PI = PI;
};

Circle.prototype.setRadius = function(radius) {
  this.radius = radius;
};

Circle.prototype.area = function() {
  return (this.PI * Math.pow(this.radius, 2)).toFixed(4);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;beware-of-false-consistency&#34;&gt;Beware of false consistency&lt;/h3&gt;

&lt;p&gt;Similar concepts should be grouped together and be of similar form&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example the in JavaScript the methods on &lt;code&gt;Array.prototype&lt;/code&gt; such as &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt; all have a similar form and typically compose well together&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consequently if you have follow a convention of prefixing methods that set state such as &lt;code&gt;setSide&lt;/code&gt; then don&amp;rsquo;t suprise the users of your API by having it return a value instead of set a value.&lt;/p&gt;

&lt;h3 id=&#34;avoid-abbreviations&#34;&gt;Avoid abbreviations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;During API design if you use obscure abbreviations then your users must remember which words and the associated context&lt;/li&gt;
&lt;li&gt;Avoid using abbreviations like &lt;code&gt;setRad&lt;/code&gt; and instead use &lt;code&gt;setRadius&lt;/code&gt; to clearly mark what you intend to do.&lt;/li&gt;
&lt;li&gt;Acronyms are still okay you don&amp;rsquo;t have to spell out Hyper Text Markup Language as HTML is a commonly known term on the web.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;prefer-specific-names-to-general-names&#34;&gt;Prefer specific names to general names&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using specific names helps users relate better to what you are API is doing.&lt;/li&gt;
&lt;li&gt;Once you pick a general name it is hard to go back and change it to be more specific&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const readSoldiers = () =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    fs.readFile(join(__dirname, &#39;../../../data/soldiers.csv&#39;), (err, data) =&amp;gt; {
      if (err) {
        reject(err);
      }
      const soldiers = data.toString().trim().split(&#39;\n&#39;);
      resolve(soldiers);
    });
  });
};

const formatSoldiers = (soldiers) =&amp;gt; {
  return soldiers.map(soldier =&amp;gt; soldier.split(&#39;,&#39;)).map((field) =&amp;gt; {
    return {
      name: field[0],
      rank: field[1],
      branch: field[2]
    };
  });
};

const writeSoldiers = (soldiers) =&amp;gt; {
  return fs.writeFile(join(__dirname, &#39;soldiers.json&#39;), JSON.stringify(soldiers), (err) =&amp;gt; {
    if (err) {
      throw err;
    }
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I choose readSoldiers, formatSoldiers, and writeSoldiers to denote what I am doing though I could have done &lt;code&gt;readSoldiersCSV&lt;/code&gt; to be more specific.&lt;/p&gt;

&lt;h3 id=&#34;don-t-be-a-slave-of-an-underlying-api-s-naming-practices&#34;&gt;Don&amp;rsquo;t be a slave of an underlying API&amp;rsquo;s naming practices&lt;/h3&gt;

&lt;p&gt;Choose well intentioned names and don&amp;rsquo;t blindly follow naming conventions from other APIs if you can find a more suitable name.&lt;/p&gt;

&lt;h2 id=&#34;semantics&#34;&gt;Semantics&lt;/h2&gt;

&lt;h3 id=&#34;choose-good-defaults&#34;&gt;Choose good defaults&lt;/h3&gt;

&lt;p&gt;Presumably if you can set defaults for an API instead of having users need to do so then you can avoid possible errors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const files = {
  stats: [1, 2, 3, 4, 5]
};
const items = {
  supplies: [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]
}
function doTheThing({ files = files, items = items }) {
  const defaults = Object.assign({}, files, items)
  ....
  ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;Object.assign&lt;/code&gt; can be good to merge defaults in JavaScript. instead of requiring users of your API complicated setup.&lt;/p&gt;

&lt;h3 id=&#34;avoid-making-your-apis-overly-clever&#34;&gt;Avoid making your apis overly clever&lt;/h3&gt;

&lt;p&gt;Here an important concept is the Single Responsibility principle (SRP), your functions should only do one thing and not have crazy side effects.
If your API methods are doing too many things and having lots of side effect then when users encounter bugs in your API it is hard for them to understand where things are breaking.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const decodeBase64EncodedString = (str) =&amp;gt; {
  const usernameAndPassword = str.split(&#39; &#39;)[1];
  const parseString = new Buffer(usernameAndPassword, &#39;base64&#39;).toString();
  const [
    username,
    password
  ] = parseString.split(&#39;:&#39;);
  return {
    username,
    password
  };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const basicAuthExample = (req, res) =&amp;gt; {
  const {
    authorization
  } = req.headers;
  if (authorization) {
    const decodeString = decodeBase64EncodedString(authorization);
    res.send(responseCodes[&#39;ok&#39;], {
      credentials: decodeString
    });
  } else {
    res.setHeader(&#39;WWW-Authenticate&#39;, &#39;Basic realm=&amp;quot;need login credentials&amp;quot;&#39;);
    res.send(responseCodes[&#39;unauthorized&#39;], {
      errorMessage: &#39;Please provide base 64 encoded username and password&#39;
    });
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I have two separate functions one is decoding base 64 encoded string and the endpoint function is just handling what status code to return and what headers to set.&lt;/p&gt;

&lt;h3 id=&#34;pay-attention-to-edge-cases&#34;&gt;Pay attention to edge cases&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Author argues that you should be alert to edge cases in your API because they can introduce subtle bugs that you didn&amp;rsquo;t anticipate&lt;/li&gt;
&lt;li&gt;Although not explicitly mention I believe here that Test-Driven Development can help with this.&lt;/li&gt;
&lt;li&gt;If you start with a failing test and incrementally design your API you can come up with good test cases for corner cases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function parseHeader(header) {
  let opts = {};
  let parts = header.split(&#39; &#39;);
  let params = parts.slice(1).join(&#39; &#39;);

  // Split the parameters by comma.
  let tokens = params.split(/,(?=(?:[^&amp;quot;]|&amp;quot;[^&amp;quot;]*&amp;quot;)*$)/);
  if (parts[0].substr(0, 6) === &#39;Digest&#39;) {
    // Parse parameters.
    let i = 0;
    let len = tokens.length;

    while (++i &amp;lt; len) {
      // Strip quotes and whitespace.
      let param = /(\w+)=[&amp;quot;]?([^&amp;quot;]*)[&amp;quot;]?$/.exec(tokens[i]);
      if (param) {
        opts[param[1]] = param[2];
      }
    }
  }
  return opts;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test cases for Unit Tests to test this function
1. Pass no arguments to parseHeader =&amp;gt; &lt;code&gt;parseHeader()&lt;/code&gt;
2. Pass an object to parseHeader =&amp;gt; &lt;code&gt;parseHeader({ value: &#39;Digest username=&amp;quot;rambo&amp;quot;, realm=&amp;quot;https://localhost:3000/api/v1/digestScheme&amp;quot;&#39;})&lt;/code&gt;
3. Pass an array to parseHeader =&amp;gt; &lt;code&gt;parseHeader([{ value: &#39;Digest username=&amp;quot;rambo&amp;quot;, realm=&amp;quot;https://localhost:3000/api/v1/digestScheme&amp;quot;, nonce=&amp;quot;Et2azM0urkTJmDb18rZnnwQb3&amp;quot;&#39;}])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The point being that I can use unit test to test edge cases effectively.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;be-careful-when-defining-virtual-apis&#34;&gt;Be careful when defining virtual APIs&lt;/h3&gt;

&lt;p&gt;Well in Dynamic Programming Languages you have more of an implicit contract and so virtual functions is not a direct mapping here,
but one note I can say is that if you follow the SOLID principles
1. Single Responsibility Principle
2. Open/Closed Principle
3. Liskov Substitution Principle
4. Interface Segregation Principle
5. Dependency Inversion Principle&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Using the Open/Closed Principle you can say that Objects should be open for extension but closed for modification&lt;/em&gt;
*Meaning you shouldn&amp;rsquo;t change the base objects at all but instead extend through your callers.**&lt;/p&gt;

&lt;h2 id=&#34;strive-for-property-based-apis&#34;&gt;Strive for property-based APIs&lt;/h2&gt;

&lt;p&gt;The main point that the author makes here is that if you use properties such as setters instead of having many parameters to create an object you can have a more intuitive API.&lt;/p&gt;

&lt;p&gt;An example here would be like computing the slope of a line &lt;code&gt;y = mx + b&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Slope(x, y, m, b) {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function requires 4 parameters and can be problematic if I forget a parameter and switch parameters around, I will get unexpected behavior.&lt;/p&gt;

&lt;p&gt;If I instead set defaults and perhaps used setters like this then I am being more explicit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Slope.prototype.setX = function(x) {
  this.x = x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Slope.prototype.getX = function() {
  return this.x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notes from the Author
1. Users don’t need to remember in which order they need to supplythe attributes or options.
2. User code is more readable and doesn’t require additional comments
3. Since properties have default values, users only have to set those that they explicitly want to change
4. Users can change the value of a property at any time, instead ofhaving to replace the object with a new one whenever they want to modify it.
5. By calling getters, users can query back everything they set, which helps debugging and is useful in some applications
6. The approach is compatible with graphical property editors, which let the user see the result of setting a property immediately&lt;/p&gt;

&lt;p&gt;One thing to note is that doing this requires more work for the API designer as the author mentions.&lt;/p&gt;

&lt;h3 id=&#34;the-best-api-is-no-api&#34;&gt;The best API is no API&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The ideal features are those that require no(or very little) additional code from the application writer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Don&amp;rsquo;t ask the consumers of your API to do more work than necessary to work with your API.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;github-repository&#34;&gt;Github Repository&lt;/h2&gt;

&lt;p&gt;If you like this information then please star this repository on Github at &lt;a href=&#34;https://github.com/jbelmont/papers-we-love-notes/blob/master/docs/api-design-notes.md&#34; target=&#34;_blank&#34;&gt;API Design&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
