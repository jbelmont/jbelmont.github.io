<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on Software Musings</title>
    <link>https://www.marcelbelmont.com/tags/node.js/</link>
    <description>Recent content in Node.js on Software Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jean-Marcel Belmont</copyright>
    <lastBuildDate>Tue, 10 Oct 2017 18:49:29 -0400</lastBuildDate>
    
	<atom:link href="https://www.marcelbelmont.com/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Compare and Contrast Golang and Nodejs for Commandline Apps</title>
      <link>https://www.marcelbelmont.com/post/compare-and-contrast-golang-and-nodejs-for-commandline-apps/</link>
      <pubDate>Tue, 10 Oct 2017 18:49:29 -0400</pubDate>
      
      <guid>https://www.marcelbelmont.com/post/compare-and-contrast-golang-and-nodejs-for-commandline-apps/</guid>
      <description>Command Line Applications Building command line applications is a refreshing change to building UIs. In this blog post I go over briefly my thoughts on building commandline apps with Node.js and Golang
Node.js CommandLine First off I did not use a commander.js or any third party libraries to make my contrived application. I used vanilla node.js
&#39;use strict&#39;; const process = require(&#39;process&#39;); const fs = require(&#39;fs&#39;); const lib = require(&#39;.</description>
    </item>
    
  </channel>
</rss>